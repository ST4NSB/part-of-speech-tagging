<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nancy</name>
    </assembly>
    <members>
        <member name="T:Nancy.AfterPipeline">
            <summary>
            Intercepts the request after the appropriate route handler has completed its operation.
            The After hooks does not have any return value because one has already been produced by the appropriate route.
            Instead you get the option to modify (or completely replace) the existing response by accessing the Response property of the NancyContext that is passed in.
            </summary>
            <seealso cref="T:Nancy.AsyncNamedPipelineBase`2" />
        </member>
        <member name="M:Nancy.AfterPipeline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.AfterPipeline"/> class.
            </summary>
        </member>
        <member name="M:Nancy.AfterPipeline.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.AfterPipeline"/> class, with
            the provided <paramref name= "capacity" />.
            </summary>
            <param name="capacity">Number of delegates in pipeline</param>
        </member>
        <member name="M:Nancy.AfterPipeline.op_Implicit(Nancy.AfterPipeline)~System.Func{Nancy.NancyContext,System.Threading.CancellationToken,System.Threading.Tasks.Task}">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.AfterPipeline"/> to <see cref="T:System.Func`3"/>.
            </summary>
            <param name="pipeline">The <see cref="T:Nancy.AfterPipeline"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Nancy.AfterPipeline.op_Implicit(System.Func{Nancy.NancyContext,System.Threading.CancellationToken,System.Threading.Tasks.Task})~Nancy.AfterPipeline">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Func`3"/> to <see cref="T:Nancy.AfterPipeline"/>.
            </summary>
            <param name="func">The function.</param>
            <returns>
            A new <see cref="T:Nancy.AfterPipeline"/> instance with <paramref name="func"/>
            </returns>
        </member>
        <member name="M:Nancy.AfterPipeline.op_Addition(Nancy.AfterPipeline,System.Func{Nancy.NancyContext,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Appends a new func to the AfterPipeline
            </summary>
            <param name="pipeline">The pipeline.</param>
            <param name="func">The function.</param>
            <returns>
            <paramref name="pipeline"/>
            </returns>
        </member>
        <member name="M:Nancy.AfterPipeline.op_Addition(Nancy.AfterPipeline,System.Action{Nancy.NancyContext})">
            <summary>
            Appends a new action to the AfterPipeline
            </summary>
            <param name="pipeline">The <see cref="T:Nancy.AfterPipeline"/> instance.</param>
            <param name="action">The action.</param>
            <returns>
            <paramref name="pipeline"/>
            </returns>
        </member>
        <member name="M:Nancy.AfterPipeline.op_Addition(Nancy.AfterPipeline,Nancy.AfterPipeline)">
            <summary>
            Appends the items of an <see cref="T:Nancy.AfterPipeline"/> to the other.
            </summary>
            <param name="pipelineToAddTo">The <see cref="T:Nancy.AfterPipeline"/> to add to.</param>
            <param name="pipelineToAdd">The <see cref="T:Nancy.AfterPipeline"/> to add.</param>
            <returns>
            <paramref name="pipelineToAddTo"/>
            </returns>
        </member>
        <member name="M:Nancy.AfterPipeline.Invoke(Nancy.NancyContext,System.Threading.CancellationToken)">
            <summary>
            Invokes the pipeline items in Nancy context.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> instance</param>
        </member>
        <member name="M:Nancy.AfterPipeline.Wrap(Nancy.PipelineItem{System.Action{Nancy.NancyContext}})">
            <summary>
            Wraps the specified <see cref="T:Nancy.PipelineItem`1"/> instance into its async form.
            </summary>
            <param name="pipelineItem">The <see cref="T:Nancy.PipelineItem`1"/> instance.</param>
            <returns>Async <see cref="T:Nancy.PipelineItem`1"/> instance</returns>
        </member>
        <member name="T:Nancy.AppDomainAssemblyCatalog">
            <summary>
            Default implementation of the <see cref="T:Nancy.IAssemblyCatalog"/> interface, based on
            retrieving <see cref="T:System.Reflection.Assembly"/> information from <see cref="P:System.AppDomain.CurrentDomain"/>.
            </summary>
        </member>
        <member name="M:Nancy.AppDomainAssemblyCatalog.GetAssemblies">
            <summary>
            Gets all <see cref="T:System.Reflection.Assembly"/> instances in the catalog.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:System.Reflection.Assembly"/> instances.</returns>
        </member>
        <member name="T:Nancy.ArrayCache">
            <summary>
            A cache for empty arrays.
            </summary>
        </member>
        <member name="M:Nancy.ArrayCache.Empty``1">
            <summary>
            Gets a cached, empty array of the specified type.
            </summary>
            <typeparam name="T">the type of array to get.</typeparam>
        </member>
        <member name="T:Nancy.AsyncNamedPipelineBase`2">
            <summary>
            Abstract base class for request pipelines with async support
            </summary>
            <typeparam name="TAsyncDelegate">The type of the asynchronous delegate.</typeparam>
            <typeparam name="TSyncDelegate">The type of the synchronus delegate.</typeparam>
        </member>
        <member name="F:Nancy.AsyncNamedPipelineBase`2.pipelineItems">
            <summary>
            Pipeline items to execute
            </summary>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Nancy.AsyncNamedPipelineBase`2"/>
            </summary>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Nancy.AsyncNamedPipelineBase`2"/> with size
            </summary>
            <param name="capacity">Number of delegates in pipeline</param>
        </member>
        <member name="P:Nancy.AsyncNamedPipelineBase`2.PipelineItems">
            <summary>
            Gets the current pipeline items
            </summary>
        </member>
        <member name="P:Nancy.AsyncNamedPipelineBase`2.PipelineDelegates">
            <summary>
            Gets the current pipeline item delegates
            </summary>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToStartOfPipeline(`0)">
            <summary>
            Add an item to the start of the pipeline
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToStartOfPipeline(`1)">
            <summary>
            Add an item to the start of the pipeline
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToStartOfPipeline(Nancy.PipelineItem{`0},System.Boolean)">
            <summary>
            Add an item to the start of the pipeline
            </summary>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToStartOfPipeline(Nancy.PipelineItem{`1},System.Boolean)">
            <summary>
            Add an item to the start of the pipeline
            </summary>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToEndOfPipeline(`0)">
            <summary>
            Add an item to the end of the pipeline
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToEndOfPipeline(`1)">
            <summary>
            Add an item to the end of the pipeline
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToEndOfPipeline(Nancy.PipelineItem{`0},System.Boolean)">
            <summary>
            Add an item to the end of the pipeline
            </summary>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToEndOfPipeline(Nancy.PipelineItem{`1},System.Boolean)">
            <summary>
            Add an item to the end of the pipeline
            </summary>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertItemAtPipelineIndex(System.Int32,`0)">
            <summary>
            Add an item to a specific place in the pipeline.
            </summary>
            <param name="index">Index to add at</param>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertItemAtPipelineIndex(System.Int32,`1)">
            <summary>
            Add an item to a specific place in the pipeline.
            </summary>
            <param name="index">Index to add at</param>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertItemAtPipelineIndex(System.Int32,Nancy.PipelineItem{`0},System.Boolean)">
            <summary>
            Add an item to a specific place in the pipeline.
            </summary>
            <param name="index">Index to add at</param>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertItemAtPipelineIndex(System.Int32,Nancy.PipelineItem{`1},System.Boolean)">
            <summary>
            Add an item to a specific place in the pipeline.
            </summary>
            <param name="index">Index to add at</param>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertBefore(System.String,`0)">
            <summary>
            Insert an item before a named item.
            If the named item does not exist the item is inserted at the start of the pipeline.
            </summary>
            <param name="name">Name of the item to insert before</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertBefore(System.String,`1)">
            <summary>
            Insert an item before a named item.
            If the named item does not exist the item is inserted at the start of the pipeline.
            </summary>
            <param name="name">Name of the item to insert before</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertBefore(System.String,Nancy.PipelineItem{`0})">
            <summary>
            Insert an item before a named item.
            If the named item does not exist the item is inserted at the start of the pipeline.
            </summary>
            <param name="name">Name of the item to insert before</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertBefore(System.String,Nancy.PipelineItem{`1})">
            <summary>
            Insert an item before a named item.
            If the named item does not exist the item is inserted at the start of the pipeline.
            </summary>
            <param name="name">Name of the item to insert before</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertAfter(System.String,`0)">
            <summary>
            Insert an item after a named item.
            If the named item does not exist the item is inserted at the end of the pipeline.
            </summary>
            <param name="name">Name of the item to insert after</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertAfter(System.String,`1)">
            <summary>
            Insert an item after a named item.
            If the named item does not exist the item is inserted at the end of the pipeline.
            </summary>
            <param name="name">Name of the item to insert after</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertAfter(System.String,Nancy.PipelineItem{`0})">
            <summary>
            Insert an item after a named item.
            If the named item does not exist the item is inserted at the end of the pipeline.
            </summary>
            <param name="name">Name of the item to insert after</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertAfter(System.String,Nancy.PipelineItem{`1})">
            <summary>
            Insert an item after a named item.
            If the named item does not exist the item is inserted at the end of the pipeline.
            </summary>
            <param name="name">Name of the item to insert after</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.RemoveByName(System.String)">
            <summary>
            Remove a named pipeline item
            </summary>
            <param name="name">Name</param>
            <returns>Index of item that was removed or -1 if nothing removed</returns>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.Wrap(Nancy.PipelineItem{`1})">
            <summary>
            Wraps a sync delegate into its async form
            </summary>
            <param name="syncDelegate">Sync pipeline instance</param>
            <returns>Async pipeline instance</returns>
        </member>
        <member name="T:Nancy.BeforePipeline">
            <summary>
            Intercepts the request before it is passed to the appropriate route handler.
            This gives you a couple of possibilities such as modifying parts of the request
            or even prematurely aborting the request by returning a response that will be sent back to the caller.
            </summary>
            <seealso cref="T:Nancy.AsyncNamedPipelineBase`2" />
        </member>
        <member name="M:Nancy.BeforePipeline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.BeforePipeline"/> class.
            </summary>
        </member>
        <member name="M:Nancy.BeforePipeline.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.BeforePipeline"/> class.
            </summary>
            <param name="capacity">Number of delegates in pipeline</param>
        </member>
        <member name="M:Nancy.BeforePipeline.op_Implicit(Nancy.BeforePipeline)~System.Func{Nancy.NancyContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{Nancy.Response}}">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.BeforePipeline"/> to <see cref="T:System.Func`3"/>.
            </summary>
            <param name="pipeline">The <see cref="T:Nancy.BeforePipeline"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.BeforePipeline.op_Implicit(System.Func{Nancy.NancyContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{Nancy.Response}})~Nancy.BeforePipeline">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Func`3"/> to <see cref="T:Nancy.BeforePipeline"/>.
            </summary>
            <param name="func">A <see cref="T:System.Func`3"/>.</param>
            <returns>
            A new <see cref="T:Nancy.BeforePipeline"/> instance with <paramref name="func"/>.
            </returns>
        </member>
        <member name="M:Nancy.BeforePipeline.op_Addition(Nancy.BeforePipeline,System.Func{Nancy.NancyContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{Nancy.Response}})">
            <summary>
            Appends a new function to the <see cref="T:Nancy.BeforePipeline"/>.
            </summary>
            <param name="pipeline">The <see cref="T:Nancy.BeforePipeline"/> instance.</param>
            <param name="func">A <see cref="T:System.Func`3"/></param>
            <returns>
            <paramref name="pipeline"/> with <paramref name="func"/> added
            </returns>
        </member>
        <member name="M:Nancy.BeforePipeline.op_Addition(Nancy.BeforePipeline,System.Func{Nancy.NancyContext,Nancy.Response})">
            <summary>
            Appends a new action to the <see cref="T:Nancy.BeforePipeline"/>.
            </summary>
            <param name="pipeline">The <see cref="T:Nancy.BeforePipeline"/> instance.</param>
            <param name="action">The <see cref="T:System.Action"/> for appending to the <see cref="T:Nancy.BeforePipeline"/> instance.</param>
            <returns>
            <paramref name="pipeline"/> with <paramref name="action"/> added
            </returns>
        </member>
        <member name="M:Nancy.BeforePipeline.op_Addition(Nancy.BeforePipeline,Nancy.BeforePipeline)">
            <summary>
            Appends the items of an <see cref="T:Nancy.BeforePipeline"/> to the other.
            </summary>
            <param name="pipelineToAddTo">The <see cref="T:Nancy.BeforePipeline"/> to add to.</param>
            <param name="pipelineToAdd">The <see cref="T:Nancy.BeforePipeline"/> to add.</param>
            <returns>
            <paramref name="pipelineToAddTo"/>
            </returns>
        </member>
        <member name="M:Nancy.BeforePipeline.Invoke(Nancy.NancyContext,System.Threading.CancellationToken)">
            <summary>
            Invokes the specified <see cref="T:Nancy.NancyContext"/>.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> instance.</param>
            <returns>
            A <see cref="T:Nancy.Response"/> instance or <see langword="null" />
            </returns>
        </member>
        <member name="M:Nancy.BeforePipeline.Wrap(Nancy.PipelineItem{System.Func{Nancy.NancyContext,Nancy.Response}})">
            <summary>
            Wraps the specified <see cref="T:Nancy.PipelineItem`1"/> into its async form.
            </summary>
            <param name="pipelineItem">The <see cref="T:Nancy.PipelineItem`1"/>.</param>
            <returns>Async <see cref="T:Nancy.PipelineItem`1"/> instance</returns>
        </member>
        <member name="T:Nancy.Bootstrapper.BootstrapperException">
            <summary>
            Exception that is raised from inside the <see cref="T:Nancy.Bootstrapper.NancyBootstrapperBase`1"/> type or one of
            the inheriting types.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.BootstrapperException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.BootstrapperException"/> class, with
            the provided <paramref name="message"/>.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.BootstrapperException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.BootstrapperException"/> class, with
            the provided <paramref name="message"/> and <paramref name="innerException"/>.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.BootstrapperException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Nancy.Bootstrapper.CollectionTypeRegistration">
            <summary>
            Represents a type to be registered multiple times into the
            container to later be resolved using an IEnumerable{RegistrationType}
            constructor dependency.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.CollectionTypeRegistration.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type},Nancy.Bootstrapper.Lifetime)">
            <summary>
            Represents a type to be registered multiple times into the
            container to later be resolved using an IEnumerable{RegistrationType}
            constructor dependency.
            </summary>
            <param name="registrationType">Registration type i.e. IMyInterface</param>
            <param name="implementationTypes">Collection of implementation type i.e. MyClassThatImplementsIMyInterface</param>
            <param name="lifetime">Lifetime to register the type as</param>
        </member>
        <member name="P:Nancy.Bootstrapper.CollectionTypeRegistration.ImplementationTypes">
            <summary>
            Collection of implementation type i.e. MyClassThatImplementsIMyInterface
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.ContainerRegistration">
            <summary>
            Base class for container registrations
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.ContainerRegistration.Lifetime">
            <summary>
            Gets the lifetime of the registration
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.ContainerRegistration.RegistrationType">
            <summary>
            Registration type i.e. IMyInterface
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.ContainerRegistration.ValidateTypeCompatibility(System.Type[])">
            <summary>
            Checks if all implementation types are assignable from the registration type, otherwise throws an exception.
            </summary>
            <param name="types">The implementation types.</param>
            <exception cref="T:System.ArgumentException">One or more of the implementation types is not assignable from the registration type.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Nancy.Bootstrapper.ContainerRegistration.RegistrationType"/> property must be assigned before the method is invoked.</exception>
        </member>
        <member name="T:Nancy.Bootstrapper.FavIconApplicationStartup">
            <summary>
            Application startup task that attempts to locate a favicon. The startup will first scan all
            folders in the path defined by the provided <see cref="T:Nancy.IRootPathProvider"/> and if it cannot
            find one, it will fall back and use the default favicon that is embedded in the Nancy.dll file.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.FavIconApplicationStartup.#ctor(Nancy.IRootPathProvider,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.FavIconApplicationStartup"/> class, with the
            provided <see cref="T:Nancy.IRootPathProvider"/> instance.
            </summary>
            <param name="rootPathProvider">The <see cref="T:Nancy.IRootPathProvider"/> that should be used to scan for a favicon.</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="P:Nancy.Bootstrapper.FavIconApplicationStartup.FavIcon">
            <summary>
            Gets the default favicon
            </summary>
            <value>A byte array, containing a favicon.ico file.</value>
        </member>
        <member name="M:Nancy.Bootstrapper.FavIconApplicationStartup.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Perform any initialisation tasks
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.Bootstrapper.IApplicationStartup">
            <summary>
            Provides a hook to execute code during application startup.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.IApplicationStartup.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Perform any initialisation tasks
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.Bootstrapper.INancyBootstrapper">
            <summary>
            Bootstrapper for the Nancy Engine
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.INancyBootstrapper.Initialise">
            <summary>
            Initialise the bootstrapper.
            </summary>
            <remarks>Must be called prior to <see cref="M:Nancy.Bootstrapper.INancyBootstrapper.GetEngine"/> and <see cref="M:Nancy.Bootstrapper.INancyBootstrapper.GetEnvironment"/>.</remarks>
        </member>
        <member name="M:Nancy.Bootstrapper.INancyBootstrapper.GetEngine">
            <summary>
            Gets the configured <see cref="T:Nancy.INancyEngine"/>.
            </summary>
            <returns>An configured <see cref="T:Nancy.INancyEngine"/> instance.</returns>
            <remarks>The boostrapper must be initialised (<see cref="M:Nancy.Bootstrapper.INancyBootstrapper.Initialise"/>) prior to calling this.</remarks>
        </member>
        <member name="M:Nancy.Bootstrapper.INancyBootstrapper.GetEnvironment">
            <summary>
            Get the <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.
            </summary>
            <returns>An configured <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</returns>
            <remarks>The boostrapper must be initialised (<see cref="M:Nancy.Bootstrapper.INancyBootstrapper.Initialise"/>) prior to calling this.</remarks>
        </member>
        <member name="T:Nancy.Bootstrapper.InstanceRegistration">
            <summary>
            Represents an instance to be registered into the container
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.InstanceRegistration.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.InstanceRegistration"/> class.
            </summary>
            <param name="registrationType">The registration type.</param>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="P:Nancy.Bootstrapper.InstanceRegistration.Implementation">
            <summary>
            Implementation object instance i.e. instance of MyClassThatImplementsIMyInterface
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.IPipelines">
            <summary>
            Defines the functionality of a Nancy pipeline.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.IPipelines.BeforeRequest">
            <summary>
            <para>
            The pre-request hook
            </para>
            <para>
            The PreRequest hook is called prior to processing a request. If a hook returns
            a non-null response then processing is aborted and the response provided is
            returned.
            </para>
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.IPipelines.AfterRequest">
            <summary>
            <para>
            The post-request hook
            </para>
            <para>
            The post-request hook is called after the response is created. It can be used
            to rewrite the response or add/remove items from the context.
            </para>
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.IPipelines.OnError">
            <summary>
            <para>
            The error hook
            </para>
            <para>
            The error hook is called if an exception is thrown at any time during the pipeline.
            If no error hook exists a standard InternalServerError response is returned
            </para>
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.IRegistrations">
            <summary>
            Provides a hook to perform registrations during application startup.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.IRegistrations.TypeRegistrations">
            <summary>
            Gets the type registrations to register for this startup task
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.IRegistrations.CollectionTypeRegistrations">
            <summary>
            Gets the collection registrations to register for this startup task
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.IRegistrations.InstanceRegistrations">
            <summary>
            Gets the instance registrations to register for this startup task
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.IRequestStartup">
            <summary>
            Provides a hook to execute code during request startup.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.IRequestStartup.Initialize(Nancy.Bootstrapper.IPipelines,Nancy.NancyContext)">
            <summary>
            Perform any initialisation tasks
            </summary>
            <param name="pipelines">Application pipelines</param>
            <param name="context">The current context</param>
        </member>
        <member name="T:Nancy.Bootstrapper.Lifetime">
            <summary>
            Represents the lifetime of a container registration
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.Lifetime.Transient">
            <summary>
            Transient lifetime - each request to the container for
            the type will result in a new version being returned.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.Lifetime.Singleton">
            <summary>
            Singleton - each request to the container for the type
            will result in the same instance being returned.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.Lifetime.PerRequest">
            <summary>
            PerRequest - within the context of each request each request
            for the type will result in the same instance being returned.
            Different requests will have different versions.
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.ModuleRegistration">
            <summary>
            Holds module type for registration into a container.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.ModuleRegistration.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.ModuleRegistration"/> class, with
            the provided <paramref name= "moduleType" />
            </summary>
            <param name="moduleType">Type of the module.</param>
        </member>
        <member name="P:Nancy.Bootstrapper.ModuleRegistration.ModuleType">
            <summary>
            Gets the type of the module.
            </summary>
            <value> The type of the module.</value>
        </member>
        <member name="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException">
            <summary>
            Exception raised when the <see cref="T:Nancy.Bootstrapper.NancyBootstrapperBase`1"/> discovers more than one
            <see cref="T:Nancy.IRootPathProvider"/> implementation in the loaded assemblies.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException"/> class, with
            the provided <paramref name= "message" />
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException"/> class, with
            the provided <paramref name= "message" /> and  <paramref name= "innerException" />
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException"/> class, with
            the provided <paramref name= "providerTypes" />
            </summary>
            <param name="providerTypes">The provider types.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.ProviderTypes">
            <summary>
            Gets the provider types.
            </summary>
            <value> The provider types.</value>
        </member>
        <member name="M:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.StoreProviderTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Stores the provider types.
            </summary>
            <param name="providerTypes">The provider types.</param>
        </member>
        <member name="P:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.Message">
            <summary>
            Returns a more friendly and informative message if the list of providers is available.
            </summary>
            <remarks>
            Message generated will be of the format:
            <example>
            More than one IRootPathProvider was found:
               Nancy.Tests.Functional.Tests.CustomRootPathProvider2
               Nancy.Tests.Functional.Tests.CustomRootPathProvider
            and since we do not know which one you want to use, you need to override the RootPathProvider property on your bootstrapper and specify which one to use. Sorry for the inconvenience.
            </example>
            </remarks>
        </member>
        <member name="T:Nancy.Bootstrapper.NancyBootstrapperBase`1">
            <summary>
            Nancy bootstrapper base class
            </summary>
            <typeparam name="TContainer">IoC container type</typeparam>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperBase`1.initialised">
            <summary>
            Stores whether the bootstrapper has been initialised
            prior to calling GetEngine.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperBase`1.disposing">
            <summary>
            Stores whether the bootstrapper is in the process of
            being disposed.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperBase`1.rootPathProvider">
            <summary>
            Stores the <see cref="T:Nancy.IRootPathProvider"/> used by Nancy
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperBase`1.conventions">
            <summary>
            Default Nancy conventions
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperBase`1.internalConfigurationFactory">
            <summary>
            Internal configuration
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.ApplicationPipelines">
            <summary>
            Application pipelines.
            Pipelines are "cloned" per request so they can be modified
            at the request level.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperBase`1.modules">
            <summary>
            Nancy modules - built on startup from the app domain scanner
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.RequestStartupTaskTypeCache">
            <summary>
            Cache of request startup task types
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.NancyBootstrapperBase`1"/> class.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.ApplicationContainer">
            <summary>
            Gets the Container instance - automatically set during initialise.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.AssemblyCatalog">
            <summary>
            Gets the <see cref="T:Nancy.IAssemblyCatalog"/> that should be used by the application.
            </summary>
            <value>An <see cref="T:Nancy.IAssemblyCatalog"/> instance.</value>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.TypeCatalog">
            <summary>
            Gets the <see cref="T:Nancy.ITypeCatalog"/> that should be used by the application.
            </summary>
            <value>An <see cref="T:Nancy.ITypeCatalog"/> instance.</value>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.InternalConfiguration">
            <summary>
            Nancy internal configuration
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.Conventions">
            <summary>
            Nancy conventions
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.Modules">
            <summary>
            Gets all available module types
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.ViewEngines">
            <summary>
            Gets the available view engine types
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.ModelBinders">
            <summary>
            Gets the available custom model binders
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.TypeConverters">
            <summary>
            Gets the available custom type converters
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.BodyDeserializers">
            <summary>
            Gets the available custom body deserializers
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.ApplicationStartupTasks">
            <summary>
            Gets all application startup tasks
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.RequestStartupTasks">
            <summary>
            Gets all request startup tasks
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegistrationTasks">
            <summary>
            Gets all registration tasks
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.RootPathProvider">
            <summary>
            Gets the root path provider
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.ModelValidatorFactories">
            <summary>
            Gets the validator factories.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.FavIcon">
            <summary>
            Gets the default favicon
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.CryptographyConfiguration">
            <summary>
            Gets the cryptography configuration
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.Initialise">
            <summary>
            Initialise the bootstrapper. Must be called prior to GetEngine.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.Configure(Nancy.Configuration.INancyEnvironment)">
            <summary>
            Configures the Nancy environment
            </summary>
            <param name="environment">The <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance to configure</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetEnvironmentConfigurator">
            <summary>
            Gets the <see cref="T:Nancy.Configuration.INancyEnvironmentConfigurator"/> used by th.
            </summary>
            <returns>An <see cref="T:Nancy.Configuration.INancyEnvironmentConfigurator"/> instance.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetDiagnostics">
            <summary>
            Gets the diagnostics for initialisation
            </summary>
            <returns>IDiagnostics implementation</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetApplicationStartupTasks">
            <summary>
            Gets all registered application startup tasks
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IApplicationStartup"/> instances.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterAndGetRequestStartupTasks(`0,System.Type[])">
            <summary>
            Registers and resolves all request startup tasks
            </summary>
            <param name="container">Container to use</param>
            <param name="requestStartupTypes">Types to register</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IRequestStartup"/> instances.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetRegistrationTasks">
            <summary>
            Gets all registered application registration tasks
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IRegistrations"/> instances.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetAllModules(Nancy.NancyContext)">
            <summary>
            Get all NancyModule implementation instances
            </summary>
            <param name="context">The current context</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.INancyModule"/> instances.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetModule(System.Type,Nancy.NancyContext)">
            <summary>
            Retrieves a specific <see cref="T:Nancy.INancyModule"/> implementation - should be per-request lifetime
            </summary>
            <param name="moduleType">Module type</param>
            <param name="context">The current context</param>
            <returns>The <see cref="T:Nancy.INancyModule"/> instance</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetEngine">
            <summary>
            Gets the configured INancyEngine
            </summary>
            <returns>Configured INancyEngine</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetEnvironment">
            <summary>
            Get the <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.
            </summary>
            <returns>An configured <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</returns>
            <remarks>The boostrapper must be initialised (<see cref="M:Nancy.Bootstrapper.INancyBootstrapper.Initialise"/>) prior to calling this.</remarks>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.Equals(System.Object)">
            <summary>
            Hides Equals from the overrides list
            </summary>
            <param name="obj">Object to compare</param>
            <returns>Boolean indicating equality</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetHashCode">
            <summary>
            Hides GetHashCode from the overrides list
            </summary>
            <returns>Hash code integer</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.InitializeRequestPipelines(Nancy.NancyContext)">
            <summary>
            Creates and initializes the request pipelines.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> used by the request.</param>
            <returns>An <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.ToString">
            <summary>
            Hides ToString from the overrides list
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.ApplicationStartup(`0,Nancy.Bootstrapper.IPipelines)">
            <summary>
            Initialise the bootstrapper - can be used for adding pre/post hooks and
            any other initialisation tasks that aren't specifically container setup
            related
            </summary>
            <param name="container">Container instance for resolving types if required.</param>
            <param name="pipelines">Pipelines instance to be customized if required</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RequestStartup(`0,Nancy.Bootstrapper.IPipelines,Nancy.NancyContext)">
            <summary>
            Initialise the request - can be used for adding pre/post hooks and
            any other per-request initialisation tasks that aren't specifically container setup
            related
            </summary>
            <param name="container">Container</param>
            <param name="pipelines">Current pipelines</param>
            <param name="context">Current context</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.ConfigureApplicationContainer(`0)">
            <summary>
            Configure the application level container with any additional registrations.
            </summary>
            <param name="existingContainer">Container instance</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.ConfigureConventions(Nancy.Conventions.NancyConventions)">
            <summary>
            Overrides/configures Nancy's conventions
            </summary>
            <param name="nancyConventions">Convention object instance</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetEngineInternal">
            <summary>
            Resolve INancyEngine
            </summary>
            <returns>INancyEngine implementation</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetApplicationContainer">
            <summary>
            Gets the application level container
            </summary>
            <returns>Container instance</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterNancyEnvironment(`0,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Registers an <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance in the container.
            </summary>
            <param name="container">The container to register into.</param>
            <param name="environment">The <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance to register.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterBootstrapperTypes(`0)">
            <summary>
            Register the bootstrapper's implemented types into the container.
            This is necessary so a user can pass in a populated container but not have
            to take the responsibility of registering things like INancyModuleCatalog manually.
            </summary>
            <param name="applicationContainer">Application container to register into</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterTypes(`0,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.TypeRegistration})">
            <summary>
            Register the default implementations of internally used types into the container as singletons
            </summary>
            <param name="container">Container to register into</param>
            <param name="typeRegistrations">Type registrations to register</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterCollectionTypes(`0,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.CollectionTypeRegistration})">
            <summary>
            Register the various collections into the container as singletons to later be resolved
            by IEnumerable{Type} constructor dependencies.
            </summary>
            <param name="container">Container to register into</param>
            <param name="collectionTypeRegistrationsn">Collection type registrations to register</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterModules(`0,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.ModuleRegistration})">
            <summary>
            Register the given module types into the container
            </summary>
            <param name="container">Container to register into</param>
            <param name="moduleRegistrationTypes">NancyModule types</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterInstances(`0,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.InstanceRegistration})">
            <summary>
            Register the given instances into the container
            </summary>
            <param name="container">Container to register into</param>
            <param name="instanceRegistrations">Instance registration types</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetAdditionalInstances">
            <summary>
            Gets any additional instance registrations that need to
            be registered into the container
            </summary>
            <returns>Collection of InstanceRegistration types</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetApplicationCollections">
            <summary>
            Creates a list of types for the collection types that are
            required to be registered in the application scope.
            </summary>
            <returns>Collection of CollectionTypeRegistration types</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterRegistrationTasks(System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.IRegistrations})">
            <summary>
            Takes the registration tasks and calls the relevant methods to register them
            </summary>
            <param name="registrationTasks">Registration tasks</param>
        </member>
        <member name="T:Nancy.Bootstrapper.NancyBootstrapperLocator">
             <summary>
             Class for locating an INancyBootstrapper implementation.
            
             Will search the app domain for a non-abstract one, and if it can't find one
             it will use the default nancy one that uses TinyIoC.
             </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperLocator.Bootstrapper">
            <summary>
            Gets the located bootstrapper
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1">
            <summary>
            Nancy bootstrapper base with per-request container support.
            Stores/retrieves the child container in the context to ensure that
            only one child container is stored per request, and that the child
            container will be disposed at the end of the request.
            </summary>
            <typeparam name="TContainer">IoC container type</typeparam>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1"/> class.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.contextKey">
            <summary>
            Context key for storing the child container in the context
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.moduleRegistrationTypeCache">
            <summary>
            Stores the module registrations to be registered into the request container
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.RequestScopedTypes">
            <summary>
            Stores the per-request type registrations
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.RequestScopedCollectionTypes">
            <summary>
            Stores the per-request collection registrations
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.ContextKey">
            <summary>
            Gets the context key for storing the child container in the context
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.GetAllModules(Nancy.NancyContext)">
            <summary>
            Get all <see cref="T:Nancy.INancyModule"/> implementation instances
            </summary>
            <param name="context">The current context</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.INancyModule"/> instances.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.GetModule(System.Type,Nancy.NancyContext)">
            <summary>
            Retrieves a specific <see cref="T:Nancy.INancyModule"/> implementation - should be per-request lifetime
            </summary>
            <param name="moduleType">Module type</param>
            <param name="context">The current context</param>
            <returns>The <see cref="T:Nancy.INancyModule"/> instance</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.InitializeRequestPipelines(Nancy.NancyContext)">
            <summary>
            Creates and initializes the request pipelines.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> used by the request.</param>
            <returns>An <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.RegisterRegistrationTasks(System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.IRegistrations})">
            <summary>
            Takes the registration tasks and calls the relevant methods to register them
            </summary>
            <param name="registrationTasks">Registration tasks</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.GetConfiguredRequestContainer(Nancy.NancyContext)">
            <summary>
            Gets the per-request container
            </summary>
            <param name="context">Current context</param>
            <returns>Request container instance</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.ConfigureRequestContainer(`0,Nancy.NancyContext)">
            <summary>
            Configure the request container
            </summary>
            <param name="container">Request container instance</param>
            <param name="context"></param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.RegisterModules(`0,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.ModuleRegistration})">
            <summary>
            Register the given module types into the container
            </summary>
            <param name="container">Container to register into</param>
            <param name="moduleRegistrationTypes">NancyModule types</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.CreateRequestContainer(Nancy.NancyContext)">
            <summary>
            Creates a per request child/nested container
            </summary>
            <param name="context">Current context</param>
            <returns>Request container instance</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.RegisterRequestContainerModules(`0,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.ModuleRegistration})">
            <summary>
            Register the given module types into the request container
            </summary>
            <param name="container">Container to register into</param>
            <param name="moduleRegistrationTypes">NancyModule types</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.GetAllModules(`0)">
            <summary>
            Retrieve all module instances from the container
            </summary>
            <param name="container">Container to use</param>
            <returns>Collection of NancyModule instances</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.GetModule(`0,System.Type)">
            <summary>
            Retrieve a specific module instance from the container
            </summary>
            <param name="container">Container to use</param> 
            <param name="moduleType">Type of the module</param>
            <returns>NancyModule instance</returns>
        </member>
        <member name="T:Nancy.Bootstrapper.NancyInternalConfiguration">
            <summary>
            Configuration class for Nancy's internals.
            Contains implementation types/configuration for Nancy that usually
            do not require overriding in "general use".
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.Default">
            <summary>
            Gets the Nancy default configuration
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RuntimeEnvironmentInformation">
            <summary>
            Gets or sets the runtime environment information
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.SerializerFactory">
            <summary>
            Gets or sets the serializer factory.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.DefaultConfigurationProviders">
            <summary>
            Gets or sets the default configuration providers
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.EnvironmentConfigurator">
            <summary>
            Gets or sets the environment configurator
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.EnvironmentFactory">
             <summary>
            Gets or sets the environment factory
             </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RouteMetadataProviders">
            <summary>
            Gets or sets the route metadata providers
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RouteResolver">
            <summary>
            Gets or sets the route resolver
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ContextFactory">
            <summary>
            Gets or sets the context factory
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.NancyEngine">
            <summary>
            Gets or sets the nancy engine
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RouteCache">
            <summary>
            Gets or sets the route cache
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RouteCacheProvider">
            <summary>
            Gets or sets the route cache provider
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ViewLocator">
            <summary>
            Gets or sets the view locator
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ViewFactory">
            <summary>
            Gets or sets the view factory
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.NancyModuleBuilder">
            <summary>
            Gets or sets the nancy module builder
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ResponseFormatterFactory">
            <summary>
            Gets or sets the response formatter factory
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ModelBinderLocator">
            <summary>
            Gets or sets themodel binder locator
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.Binder">
            <summary>
            Gets or sets the binder
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.BindingDefaults">
            <summary>
            Gets or sets the binding defaults
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.FieldNameConverter">
            <summary>
            Gets or sets the field name converter
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ModelValidatorLocator">
            <summary>
            Gets or sets the model validator locator
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ViewResolver">
             <summary>
            Gets or sets the view resolver
             </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ViewCache">
            <summary>
            Gets or sets the view cache
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RenderContextFactory">
            <summary>
            Gets or sets the render context factory
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ViewLocationProvider">
            <summary>
            Gets or sets the view location provider
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.StatusCodeHandlers">
            <summary>
            Gets or sets the status code handlers
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.CsrfTokenValidator">
            <summary>
            Gets or sets the CSRF token validator
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ObjectSerializer">
            <summary>
            Gets or sets the object serializer
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.Serializers">
            <summary>
            Gets or sets the types for serializers
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.InteractiveDiagnosticProviders">
            <summary>
            Gets or sets the interactive diagnostic providers
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RequestTracing">
            <summary>
            Gets or sets the request tracing
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RouteInvoker">
            <summary>
            Gets or sets the route invoker
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ResponseProcessors">
            <summary>
            Gets or sets the response processors
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RequestDispatcher">
            <summary>
            Gets or sets the request dispatcher
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.Diagnostics">
            <summary>
            Gets or sets the diagnostics
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RouteSegmentExtractor">
            <summary>
            Gets or sets the route segment extractor
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RouteDescriptionProvider">
            <summary>
            Gets or sets the route description provider
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.CultureService">
            <summary>
            Gets or sets the culture service
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.TextResource">
            <summary>
            Gets or sets the text resource
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ResourceAssemblyProvider">
            <summary>
            Gets or sets the resource assembly provider
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ResourceReader">
            <summary>
            Gets or sets the resource reader
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.StaticContentProvider">
            <summary>
            Gets or sets the static content provider
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RouteResolverTrie">
            <summary>
            Gets or sets the route resolver trie
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.TrieNodeFactory">
            <summary>
            Gets or sets the trie node factory
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RouteSegmentConstraints">
            <summary>
            Gets or sets the route segment constraints
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.RequestTraceFactory">
            <summary>
            Gets or sets the request trace factory
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.ResponseNegotiator">
            <summary>
            Gets or sets the response negotiator
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.IsValid">
            <summary>
            Gets a value indicating whether the configuration is valid.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyInternalConfiguration.WithOverrides(System.Action{Nancy.Bootstrapper.NancyInternalConfiguration})">
            <summary>
            Creates a new nancy internal configuration initializer with overrides for default types.
            </summary>
            <param name="builder">Action that overrides default configuration types</param>
            <returns>Initializer with overriden default types</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyInternalConfiguration.GetTypeRegistrations">
            <summary>
            Returns the configuration types as a TypeRegistration collection
            </summary>
            <returns>TypeRegistration collection representing the configuration types</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyInternalConfiguration.GetCollectionTypeRegistrations">
            <summary>
            Returns the collection configuration types as a CollectionTypeRegistration collection
            </summary>
            <returns>CollectionTypeRegistration collection representing the configuration types</returns>
        </member>
        <member name="T:Nancy.Bootstrapper.Pipelines">
            <summary>
            Default implementation of the Nancy pipelines
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.Pipelines.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.Pipelines"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.Pipelines.#ctor(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.Pipelines"/> class and clones the hooks from
            the provided <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.Pipelines.BeforeRequest">
            <summary>
            <para>
            The pre-request hook
            </para>
            <para>
            The PreRequest hook is called prior to processing a request. If a hook returns
            a non-null response then processing is aborted and the response provided is
            returned.
            </para>
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.Pipelines.AfterRequest">
            <summary>
            <para>
            The post-request hook
            </para>
            <para>
            The post-request hook is called after the response is created. It can be used
            to rewrite the response or add/remove items from the context.
            </para>
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.Pipelines.OnError">
            <summary>
            <para>
            The error hook
            </para>
            <para>
            The error hook is called if an exception is thrown at any time during the pipeline.
            If no error hook exists a standard InternalServerError response is returned
            </para>
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.Registrations">
            <summary>
            Helper class for providing application registrations
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.#ctor(Nancy.ITypeCatalog)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.Registrations"/> class.
            </summary>
            <param name="typeCatalog">An <see cref="T:Nancy.ITypeCatalog"/> instance.</param>
        </member>
        <member name="P:Nancy.Bootstrapper.Registrations.CollectionTypeRegistrations">
            <summary>
            Gets the collection registrations to register for this startup task
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.Registrations.InstanceRegistrations">
            <summary>
            Gets the instance registrations to register for this startup task
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.Registrations.TypeRegistrations">
            <summary>
            Gets the type registrations to register for this startup task
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.Register``1(Nancy.Bootstrapper.Lifetime)">
            <summary>
            Scans for the implementation of <typeparamref name="TRegistration"/> and registers it.
            </summary>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to scan for and register as.</typeparam>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.RegisterAll``1(Nancy.Bootstrapper.Lifetime)">
            <summary>
            Scans for all implementations of <typeparamref name="TRegistration"/> and registers them.
            </summary>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to scan for and register as.</typeparam>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.Register``1(System.Collections.Generic.IEnumerable{System.Type},Nancy.Bootstrapper.Lifetime)">
            <summary>
            Registers the types provided by the <paramref name="defaultImplementations"/> parameters
            as <typeparamref name="TRegistration"/>.
            </summary>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="defaultImplementations">The types to register.</param>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.Register``1(System.Type,Nancy.Bootstrapper.Lifetime)">
            <summary>
            Registers the type provided by the <paramref name="implementation"/> parameter
            as <typeparamref name="TRegistration"/>.
            </summary>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="implementation">The <see cref="T:System.Type"/> to register as <typeparamref name="TRegistration"/>.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.Register``1(``0)">
            <summary>
            Registers an instance as <typeparamref name="TRegistration"/>.
            </summary>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="instance">The instance to register.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.RegisterWithDefault``1(System.Type,Nancy.Bootstrapper.Lifetime)">
            <summary>
            Scans for a <see cref="T:System.Type"/> that implements <typeparamref name="TRegistration"/>. If found, then it
            will be used for the registration, else it will use <paramref name="defaultImplementation"/>.
            </summary>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="defaultImplementation">The implementation of <typeparamref name="TRegistration"/> that will be use if no other implementation can be found.</param>
            <remarks>
            When scanning, it will exclude the assembly that the <see cref="T:Nancy.Bootstrapper.Registrations"/> instance is defined in and it will also ignore
            the type specified by <paramref name="defaultImplementation"/>.
            </remarks>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.RegisterWithDefault``1(System.Func{``0})">
            <summary>
            Scans for an implementation of <typeparamref name="TRegistration"/> and registers it if found. If no implementation could
            be found, it will retrieve an instance of <typeparamref name="TRegistration"/> using the provided <paramref name="defaultImplementationFactory"/>,
            which will be used in the registration.
            </summary>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="defaultImplementationFactory">Factory that provides an instance of <typeparamref name="TRegistration"/>.</param>
            <remarks>When scanning, it will exclude the assembly that the <see cref="T:Nancy.Bootstrapper.Registrations"/> instance is defined in</remarks>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.RegisterWithDefault``1(System.Collections.Generic.IEnumerable{System.Type},Nancy.Bootstrapper.Lifetime)">
            <summary>
            Scans for all implementations of <typeparamref name="TRegistration"/>. If no implementations could be found, then it
            will register the types specified by <paramref name="defaultImplementations"/>.
            </summary>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="defaultImplementations">The types to register if non could be located while scanning.</param>
            <remarks>
            When scanning, it will exclude the assembly that the <see cref="T:Nancy.Bootstrapper.Registrations"/> instance is defined in and it will also ignore
            the types specified by <paramref name="defaultImplementations"/>.
            </remarks>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.RegisterWithUserThenDefault``1(System.Collections.Generic.IEnumerable{System.Type},Nancy.Bootstrapper.Lifetime)">
            <summary>
            Scans for all implementations of <typeparamref name="TRegistration"/> and registers them, followed by the
            types defined by the <paramref name="defaultImplementations"/> parameter.
            </summary>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="defaultImplementations">The types to register last.</param>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
            <remarks>
            When scanning, it will exclude the assembly that the <see cref="T:Nancy.Bootstrapper.Registrations"/> instance is defined in and it will also ignore
            the types specified by <paramref name="defaultImplementations"/>.
            </remarks>
        </member>
        <member name="T:Nancy.Bootstrapper.TypeRegistration">
            <summary>
            Represents a type to be registered into the container
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.TypeRegistration.#ctor(System.Type,System.Type,Nancy.Bootstrapper.Lifetime)">
            <summary>
            Represents a type to be registered into the container
            </summary>
            <param name="registrationType">Registration type i.e. IMyInterface</param>
            <param name="implementationType">Implementation type i.e. MyClassThatImplementsIMyInterface</param>
            <param name="lifetime">Lifetime to register the type as</param>
        </member>
        <member name="P:Nancy.Bootstrapper.TypeRegistration.ImplementationType">
            <summary>
            Implementation type i.e. MyClassThatImplementsIMyInterface
            </summary>
        </member>
        <member name="T:Nancy.ConfigurationException">
            <summary>
            An exception related to an invalid configuration created within <see cref="T:Nancy.Configuration.INancyEnvironment"/>
            </summary>
        </member>
        <member name="M:Nancy.ConfigurationException.#ctor(System.String)">
            <summary>
            Create an instance of <see cref="T:Nancy.ConfigurationException"/>
            </summary>
            <param name="message">A message to be passed into the exception</param>
        </member>
        <member name="M:Nancy.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Create an instance of <see cref="T:Nancy.ConfigurationException"/>
            </summary>
            <param name="message">A message to be passed into the exception</param>
            <param name = "exception">An inner exception to buble up</param>
        </member>
        <member name="T:Nancy.Configuration.DefaultNancyEnvironment">
            <summary>
            Default implementation of the <see cref="T:Nancy.Configuration.INancyEnvironment"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.Configuration.DefaultNancyEnvironment.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the environment.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator"/> that can be used to iterate through the environment.</returns>
        </member>
        <member name="M:Nancy.Configuration.DefaultNancyEnvironment.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the environment.
            </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the environment.</returns>
        </member>
        <member name="P:Nancy.Configuration.DefaultNancyEnvironment.Count">
            <summary>
            Gets the number of elements in the environment.
            </summary>
            <returns>The number of elements in the environment.</returns>
        </member>
        <member name="M:Nancy.Configuration.DefaultNancyEnvironment.ContainsKey(System.String)">
            <summary>
            Determines whether the environment contains an element that has the specified key.
            </summary>
            <returns><see langword="true"/> if the environment contains an element that has the specified key; otherwise, <see langword="false"/>.
            </returns>
            <param name="key">The key to retrieve.</param>
        </member>
        <member name="M:Nancy.Configuration.DefaultNancyEnvironment.System#Collections#Generic#IReadOnlyDictionary{System#String,System#Object}#TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value that is associated with the specified key.
            </summary>
            <returns><see langword="true"/> if the environment contains an element that has the specified key; otherwise, <see langword="false"/>.</returns>
            <param name="key">The key to locate.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
        </member>
        <member name="P:Nancy.Configuration.DefaultNancyEnvironment.System#Collections#Generic#IReadOnlyDictionary{System#String,System#Object}#Item(System.String)">
            <summary>
            Gets the element that has the specified key in the environment.
            </summary>
            <returns>The element that has the specified key in the environment.</returns>
            <param name="key">The key to locate.</param>
        </member>
        <member name="P:Nancy.Configuration.DefaultNancyEnvironment.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the environment.
            </summary>
            <returns>An enumerable collection that contains the keys in the environment.</returns>
        </member>
        <member name="P:Nancy.Configuration.DefaultNancyEnvironment.Values">
            <summary>
            Gets an enumerable collection that contains the values in the environment.
            </summary>
            <returns>An enumerable collection that contains the values in the environment.</returns>
        </member>
        <member name="M:Nancy.Configuration.DefaultNancyEnvironment.AddValue``1(System.String,``0)">
            <summary>
            Adds a <paramref name="value"/>, using a provided <paramref name="key"/>, to the environment.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value to add.</typeparam>
            <param name="key">The key to store the value as.</param>
            <param name="value">The value to store in the environment.</param>
        </member>
        <member name="M:Nancy.Configuration.DefaultNancyEnvironment.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the value that is associated with the specified key.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value to retrieve.</typeparam>
            <param name="key">The key to get the value for.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><see langword="true" /> if the value could be retrieved, otherwise <see langword="false" />.</returns>
        </member>
        <member name="T:Nancy.Configuration.DefaultNancyEnvironmentConfigurator">
            <summary>
            Default implementation of the <see cref="T:Nancy.Configuration.INancyEnvironmentConfigurator"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.Configuration.DefaultNancyEnvironmentConfigurator.#ctor(Nancy.Configuration.INancyEnvironmentFactory,System.Collections.Generic.IEnumerable{Nancy.Configuration.INancyDefaultConfigurationProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Configuration.DefaultNancyEnvironmentConfigurator"/> class.
            </summary>
            <param name="factory">The <see cref="T:Nancy.Configuration.INancyEnvironmentFactory"/> instance to use when configuring an environment.</param>
            <param name="defaultConfigurationProviders"><see cref="T:Nancy.Configuration.INancyDefaultConfigurationProvider"/> instances that should be used during the configuration of the environment.</param>
        </member>
        <member name="M:Nancy.Configuration.DefaultNancyEnvironmentConfigurator.ConfigureEnvironment(System.Action{Nancy.Configuration.INancyEnvironment})">
            <summary>
            Configures an <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.
            </summary>
            <param name="configuration">The configuration to apply to the environment.</param>
            <returns>An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</returns>
        </member>
        <member name="T:Nancy.Configuration.DefaultNancyEnvironmentFactory">
            <summary>
            Default implementation of the <see cref="T:Nancy.Configuration.INancyEnvironmentFactory"/> interface.
            </summary>
            <remarks>Creates instances of the <see cref="T:Nancy.Configuration.DefaultNancyEnvironment"/> type.</remarks>
        </member>
        <member name="M:Nancy.Configuration.DefaultNancyEnvironmentFactory.CreateEnvironment">
            <summary>
            Creates a new <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.
            </summary>
            <returns>A <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</returns>
        </member>
        <member name="T:Nancy.Configuration.INancyDefaultConfigurationProvider">
            <summary>
            Defines the functionality for providing default configuration values to the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
        </member>
        <member name="M:Nancy.Configuration.INancyDefaultConfigurationProvider.GetDefaultConfiguration">
            <summary>
            Gets the default configuration instance to register in the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <returns>The configuration instance</returns>
        </member>
        <member name="P:Nancy.Configuration.INancyDefaultConfigurationProvider.Key">
            <summary>
            Gets the key that will be used to store the configuration object in the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the key.</returns>
        </member>
        <member name="T:Nancy.Configuration.INancyEnvironment">
            <summary>
            Defines the functionality of a Nancy environment.
            </summary>
        </member>
        <member name="M:Nancy.Configuration.INancyEnvironment.AddValue``1(System.String,``0)">
            <summary>
            Adds a <paramref name="value"/>, using a provided <paramref name="key"/>, to the environment.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value to add.</typeparam>
            <param name="key">The key to store the value as.</param>
            <param name="value">The value to store in the environment.</param>
        </member>
        <member name="M:Nancy.Configuration.INancyEnvironment.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the value that is associated with the specified key.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value to retrieve.</typeparam>
            <param name="key">The key to get the value for.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><see langword="true" /> if the value could be retrieved, otherwise <see langword="false" />.</returns>
        </member>
        <member name="T:Nancy.Configuration.INancyEnvironmentConfigurator">
            <summary>
            Defines the functionality for applying configuration to an <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.
            </summary>
        </member>
        <member name="M:Nancy.Configuration.INancyEnvironmentConfigurator.ConfigureEnvironment(System.Action{Nancy.Configuration.INancyEnvironment})">
            <summary>
            Configures an <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.
            </summary>
            <param name="configuration">The configuration to apply to the environment.</param>
            <returns>An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</returns>
        </member>
        <member name="T:Nancy.Configuration.INancyEnvironmentExtensions">
            <summary>
            Contains extensions for the <see cref="T:Nancy.Configuration.INancyEnvironment"/> type.
            </summary>
        </member>
        <member name="M:Nancy.Configuration.INancyEnvironmentExtensions.AddValue``1(Nancy.Configuration.INancyEnvironment,``0)">
            <summary>
            Adds a value to the environment, using the full name of the type defined by <typeparamref name="T"/> as the key.
            </summary>
            <param name="environment">The <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
            <param name="value">The value to store in the environment.</param>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value to store in the environment.</typeparam>
        </member>
        <member name="M:Nancy.Configuration.INancyEnvironmentExtensions.GetValue``1(Nancy.Configuration.INancyEnvironment)">
            <summary>
            Gets a value from the environment, using the full name of the type defined by <typeparamref name="T"/> as the key.
            </summary>
            <param name="environment">The <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value to retreive from the environment.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Nancy.Configuration.INancyEnvironmentExtensions.GetValue``1(Nancy.Configuration.INancyEnvironment,System.String)">
            <summary>
            Gets a value from the environment, using the provided <paramref name="key"/>.
            </summary>
            <param name="environment">The <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
            <param name="key">The key to retrieve the value for.</param>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value to retreive from the environment.</typeparam>
            <returns>The stored value.</returns>
        </member>
        <member name="M:Nancy.Configuration.INancyEnvironmentExtensions.GetValueWithDefault``1(Nancy.Configuration.INancyEnvironment,``0)">
            <summary>
            Gets a value from the environment, using the full name of the type defined by <typeparamref name="T"/> as the key. If
            the value could not be found, then a provided default value is returned.
            </summary>
            <param name="environment">The <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
            <param name="defaultValue">The value to return if no stored value could be found.</param>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value to retreive from the environment.</typeparam>
            <returns>The stored value.</returns>
        </member>
        <member name="M:Nancy.Configuration.INancyEnvironmentExtensions.GetValueWithDefault``1(Nancy.Configuration.INancyEnvironment,System.String,``0)">
            <summary>
            Gets a value from the environment, using the provided <paramref name="key"/>. If the value could not be found, then
            a provided default value is returned.
            </summary>
            <param name="environment">The <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
            <param name="key">The key to retrieve the value for.</param>
            <param name="defaultValue">The value to return if no stored value could be found.</param>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value to retreive from the environment.</typeparam>
            <returns>The stored value.</returns>
        </member>
        <member name="T:Nancy.Configuration.INancyEnvironmentFactory">
            <summary>
            Defines the functionality for creating a <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.
            </summary>
        </member>
        <member name="M:Nancy.Configuration.INancyEnvironmentFactory.CreateEnvironment">
            <summary>
            Creates a new <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.
            </summary>
            <returns>A <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</returns>
        </member>
        <member name="T:Nancy.Configuration.NancyDefaultConfigurationProvider`1">
            <summary>
            Default (abstract) implementation of <see cref="T:Nancy.Configuration.INancyDefaultConfigurationProvider" /> interface.
            </summary>
            <typeparam name="T">The type of the configuration object.</typeparam>
        </member>
        <member name="M:Nancy.Configuration.NancyDefaultConfigurationProvider`1.GetDefaultConfiguration">
            <summary>
            Gets the default configuration instance to register in the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <returns>The configuration instance</returns>
        </member>
        <member name="M:Nancy.Configuration.NancyDefaultConfigurationProvider`1.Nancy#Configuration#INancyDefaultConfigurationProvider#GetDefaultConfiguration">
            <summary>
            Gets the default configuration instance to register in the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <returns>The configuration instance</returns>
        </member>
        <member name="P:Nancy.Configuration.NancyDefaultConfigurationProvider`1.Key">
            <summary>
            Gets the full type name of <typeparamref name="T"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the key.</returns>
        </member>
        <member name="T:Nancy.Conventions.AcceptHeaderCoercionConventions">
            <summary>
            Collection of accept header coercions
            </summary>
        </member>
        <member name="M:Nancy.Conventions.AcceptHeaderCoercionConventions.#ctor(System.Collections.Generic.IList{System.Func{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Decimal}},Nancy.NancyContext,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Decimal}}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Conventions.AcceptHeaderCoercionConventions"/> class., with
            the provided <paramref name= "conventions" />
            </summary>
            <param name="conventions">The conventions.</param>
        </member>
        <member name="M:Nancy.Conventions.AcceptHeaderCoercionConventions.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Nancy.Conventions.BuiltInAcceptHeaderCoercions">
            <summary>
            Built in functions for coercing accept headers.
            <seealso cref="T:Nancy.Conventions.DefaultAcceptHeaderCoercionConventions"/>
            </summary>
        </member>
        <member name="M:Nancy.Conventions.BuiltInAcceptHeaderCoercions.CoerceBlankAcceptHeader(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Decimal}},Nancy.NancyContext)">
            <summary>
            Adds a default accept header if there isn't one.
            </summary>
            <param name="currentAcceptHeaders">Current headers</param>
            <param name="context">Context</param>
            <returns>Modified headers or original if no modification required</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInAcceptHeaderCoercions.CoerceStupidBrowsers(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Decimal}},Nancy.NancyContext)">
            <summary>
            Replaces the accept header of stupid browsers that request XML instead
            of HTML.
            </summary>
            <param name="currentAcceptHeaders">Current headers</param>
            <param name="context">Context</param>
            <returns>Modified headers or original if no modification required</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInAcceptHeaderCoercions.BoostHtml(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Decimal}},Nancy.NancyContext)">
            <summary>
            Boosts the priority of HTML for browsers that ask for xml and html with the
            same priority.
            </summary>
            <param name="currentAcceptHeaders">Current headers</param>
            <param name="context">Context</param>
            <returns>Modified headers or original if no modification required</returns>
        </member>
        <member name="T:Nancy.Conventions.BuiltInCultureConventions">
            <summary>
            Built in functions for determining current culture
            <seealso cref="T:Nancy.Conventions.DefaultCultureConventions"/>
            </summary>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.FormCulture(Nancy.NancyContext,Nancy.GlobalizationConfiguration)">
            <summary>
            Checks to see if the Form has a CurrentCulture key.
            </summary>
            <param name="context">NancyContext</param>
            <param name="configuration">Culture configuration that contains allowed cultures</param>
            <returns>CultureInfo if found in Form otherwise null</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.PathCulture(Nancy.NancyContext,Nancy.GlobalizationConfiguration)">
            <summary>
            Checks to see if the first argument in the Path can be used to make a CultureInfo.
            </summary>
            <param name="context">NancyContext</param>
            <param name="configuration">Culture configuration that contains allowed cultures</param>
            <returns>CultureInfo if found in Path otherwise null</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.HeaderCulture(Nancy.NancyContext,Nancy.GlobalizationConfiguration)">
            <summary>
            Checks to see if the AcceptLanguage in the Headers can be used to make a CultureInfo. Uses highest weighted if multiple defined.
            </summary>
            <param name="context">NancyContext</param>
            <param name="configuration">Culture configuration that contains allowed cultures</param>
            <returns>CultureInfo if found in Headers otherwise null</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.SessionCulture(Nancy.NancyContext,Nancy.GlobalizationConfiguration)">
            <summary>
            Checks to see if the Session has a CurrentCulture key
            </summary>
            <param name="context">NancyContext</param>
            <param name="configuration">Culture configuration that contains allowed cultures</param>
            <returns>CultureInfo if found in Session otherwise null</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.CookieCulture(Nancy.NancyContext,Nancy.GlobalizationConfiguration)">
            <summary>
            Checks to see if the Cookies has a CurrentCulture key
            </summary>
            <param name="context">NancyContext</param>
            <param name="configuration">Culture configuration that contains allowed cultures</param>
            <returns>CultureInfo if found in Cookies otherwise null</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.GlobalizationConfigurationCulture(Nancy.NancyContext,Nancy.GlobalizationConfiguration)">
            <summary>
            Checks to see if a default culture has been set on <see cref="T:Nancy.GlobalizationConfiguration"/>
            </summary>
            <param name="context">NancyContext</param>
            <param name="configuration">Culture configuration that contains allowed cultures</param>
            <returns>CultureInfo if found in <see cref="T:Nancy.GlobalizationConfiguration"/> Default Culture else null</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.IsValidCultureInfoName(System.String,Nancy.GlobalizationConfiguration)">
            <summary>
            Validates culture name
            </summary>
            <param name="name">Culture name eg\en-GB</param>
            <param name="configuration">Culture configuration that contains allowed cultures</param>
            <returns>True/False if valid culture</returns>
        </member>
        <member name="T:Nancy.Conventions.CultureConventions">
            <summary>
            Collection class for static culture conventions
            </summary>
            <seealso cref="T:System.Func`3" />
        </member>
        <member name="M:Nancy.Conventions.CultureConventions.#ctor(System.Collections.Generic.IEnumerable{System.Func{Nancy.NancyContext,Nancy.GlobalizationConfiguration,System.Globalization.CultureInfo}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Conventions.CultureConventions"/> class, with
            the provided <paramref name="conventions"/>.
            </summary>
            <param name="conventions">The conventions.</param>
        </member>
        <member name="M:Nancy.Conventions.CultureConventions.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Nancy.Conventions.DefaultAcceptHeaderCoercionConventions">
            <summary>
            Wires up the default conventions for the accept header coercion
            </summary>
        </member>
        <member name="M:Nancy.Conventions.DefaultAcceptHeaderCoercionConventions.Initialise(Nancy.Conventions.NancyConventions)">
            <summary>
            Initialise any conventions this class "owns"
            </summary>
            <param name="conventions">Convention object instance</param>
        </member>
        <member name="M:Nancy.Conventions.DefaultAcceptHeaderCoercionConventions.Validate(Nancy.Conventions.NancyConventions)">
            <summary>
            Asserts that the conventions that this class "owns" are valid
            </summary>
            <param name="conventions">Conventions object instance</param>
            <returns>
            Tuple containing true/false for valid/invalid, and any error messages
            </returns>
        </member>
        <member name="T:Nancy.Conventions.DefaultCultureConventions">
            <summary>
            Default implementation of <see cref="T:Nancy.Conventions.IConvention"/>
            </summary>
        </member>
        <member name="M:Nancy.Conventions.DefaultCultureConventions.Initialise(Nancy.Conventions.NancyConventions)">
            <summary>
            Initialise culture conventions
            </summary>
            <param name="conventions"></param>
        </member>
        <member name="M:Nancy.Conventions.DefaultCultureConventions.Validate(Nancy.Conventions.NancyConventions)">
            <summary>
            Determine if culture conventions are valid
            </summary>
            <param name="conventions"></param>
            <returns></returns>
        </member>
        <member name="M:Nancy.Conventions.DefaultCultureConventions.ConfigureDefaultConventions(Nancy.Conventions.NancyConventions)">
            <summary>
            Setup default conventions
            </summary>
            <param name="conventions"></param>
        </member>
        <member name="T:Nancy.Conventions.DefaultStaticContentsConventions">
            <summary>
            Defines the default static contents conventions.
            </summary>
        </member>
        <member name="M:Nancy.Conventions.DefaultStaticContentsConventions.Initialise(Nancy.Conventions.NancyConventions)">
            <summary>
            Initialise any conventions this class "owns".
            </summary>
            <param name="conventions">Convention object instance.</param>
        </member>
        <member name="M:Nancy.Conventions.DefaultStaticContentsConventions.Validate(Nancy.Conventions.NancyConventions)">
            <summary>
            Asserts that the conventions that this class "owns" are valid
            </summary>
            <param name="conventions">Conventions object instance.</param>
            <returns>Tuple containing true/false for valid/invalid, and any error messages.</returns>
        </member>
        <member name="T:Nancy.Conventions.DefaultViewLocationConventions">
            <summary>
            Defines the default static contents conventions.
            </summary>
        </member>
        <member name="M:Nancy.Conventions.DefaultViewLocationConventions.Initialise(Nancy.Conventions.NancyConventions)">
            <summary>
            Initialise any conventions this class "owns".
            </summary>
            <param name="conventions">Convention object instance.</param>
        </member>
        <member name="M:Nancy.Conventions.DefaultViewLocationConventions.Validate(Nancy.Conventions.NancyConventions)">
            <summary>
            Asserts that the conventions that this class "owns" are valid.
            </summary>
            <param name="conventions">Conventions object instance.</param>
            <returns>Tuple containing true/false for valid/invalid, and any error messages.</returns>
        </member>
        <member name="T:Nancy.Conventions.IConvention">
            <summary>
            Provides Nancy convention defaults and validation
            </summary>
        </member>
        <member name="M:Nancy.Conventions.IConvention.Initialise(Nancy.Conventions.NancyConventions)">
            <summary>
            Initialise any conventions this class "owns"
            </summary>
            <param name="conventions">Convention object instance</param>
        </member>
        <member name="M:Nancy.Conventions.IConvention.Validate(Nancy.Conventions.NancyConventions)">
            <summary>
            Asserts that the conventions that this class "owns" are valid
            </summary>
            <param name="conventions">Conventions object instance</param>
            <returns>Tuple containing true/false for valid/invalid, and any error messages</returns>
        </member>
        <member name="T:Nancy.Conventions.NancyConventions">
            <summary>
            Nancy configurable conventions
            </summary>
        </member>
        <member name="M:Nancy.Conventions.NancyConventions.#ctor(Nancy.ITypeCatalog)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Conventions.NancyConventions"/> class.
            </summary>
        </member>
        <member name="P:Nancy.Conventions.NancyConventions.ViewLocationConventions">
            <summary>
            Gets or sets the conventions for locating view templates
            </summary>
        </member>
        <member name="P:Nancy.Conventions.NancyConventions.StaticContentsConventions">
            <summary>
            Gets or sets the conventions for locating and serving static content
            </summary>
        </member>
        <member name="P:Nancy.Conventions.NancyConventions.AcceptHeaderCoercionConventions">
            <summary>
            Gets or sets the conventions for coercing accept headers from their source
            values to the real values for content negotiation
            <seealso cref="T:Nancy.Conventions.BuiltInAcceptHeaderCoercions"/>
            </summary>
        </member>
        <member name="P:Nancy.Conventions.NancyConventions.CultureConventions">
            <summary>
            Gets or sets the conventions for determining request culture
            </summary>
        </member>
        <member name="M:Nancy.Conventions.NancyConventions.Validate">
            <summary>
            Validates the conventions
            </summary>
            <returns>A tuple containing a flag indicating validity, and any error messages</returns>
        </member>
        <member name="M:Nancy.Conventions.NancyConventions.GetInstanceRegistrations">
            <summary>
            Gets the instance registrations for registering into the container
            </summary>
            <returns>Enumeration of InstanceRegistration types</returns>
        </member>
        <member name="M:Nancy.Conventions.NancyConventions.BuildDefaultConventions">
            <summary>
            Locates all the default conventions and calls them in
            turn to build up the default conventions.
            </summary>
        </member>
        <member name="T:Nancy.Conventions.StaticContentConventionBuilder">
            <summary>
            Helper class for defining directory-based conventions for static contents.
            </summary>
        </member>
        <member name="M:Nancy.Conventions.StaticContentConventionBuilder.AddDirectory(System.String,System.String,System.String[])">
            <summary>
            Adds a directory-based convention for static convention.
            </summary>
            <param name="requestedPath">The path that should be matched with the request.</param>
            <param name="contentPath">The path to where the content is stored in your application, relative to the root. If this is <see langword="null" /> then it will be the same as <paramref name="requestedPath"/>.</param>
            <param name="allowedExtensions">A list of extensions that is valid for the conventions. If not supplied, all extensions are valid.</param>
            <returns>A <see cref="T:Nancy.Responses.GenericFileResponse"/> instance for the requested static contents if it was found, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Nancy.Conventions.StaticContentConventionBuilder.AddFile(System.String,System.String)">
            <summary>
            Adds a file-based convention for static convention.
            </summary>
            <param name="requestedFile">The file that should be matched with the request.</param>
            <param name="contentFile">The file that should be served when the requested path is matched.</param>
        </member>
        <member name="M:Nancy.Conventions.StaticContentConventionBuilder.IsWithinContentFolder(System.String,System.String)">
            <summary>
            Returns whether the given filename is contained within the content folder
            </summary>
            <param name="contentRootPath">Content root path</param>
            <param name="fileName">Filename requested</param>
            <returns>True if contained within the content root, false otherwise</returns>
        </member>
        <member name="T:Nancy.Conventions.StaticContentConventionBuilder.ResponseFactoryCacheKey">
            <summary>
            Used to uniquely identify a request. Needed for when two Nancy applications want to serve up static content of the same
            name from within the same AppDomain.
            </summary>
        </member>
        <member name="P:Nancy.Conventions.StaticContentConventionBuilder.ResponseFactoryCacheKey.Path">
            <summary>
            The path of the static content for which this response is being issued
            </summary>
        </member>
        <member name="P:Nancy.Conventions.StaticContentConventionBuilder.ResponseFactoryCacheKey.RootPath">
            <summary>
            The root folder path of the Nancy application for which this response will be issued
            </summary>
        </member>
        <member name="T:Nancy.Conventions.StaticContentHelper">
            <summary>
            Nancy static convention helper
            </summary>
        </member>
        <member name="M:Nancy.Conventions.StaticContentHelper.MapStaticContent(Nancy.Conventions.NancyConventions,System.Action{Nancy.Conventions.StaticFileContent,Nancy.Conventions.StaticDirectoryContent})">
            <summary>
            Extension method for NancyConventions
            <code>
            conventions.MapStaticContent((File, Directory) =>
            {
                File["/page.js"] = "page.js";
                Directory["/images"] = "images";
            });
            </code>
            </summary>
            <param name="conventions">The conventions to add to.</param>
            <param name="staticConventions">The callback method allows you to describe the static content</param>
        </member>
        <member name="T:Nancy.Conventions.StaticContentsConventions">
            <summary>
            Collection class for static content conventions
            </summary>
        </member>
        <member name="M:Nancy.Conventions.StaticContentsConventions.#ctor(System.Collections.Generic.IEnumerable{System.Func{Nancy.NancyContext,System.String,Nancy.Response}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Conventions.StaticContentsConventions"/> class, with
            the provided <paramref name="conventions"/>.
            </summary>
            <param name="conventions">The conventions.</param>
        </member>
        <member name="M:Nancy.Conventions.StaticContentsConventions.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Nancy.Conventions.StaticContentsConventionsExtensions">
            <summary>
            Extension methods to adding static content conventions.
            </summary>
        </member>
        <member name="M:Nancy.Conventions.StaticContentsConventionsExtensions.AddDirectory(System.Collections.Generic.IList{System.Func{Nancy.NancyContext,System.String,Nancy.Response}},System.String,System.String,System.String[])">
            <summary>
            Adds a directory-based convention for static convention.
            </summary>
            <param name="conventions">The conventions to add to.</param>
            <param name="requestedPath">The path that should be matched with the request.</param>
            <param name="contentPath">The path to where the content is stored in your application, relative to the root. If this is <see langword="null" /> then it will be the same as <paramref name="requestedPath"/>.</param>
            <param name="allowedExtensions">A list of extensions that is valid for the conventions. If not supplied, all extensions are valid.</param>
        </member>
        <member name="M:Nancy.Conventions.StaticContentsConventionsExtensions.AddFile(System.Collections.Generic.IList{System.Func{Nancy.NancyContext,System.String,Nancy.Response}},System.String,System.String)">
            <summary>
            Adds a directory-based convention for static convention.
            </summary>
            <param name="conventions">The conventions to add to.</param>
            <param name="requestedFile">The file that should be matched with the request.</param>
            <param name="contentFile">The file that should be served when the requested path is matched.</param>
        </member>
        <member name="T:Nancy.Conventions.StaticDirectoryContent">
            <summary>
            Nancy static directory convention helper
            </summary>
        </member>
        <member name="M:Nancy.Conventions.StaticDirectoryContent.#ctor(Nancy.Conventions.NancyConventions)">
            <summary>
            Creates a new instance of StaticDirectoryContent
            </summary>
            <param name="conventions">NancyConventions, to which static directories get added</param>
        </member>
        <member name="P:Nancy.Conventions.StaticDirectoryContent.Item(System.String,System.String[])">
            <summary>
            Adds a new static directory to the nancy conventions
            </summary>
            <param name="requestDirectory">The route of the file</param>
            <param name="allowedExtensions">A list of extensions that is valid for the conventions. If not supplied, all extensions are valid</param>
        </member>
        <member name="T:Nancy.Conventions.StaticFileContent">
            <summary>
            Nancy static file convention helper
            </summary>
        </member>
        <member name="M:Nancy.Conventions.StaticFileContent.#ctor(Nancy.Conventions.NancyConventions)">
            <summary>
            Creates a new instance of StaticFileContent
            </summary>
            <param name="conventions">NancyConventions, to which static files get added</param>
        </member>
        <member name="P:Nancy.Conventions.StaticFileContent.Item(System.String)">
            <summary>
            Adds a new static file to the nancy conventions
            </summary>
            <param name="requestFile">The route of the file</param>
        </member>
        <member name="T:Nancy.Conventions.ViewLocationConventions">
            <summary>
            This is a wrapper around the type
            <c>IEnumerable&lt;Func&lt;string, object, ViewLocationContext, string&gt;&gt;</c> and its
            only purpose is to make Ninject happy which was throwing an exception
            when constructor injecting this type.
            </summary>
        </member>
        <member name="M:Nancy.Conventions.ViewLocationConventions.#ctor(System.Collections.Generic.IEnumerable{System.Func{System.String,System.Object,Nancy.ViewEngines.ViewLocationContext,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Conventions.ViewLocationConventions"/> class, with
            the provided <paramref name="conventions"/>.
            </summary>
            <param name="conventions">The conventions.</param>
        </member>
        <member name="M:Nancy.Conventions.ViewLocationConventions.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Nancy.Cookies.INancyCookie">
            <summary>
            Defines the functionality of a Nancy context
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.Domain">
            <summary>
            The domain to restrict the cookie to
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.Expires">
            <summary>
            When the cookie should expire
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance containing the date and time when the cookie should expire; otherwise <see langword="null"/> if it should expire at the end of the session.</value>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.Name">
            <summary>
            The name of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.EncodedName">
            <summary>
            Gets the encoded name of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.Path">
            <summary>
            The path to restrict the cookie to
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.Value">
            <summary>
            The value of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.EncodedValue">
            <summary>
            Gets the encoded value of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.HttpOnly">
            <summary>
            Whether the cookie is http only
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.Secure">
            <summary>
            Whether the cookie is secure (i.e. HTTPS only)
            </summary>
        </member>
        <member name="T:Nancy.Cookies.NancyCookie">
            <summary>
            Default cookie implementation for Nancy.
            </summary>
        </member>
        <member name="M:Nancy.Cookies.NancyCookie.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Cookies.NancyCookie"/> class, with
            the provided <paramref name="name"/> and <paramref name="value"/>.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
        </member>
        <member name="M:Nancy.Cookies.NancyCookie.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Cookies.NancyCookie"/> class, with
            the provided <paramref name="name"/>, <paramref name="value"/> and  <paramref name="expires"/>.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="expires">The expiration date of the cookie. Can be <see langword="null" /> if it should expire at the end of the session.</param>
        </member>
        <member name="M:Nancy.Cookies.NancyCookie.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Cookies.NancyCookie"/> class, with
            the provided <paramref name="name"/>, <paramref name="value"/> and  <paramref name="httpOnly"/>.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="httpOnly">Whether the cookie is http only.</param>
        </member>
        <member name="M:Nancy.Cookies.NancyCookie.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Cookies.NancyCookie"/> class, with
            the provided <paramref name="name"/>, <paramref name="value"/>, <paramref name="httpOnly"/> and <paramref name="secure"/>.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="httpOnly">Whether the cookie is http only.</param>
            <param name="secure">Whether the cookie is secure (i.e. HTTPS only).</param>
        </member>
        <member name="M:Nancy.Cookies.NancyCookie.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Cookies.NancyCookie"/> class, with
            the provided <paramref name="name"/>, <paramref name="value"/>, <paramref name="httpOnly"/>, <paramref name="secure"/> and  <paramref name="expires"/>.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="httpOnly">Whether the cookie is http only.</param>
            <param name="secure">Whether the cookie is secure (i.e. HTTPS only).</param>
            <param name="expires">The expiration date of the cookie. Can be <see langword="null" /> if it should expire at the end of the session.</param>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.Domain">
            <summary>
            The domain to restrict the cookie to
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.Expires">
            <summary>
            When the cookie should expire
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance containing the date and time when the cookie should expire; otherwise <see langword="null"/> if it should expire at the end of the session.</value>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.Name">
            <summary>
            The name of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.EncodedName">
            <summary>
            Gets the encoded name of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.Path">
            <summary>
            The path to restrict the cookie to
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.Value">
            <summary>
            The value of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.EncodedValue">
            <summary>
            Gets the encoded value of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.HttpOnly">
            <summary>
            Whether the cookie is http only
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.Secure">
            <summary>
            Whether the cookie is secure (i.e. HTTPS only)
            </summary>
        </member>
        <member name="M:Nancy.Cookies.NancyCookie.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Nancy.Cryptography.AesEncryptionProvider">
            <summary>
            Default encryption provider using Aes
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.AesEncryptionProvider.#ctor(Nancy.Cryptography.IKeyGenerator)">
            <summary>
            Creates a new instance of the AesEncryptionProvider class
            </summary>
            <param name="keyGenerator">Key generator to use to generate the key and iv</param>
        </member>
        <member name="M:Nancy.Cryptography.AesEncryptionProvider.Encrypt(System.String)">
            <summary>
            Encrypt data
            </summary>
            <param name="data">Data to encrypt</param>
            <returns>Encrypted string</returns>
        </member>
        <member name="M:Nancy.Cryptography.AesEncryptionProvider.Decrypt(System.String)">
            <summary>
            Decrypt string
            </summary>
            <param name="data">Data to decrypt</param>
            <returns>Decrypted string</returns>
        </member>
        <member name="T:Nancy.Cryptography.Base64Helpers">
            <summary>
            Helper class for base64 encoding related tasks.
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.Base64Helpers.GetBase64Length(System.Int32)">
            <summary>
            Calculates how long a byte array of X length will be after base64 encoding
            </summary>
            <param name="normalLength">The normal, 8bit per byte, length of the byte array</param>
            <returns>Base64 encoded length</returns>
        </member>
        <member name="T:Nancy.Cryptography.CryptographyConfiguration">
            <summary>
            Cryptographic setup for classes that use encryption and HMAC
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.CryptographyConfiguration.#ctor(Nancy.Cryptography.IEncryptionProvider,Nancy.Cryptography.IHmacProvider)">
            <summary>
            Creates a new instance of the CryptographyConfiguration class
            </summary>
            <param name="encryptionProvider">Encryption provider</param>
            <param name="hmacProvider">HMAC provider</param>
        </member>
        <member name="P:Nancy.Cryptography.CryptographyConfiguration.Default">
            <summary>
            Gets the default configuration - Rijndael encryption, HMACSHA256 HMAC, random keys
            </summary>
        </member>
        <member name="P:Nancy.Cryptography.CryptographyConfiguration.NoEncryption">
            <summary>
            Gets configuration with no encryption and HMACSHA256 HMAC with a random key
            </summary>
        </member>
        <member name="P:Nancy.Cryptography.CryptographyConfiguration.EncryptionProvider">
            <summary>
            Gets the encryption provider
            </summary>
        </member>
        <member name="P:Nancy.Cryptography.CryptographyConfiguration.HmacProvider">
            <summary>
            Gets the hmac provider
            </summary>
        </member>
        <member name="T:Nancy.Cryptography.DefaultHmacProvider">
            <summary>
            Provides SHA-256 HMACs
            </summary>
        </member>
        <member name="F:Nancy.Cryptography.DefaultHmacProvider.hmacLength">
            <summary>
            HMAC length
            </summary>
        </member>
        <member name="F:Nancy.Cryptography.DefaultHmacProvider.PreferredKeySize">
            <summary>
            Preferred key size for HMACSHA256
            </summary>
        </member>
        <member name="F:Nancy.Cryptography.DefaultHmacProvider.key">
            <summary>
            Key
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.DefaultHmacProvider.#ctor(Nancy.Cryptography.IKeyGenerator)">
            <summary>
            Creates a new instance of the DefaultHmacProvider type
            </summary>
            <param name="keyGenerator">Key generator to use to generate the key</param>
        </member>
        <member name="P:Nancy.Cryptography.DefaultHmacProvider.HmacLength">
            <summary>
            Gets the length of the HMAC signature
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.DefaultHmacProvider.GenerateHmac(System.String)">
            <summary>
            Create a hmac from the given data using the given passPhrase
            </summary>
            <param name="data">Data to create hmac from</param>
            <returns>String representation of the hmac</returns>
        </member>
        <member name="M:Nancy.Cryptography.DefaultHmacProvider.GenerateHmac(System.Byte[])">
            <summary>
            Create a hmac from the given data
            </summary>
            <param name="data">Data to create hmac from</param>
            <returns>Hmac bytes</returns>
        </member>
        <member name="T:Nancy.Cryptography.HmacComparer">
            <summary>
            Compares two HMAC
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.HmacComparer.Compare(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Compare two hmac byte arrays without any early exits
            </summary>
            <param name="hmac1">First hmac</param>
            <param name="hmac2">Second hmac</param>
            <param name="hashLength">Expected length of the hash</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="T:Nancy.Cryptography.IEncryptionProvider">
            <summary>
            Provides symmetrical encryption support
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.IEncryptionProvider.Encrypt(System.String)">
            <summary>
            Encrypt and base64 encode the string
            </summary>
            <param name="data">Data to encrypt</param>
            <returns>Encrypted string</returns>
        </member>
        <member name="M:Nancy.Cryptography.IEncryptionProvider.Decrypt(System.String)">
            <summary>
            Decrypt string
            </summary>
            <param name="data">Data to decrypt</param>
            <returns>Decrypted string</returns>
        </member>
        <member name="T:Nancy.Cryptography.IHmacProvider">
            <summary>
            Creates Hash-based Message Authentication Codes (HMACs)
            </summary>
        </member>
        <member name="P:Nancy.Cryptography.IHmacProvider.HmacLength">
            <summary>
            Gets the length of the HMAC signature in bytes
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.IHmacProvider.GenerateHmac(System.String)">
            <summary>
            Create a hmac from the given data
            </summary>
            <param name="data">Data to create hmac from</param>
            <returns>Hmac bytes</returns>
        </member>
        <member name="M:Nancy.Cryptography.IHmacProvider.GenerateHmac(System.Byte[])">
            <summary>
            Create a hmac from the given data
            </summary>
            <param name="data">Data to create hmac from</param>
            <returns>Hmac bytes</returns>
        </member>
        <member name="T:Nancy.Cryptography.IKeyGenerator">
            <summary>
            Provides key byte generation
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.IKeyGenerator.GetBytes(System.Int32)">
            <summary>
            Generate a sequence of bytes
            </summary>
            <param name="count">Number of bytes to return</param>
            <returns>Array <see paramref="count"/> bytes</returns>
        </member>
        <member name="T:Nancy.Cryptography.NoEncryptionProvider">
            <summary>
            A "no op" encryption provider
            Useful for debugging or performance.
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.NoEncryptionProvider.Encrypt(System.String)">
            <summary>
            Encrypt data
            </summary>
            <param name="data">Data to encrypt</param>
            <returns>Encrypted string</returns>
        </member>
        <member name="M:Nancy.Cryptography.NoEncryptionProvider.Decrypt(System.String)">
            <summary>
            Decrypt string
            </summary>
            <param name="data">Data to decrypt</param>
            <returns>Decrypted string</returns>
        </member>
        <member name="T:Nancy.Cryptography.PassphraseKeyGenerator">
            <summary>
            Provides key generation using PBKDF2 / Rfc2898
            NOTE: the salt is static so the passphrase should be long and complex
            (As the bytes are generated at app startup, because it's too slow to do per
            request, so the salt cannot be randomly generated and stored)
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.PassphraseKeyGenerator.#ctor(System.String,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Cryptography.PassphraseKeyGenerator"/> class, with
            the provided <paramref name="passphrase"/>, <paramref name="salt"/> and optional
            number of <paramref name="iterations"/>
            </summary>
            <param name="passphrase">The passphrase that should be used.</param>
            <param name="salt">The salt</param>
            <param name="iterations">The number of iterations. The default value is 10000.</param>
        </member>
        <member name="M:Nancy.Cryptography.PassphraseKeyGenerator.GetBytes(System.Int32)">
            <summary>
            Generate a sequence of bytes
            </summary>
            <param name="count">Number of bytes to return</param>
            <returns>Array <see paramref="count"/> bytes</returns>
        </member>
        <member name="T:Nancy.Cryptography.RandomKeyGenerator">
            <summary>
            Generates random secure keys using RandomNumberGenerator
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.RandomKeyGenerator.GetBytes(System.Int32)">
            <summary>
            Generate a sequence of bytes
            </summary>
            <param name="count">Number of bytes to return</param>
            <returns>
            Array <see paramref="count" /> bytes
            </returns>
        </member>
        <member name="T:Nancy.Culture.DefaultCultureService">
            <summary>
            Determines current culture for context
            </summary>
        </member>
        <member name="M:Nancy.Culture.DefaultCultureService.#ctor(Nancy.Conventions.CultureConventions,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Creates a new instance of DefaultCultureService
            </summary>
            <param name="cultureConventions">CultureConventions to use for determining culture</param>
            <param name="environment">An instance of <see cref="T:Nancy.Configuration.INancyEnvironment"/> to retrieve <see cref="T:Nancy.GlobalizationConfiguration"/> from.</param>
        </member>
        <member name="M:Nancy.Culture.DefaultCultureService.DetermineCurrentCulture(Nancy.NancyContext)">
            <summary>
            Determine current culture for NancyContext
            </summary>
            <param name="context">NancyContext</param>
            <returns>CultureInfo</returns>
        </member>
        <member name="T:Nancy.Culture.ICultureService">
            <summary>
            Provides current culture for Nancy context
            </summary>
        </member>
        <member name="M:Nancy.Culture.ICultureService.DetermineCurrentCulture(Nancy.NancyContext)">
            <summary>
            Determine current culture for NancyContext
            </summary>
            <param name="context">NancyContext</param>
            <returns>CultureInfo</returns>
        </member>
        <member name="T:Nancy.DefaultGlobalizationConfigurationProvider">
            <summary>
            Provides the default <see cref="T:Nancy.GlobalizationConfiguration"/>.
            </summary>
        </member>
        <member name="M:Nancy.DefaultGlobalizationConfigurationProvider.GetDefaultConfiguration">
            <summary>
            Gets the default <see cref="T:Nancy.GlobalizationConfiguration"/> configuration instance to register in the <see cref="T:Nancy.Configuration.INancyEnvironment"/> .
            </summary>
            <returns>The configuration instance</returns>
        </member>
        <member name="T:Nancy.DefaultNancyBootstrapper">
            <summary>
            TinyIoC bootstrapper - registers default route resolver and registers itself as
            INancyModuleCatalog for resolving modules but behavior can be overridden if required.
            </summary>
        </member>
        <member name="F:Nancy.DefaultNancyBootstrapper.DefaultAutoRegisterIgnoredAssemblies">
            <summary>
            Default assemblies that are ignored for autoregister
            </summary>
        </member>
        <member name="P:Nancy.DefaultNancyBootstrapper.AutoRegisterIgnoredAssemblies">
            <summary>
            Gets the assemblies to ignore when autoregistering the application container
            Return true from the delegate to ignore that particular assembly, returning false
            does not mean the assembly *will* be included, a true from another delegate will
            take precedence.
            </summary>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.ConfigureApplicationContainer(Nancy.TinyIoc.TinyIoCContainer)">
            <summary>
            Configures the container using AutoRegister followed by registration
            of default INancyModuleCatalog and IRouteResolver.
            </summary>
            <param name="container">Container instance</param>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetEngineInternal">
            <summary>
            Resolve INancyEngine
            </summary>
            <returns>INancyEngine implementation</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetApplicationContainer">
            <summary>
            Create a default, unconfigured, container
            </summary>
            <returns>Container instance</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.RegisterNancyEnvironment(Nancy.TinyIoc.TinyIoCContainer,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Registers an <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance in the container.
            </summary>
            <param name="container">The container to register into.</param>
            <param name="environment">The <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance to register.</param>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.RegisterBootstrapperTypes(Nancy.TinyIoc.TinyIoCContainer)">
            <summary>
            Register the bootstrapper's implemented types into the container.
            This is necessary so a user can pass in a populated container but not have
            to take the responsibility of registering things like INancyModuleCatalog manually.
            </summary>
            <param name="applicationContainer">Application container to register into</param>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.RegisterTypes(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.TypeRegistration})">
            <summary>
            Register the default implementations of internally used types into the container as singletons
            </summary>
            <param name="container">Container to register into</param>
            <param name="typeRegistrations">Type registrations to register</param>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.RegisterCollectionTypes(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.CollectionTypeRegistration})">
            <summary>
            Register the various collections into the container as singletons to later be resolved
            by IEnumerable{Type} constructor dependencies.
            </summary>
            <param name="container">Container to register into</param>
            <param name="collectionTypeRegistrations">Collection type registrations to register</param>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.RegisterRequestContainerModules(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.ModuleRegistration})">
            <summary>
            Register the given module types into the container
            </summary>
            <param name="container">Container to register into</param>
            <param name="moduleRegistrationTypes">NancyModule types</param>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.RegisterInstances(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.InstanceRegistration})">
            <summary>
            Register the given instances into the container
            </summary>
            <param name="container">Container to register into</param>
            <param name="instanceRegistrations">Instance registration types</param>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.CreateRequestContainer(Nancy.NancyContext)">
            <summary>
            Creates a per request child/nested container
            </summary>
            <param name="context">Current context</param>
            <returns>Request container instance</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetEnvironmentConfigurator">
            <summary>
            Gets the <see cref="T:Nancy.Configuration.INancyEnvironmentConfigurator"/> used by th.
            </summary>
            <returns>An <see cref="T:Nancy.Configuration.INancyEnvironmentConfigurator"/> instance.</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetDiagnostics">
            <summary>
            Gets the diagnostics for initialization
            </summary>
            <returns>IDiagnostics implementation</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetApplicationStartupTasks">
            <summary>
            Gets all registered startup tasks
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IApplicationStartup"/> instances. </returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.RegisterAndGetRequestStartupTasks(Nancy.TinyIoc.TinyIoCContainer,System.Type[])">
            <summary>
            Gets all registered request startup tasks
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IRequestStartup"/> instances.</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetRegistrationTasks">
            <summary>
            Gets all registered application registration tasks
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IRegistrations"/> instances.</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetEnvironment">
            <summary>
            Get the <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.
            </summary>
            <returns>An configured <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</returns>
            <remarks>The boostrapper must be initialised (<see cref="M:Nancy.Bootstrapper.INancyBootstrapper.Initialise"/>) prior to calling this.</remarks>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetAllModules(Nancy.TinyIoc.TinyIoCContainer)">
            <summary>
            Retrieve all module instances from the container
            </summary>
            <param name="container">Container to use</param>
            <returns>Collection of NancyModule instances</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetModule(Nancy.TinyIoc.TinyIoCContainer,System.Type)">
            <summary>
            Retrieve a specific module instance from the container
            </summary>
            <param name="container">Container to use</param>
            <param name="moduleType">Type of the module</param>
            <returns>NancyModule instance</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.AutoRegister(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{System.Func{System.Reflection.Assembly,System.Boolean}})">
            <summary>
            Executes auto registration with the given container.
            </summary>
            <param name="container">Container instance</param>
            <param name="ignoredAssemblies">List of ignored assemblies</param>
        </member>
        <member name="T:Nancy.DefaultNancyContextFactory">
            <summary>
            Creates NancyContext instances
            </summary>
        </member>
        <member name="M:Nancy.DefaultNancyContextFactory.#ctor(Nancy.Culture.ICultureService,Nancy.Diagnostics.IRequestTraceFactory,Nancy.Localization.ITextResource,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Creates a new instance of the <see cref="T:Nancy.DefaultNancyContextFactory"/> class.
            </summary>
            <param name="cultureService">An <see cref="T:Nancy.Culture.ICultureService"/> instance.</param>
            <param name="requestTraceFactory">An <see cref="T:Nancy.Diagnostics.IRequestTraceFactory"/> instance.</param>
            <param name="textResource">An <see cref="T:Nancy.Localization.ITextResource"/> instance.</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="M:Nancy.DefaultNancyContextFactory.Create(Nancy.Request)">
            <summary>
            Create a new <see cref="T:Nancy.NancyContext"/> instance.
            </summary>
            <returns>A <see cref="T:Nancy.NancyContext"/> instance.</returns>
        </member>
        <member name="T:Nancy.DefaultObjectSerializer">
            <summary>
            Serializes/Deserializes objects for sessions
            </summary>
        </member>
        <member name="M:Nancy.DefaultObjectSerializer.Serialize(System.Object)">
            <summary>
            Serialize an object
            </summary>
            <param name="sourceObject">Source object</param>
            <returns>Serialised object string</returns>
        </member>
        <member name="M:Nancy.DefaultObjectSerializer.Deserialize(System.String)">
            <summary>
            Deserialize an object string
            </summary>
            <param name="sourceString">Source object string</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:Nancy.DefaultResponseFormatter">
            <summary>
            The default implementation of the <see cref="T:Nancy.IResponseFormatter"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.DefaultResponseFormatter.#ctor(Nancy.IRootPathProvider,Nancy.NancyContext,Nancy.ISerializerFactory,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.DefaultResponseFormatter"/> class.
            </summary>
            <param name="rootPathProvider">The <see cref="T:Nancy.IRootPathProvider"/> that should be used by the instance.</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> that should be used by the instance.</param>
            <param name="serializerFactory">An <see cref="T:Nancy.ISerializerFactory" /> instance"/>.</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="P:Nancy.DefaultResponseFormatter.SerializerFactory">
            <summary>
            Gets all <see cref="T:Nancy.ISerializerFactory"/> factory.
            </summary>
        </member>
        <member name="P:Nancy.DefaultResponseFormatter.Context">
            <summary>
            Gets the context for which the response is being formatted.
            </summary>
            <value>A <see cref="T:Nancy.NancyContext"/> instance.</value>
        </member>
        <member name="P:Nancy.DefaultResponseFormatter.Environment">
            <summary>
            Gets the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <value>An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</value>
        </member>
        <member name="P:Nancy.DefaultResponseFormatter.RootPath">
            <summary>
            Gets the root path of the application.
            </summary>
            <value>A <see cref="T:System.String"/> containing the root path.</value>
        </member>
        <member name="T:Nancy.DefaultResponseFormatterFactory">
            <summary>
            The default implementation of the <see cref="T:Nancy.IResponseFormatterFactory"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.DefaultResponseFormatterFactory.#ctor(Nancy.IRootPathProvider,Nancy.ISerializerFactory,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.DefaultResponseFormatter"/> class.
            </summary>
            <param name="rootPathProvider">An <see cref="T:Nancy.IRootPathProvider"/> instance.</param>
            <param name="serializerFactory">An <see cref="T:Nancy.ISerializerFactory"/> instance.</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="M:Nancy.DefaultResponseFormatterFactory.Create(Nancy.NancyContext)">
            <summary>
            Creates a new <see cref="T:Nancy.IResponseFormatter"/> instance.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance that should be used by the response formatter.</param>
            <returns>An <see cref="T:Nancy.IResponseFormatter"/> instance.</returns>
        </member>
        <member name="T:Nancy.DefaultRootPathProvider">
            <summary>
            Default implementation of <see cref="T:Nancy.IRootPathProvider"/>.
            </summary>
        </member>
        <member name="M:Nancy.DefaultRootPathProvider.GetRootPath">
            <summary>
            Returns the root folder path of the current Nancy application.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the path of the root folder.</returns>
        </member>
        <member name="T:Nancy.DefaultRouteConfigurationProvider">
            <summary>
            Provides the default configuration for <see cref="T:Nancy.RouteConfiguration"/>.
            </summary>
        </member>
        <member name="M:Nancy.DefaultRouteConfigurationProvider.GetDefaultConfiguration">
            <summary>
            Gets the default configuration instance to register in the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <remarks>Will return <see cref="F:Nancy.ViewConfiguration.Default"/>.</remarks>
        </member>
        <member name="T:Nancy.DefaultRuntimeEnvironmentInformation">
            <summary>
            Default implementation of the <see cref="T:Nancy.IRuntimeEnvironmentInformation"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.DefaultRuntimeEnvironmentInformation.#ctor(Nancy.ITypeCatalog)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.DefaultRuntimeEnvironmentInformation"/> class.
            </summary>
            <param name="typeCatalog">An <see cref="T:Nancy.ITypeCatalog"/> instance.</param>
        </member>
        <member name="P:Nancy.DefaultRuntimeEnvironmentInformation.IsDebug">
            <summary>
            Gets a value indicating if the application is running in debug mode.
            </summary>
            <returns><see langword="true"/> if the application is running in debug mode, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nancy.DefaultSerializerFactory">
            <summary>
            Default implementation of the <see cref="T:Nancy.ISerializerFactory"/> interface.
            </summary>
            <remarks>This implementation will ignore the default implementations (those found in the Nancy assembly) unless no other match could be made.</remarks>
        </member>
        <member name="M:Nancy.DefaultSerializerFactory.#ctor(System.Collections.Generic.IEnumerable{Nancy.ISerializer})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.DefaultSerializerFactory"/> class,
            with the provided <paramref name="serializers"/>.
            </summary>
            <param name="serializers">The <see cref="T:Nancy.ISerializer"/> implementations that should be available to the factory.</param>
        </member>
        <member name="M:Nancy.DefaultSerializerFactory.GetSerializer(Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Gets the <see cref="T:Nancy.ISerializer"/> implementation that can serialize the provided <paramref name="mediaRange"/>.
            </summary>
            <param name="mediaRange">The <see cref="T:Nancy.Responses.Negotiation.MediaRange"/> to get a serializer for.</param>
            <returns>An <see cref="T:Nancy.ISerializer"/> instance, or <see langword="null" /> if not match was found.</returns>
            <exception cref="T:System.InvalidOperationException">If more than one <see cref="T:Nancy.ISerializer"/> (not counting the default serializers) matched the provided media range.</exception>
        </member>
        <member name="T:Nancy.DefaultStaticContentConfigurationProvider">
            <summary>
            Provides the default <see cref="T:Nancy.StaticContentConfiguration"/>. 
            </summary>
        </member>
        <member name="M:Nancy.DefaultStaticContentConfigurationProvider.#ctor(Nancy.IRootPathProvider)">
            <summary>
            Creates and instance of <see cref="T:Nancy.DefaultStaticContentConfigurationProvider" />. 
            </summary>
            <param name="rootPathProvider">Use <see cref="T:Nancy.IRootPathProvider"/> to get the root path of the application</param>
        </member>
        <member name="M:Nancy.DefaultStaticContentConfigurationProvider.GetDefaultConfiguration">
            <summary>
            Gets the default <see cref="T:Nancy.StaticContentConfiguration"/> configuration instance to register in the <see cref="T:Nancy.Configuration.INancyEnvironment"/> .
            </summary>
            <returns>The configuration instance.</returns>
        </member>
        <member name="T:Nancy.DefaultStaticContentProvider">
            <summary>
            The default static content provider that uses <see cref="T:Nancy.Conventions.StaticContentsConventions"/>
            to determine what static content to serve.
            </summary>
        </member>
        <member name="M:Nancy.DefaultStaticContentProvider.#ctor(Nancy.IRootPathProvider,Nancy.Conventions.StaticContentsConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.DefaultStaticContentProvider"/> class, using the
            provided <paramref name="rootPathProvider"/> and <paramref name="conventions"/>.
            </summary>
            <param name="rootPathProvider">The current root path provider.</param>
            <param name="conventions">The static content conventions.</param>
        </member>
        <member name="M:Nancy.DefaultStaticContentProvider.GetContent(Nancy.NancyContext)">
            <summary>
            Gets the static content response, if possible.
            </summary>
            <param name="context">Current context</param>
            <returns>Response if serving content, null otherwise</returns>
        </member>
        <member name="T:Nancy.DefaultTraceConfigurationProvider">
            <summary>
            Provides the default configuration for <see cref="T:Nancy.TraceConfiguration"/>.
            </summary>
        </member>
        <member name="M:Nancy.DefaultTraceConfigurationProvider.#ctor(Nancy.IRuntimeEnvironmentInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.DefaultTraceConfigurationProvider"/> class.
            </summary>
        </member>
        <member name="M:Nancy.DefaultTraceConfigurationProvider.GetDefaultConfiguration">
            <summary>
            Gets the default configuration instance to register in the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <returns>The configuration instance</returns>
        </member>
        <member name="T:Nancy.DefaultTypeCatalog">
            <summary>
            Default implementation of the <see cref="T:Nancy.ITypeCatalog"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.DefaultTypeCatalog.#ctor(Nancy.IAssemblyCatalog)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.DefaultTypeCatalog"/> class.
            </summary>
            <param name="assemblyCatalog">An <see cref="T:Nancy.IAssemblyCatalog"/> instanced, used to get the assemblies that types should be resolved from.</param>
        </member>
        <member name="M:Nancy.DefaultTypeCatalog.GetTypesAssignableTo(System.Type,Nancy.TypeResolveStrategy)">
            <summary>
            Gets all types that are assignable to the provided <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that returned types should be assignable to.</param>
            <param name="strategy">A <see cref="T:Nancy.TypeResolveStrategy"/> that should be used when retrieving types.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:System.Type"/> instances.</returns>
        </member>
        <member name="T:Nancy.DefaultViewConfigurationProvider">
            <summary>
            Provides the default configuration for <see cref="T:Nancy.ViewConfiguration"/>.
            </summary>
        </member>
        <member name="M:Nancy.DefaultViewConfigurationProvider.GetDefaultConfiguration">
            <summary>
            Gets the default configuration instance to register in the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <returns>The configuration instance</returns>
            <remarks>Will return <see cref="F:Nancy.ViewConfiguration.Default"/>.</remarks>
        </member>
        <member name="T:Nancy.Diagnostics.ConcurrentLimitedCollection`1">
            <summary>
            Provides a thread safe, limited size, collection of objects
            If the collection is full the oldest item gets removed.
            </summary>
            <typeparam name="T">Type to store</typeparam>
        </member>
        <member name="P:Nancy.Diagnostics.ConcurrentLimitedCollection`1.CurrentSize">
            <summary>
            Gets the current size for the collection.
            </summary>
            <value> Current size of the collection.</value>
        </member>
        <member name="M:Nancy.Diagnostics.ConcurrentLimitedCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.ConcurrentLimitedCollection`1"/> class, with
            the provided <paramref name="maxSize"/>.
            </summary>
            <param name="maxSize">The maximum size for the collection.</param>
        </member>
        <member name="M:Nancy.Diagnostics.ConcurrentLimitedCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.Diagnostics.ConcurrentLimitedCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.Diagnostics.ConcurrentLimitedCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            If the collection is full, the oldest item is removed and the new item
            is added to the end of the collection.
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.Diagnostics.ConcurrentLimitedCollection`1.Clear">
            <summary>
            Clear the collection
            </summary>
        </member>
        <member name="T:Nancy.Diagnostics.DefaultDiagnostics">
            <summary>
            Wires up the diagnostics support at application startup.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultDiagnostics.#ctor(System.Collections.Generic.IEnumerable{Nancy.Diagnostics.IDiagnosticsProvider},Nancy.IRootPathProvider,Nancy.Diagnostics.IRequestTracing,Nancy.Bootstrapper.NancyInternalConfiguration,Nancy.ModelBinding.IModelBinderLocator,System.Collections.Generic.IEnumerable{Nancy.Responses.Negotiation.IResponseProcessor},System.Collections.Generic.IEnumerable{Nancy.Routing.Constraints.IRouteSegmentConstraint},Nancy.Culture.ICultureService,Nancy.Diagnostics.IRequestTraceFactory,System.Collections.Generic.IEnumerable{Nancy.Routing.IRouteMetadataProvider},Nancy.Localization.ITextResource,Nancy.Configuration.INancyEnvironment,Nancy.ITypeCatalog,Nancy.IAssemblyCatalog,Nancy.Conventions.AcceptHeaderCoercionConventions)">
            <summary>
            Creates a new instance of the <see cref="T:Nancy.Diagnostics.DefaultDiagnostics"/> class.
            </summary>
            <param name="diagnosticProviders"></param>
            <param name="rootPathProvider"></param>
            <param name="requestTracing"></param>
            <param name="configuration"></param>
            <param name="modelBinderLocator"></param>
            <param name="responseProcessors"></param>
            <param name="routeSegmentConstraints"></param>
            <param name="cultureService"></param>
            <param name="requestTraceFactory"></param>
            <param name="routeMetadataProviders"></param>
            <param name="textResource"></param>
            <param name="environment"></param>
            <param name="typeCatalog"></param>
            <param name="assemblyCatalog"></param>
            <param name="acceptHeaderCoercionConventions"></param>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultDiagnostics.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Initialize diagnostics
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.Diagnostics.DefaultDiagnosticsConfigurationProvider">
            <summary>
            Provides the default configuration for <see cref="T:Nancy.Diagnostics.DiagnosticsConfiguration"/>.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultDiagnosticsConfigurationProvider.GetDefaultConfiguration">
            <summary>
            Gets the default configuration instance to register in the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <returns>The configuration instance</returns>
            <remarks>Will return <see cref="F:Nancy.Diagnostics.DiagnosticsConfiguration.Default"/></remarks>
        </member>
        <member name="T:Nancy.Diagnostics.DefaultRequestTrace">
            <summary>
            The default implementation of the <see cref="T:Nancy.Diagnostics.IRequestTrace"/> interface.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.DefaultRequestTrace.Items">
            <summary>
            Gets the generic item store.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the items.</value>
        </member>
        <member name="P:Nancy.Diagnostics.DefaultRequestTrace.RequestData">
            <summary>
            Gets or sets the information about the request.
            </summary>
            <value>An <see cref="P:Nancy.Diagnostics.DefaultRequestTrace.RequestData"/> instance.</value>
        </member>
        <member name="P:Nancy.Diagnostics.DefaultRequestTrace.ResponseData">
            <summary>
            Gets or sets the information about the response.
            </summary>
            <value>An <see cref="P:Nancy.Diagnostics.DefaultRequestTrace.ResponseData"/> instance.</value>
        </member>
        <member name="P:Nancy.Diagnostics.DefaultRequestTrace.TraceLog">
            <summary>
            Gets or sets the trace log.
            </summary>
            <value>A <see cref="T:Nancy.Diagnostics.ITraceLog"/> instance.</value>
        </member>
        <member name="T:Nancy.Diagnostics.DefaultRequestTraceFactory">
            <summary>
            Default implementation of the <see cref="T:Nancy.Diagnostics.IRequestTraceFactory"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultRequestTraceFactory.#ctor(Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.DefaultRequestTraceFactory"/> class.
            </summary>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultRequestTraceFactory.Create(Nancy.Request)">
            <summary>
            Creates an <see cref="T:Nancy.Diagnostics.IRequestTrace"/> instance.
            </summary>
            <param name="request">A <see cref="T:Nancy.Request"/> instance.</param>
            <returns>An <see cref="T:Nancy.Diagnostics.IRequestTrace"/> instance.</returns>
        </member>
        <member name="T:Nancy.Diagnostics.DefaultRequestTracing">
            <summary>
            Default implementation of the <see cref="T:Nancy.Diagnostics.IRequestTracing"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultRequestTracing.AddRequestDiagnosticToSession(System.Guid,Nancy.NancyContext)">
            <summary>
            Adds the <see cref="T:Nancy.Diagnostics.IRequestTrace"/>, of the provided, <see cref="T:Nancy.NancyContext"/> to the trace log.
            </summary>
            <param name="sessionId">The identifier of the trace.</param>
            <param name="context">A <see cref="T:Nancy.NancyContext"/> instance.</param>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultRequestTracing.Clear">
            <summary>
            Clears the trace log.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultRequestTracing.CreateSession">
            <summary>
            Creates a new trace session.
            </summary>
            <returns>A <see cref="T:System.Guid"/> which represents the identifier of the new trace session.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultRequestTracing.GetSessions">
            <summary>
            Gets all the available <see cref="T:Nancy.Diagnostics.RequestTraceSession"/> instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultRequestTracing.IsValidSessionId(System.Guid)">
            <summary>
            Checks if the provided <paramref name="sessionId"/> is valid or not.
            </summary>
            <param name="sessionId">A <see cref="T:System.Guid"/> representing the session to check.</param>
            <returns><see langword="true"/> if the session is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nancy.Diagnostics.DefaultTraceLog">
            <summary>
            Default implementation of the <see cref="T:Nancy.Diagnostics.ITraceLog"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultTraceLog.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Nancy.Diagnostics.DefaultTraceLog"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultTraceLog.WriteLog(System.Action{System.Text.StringBuilder})">
            <summary>
            Write to the log
            </summary>
            <param name="logDelegate">Log writing delegate</param>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultTraceLog.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Nancy.Diagnostics.DescriptionAttribute">
            <summary>
            Attribute for specifying Method and Property descriptions.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Nancy.Diagnostics.DescriptionAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value> The description. </value>
        </member>
        <member name="M:Nancy.Diagnostics.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.DescriptionAttribute"/> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="T:Nancy.Diagnostics.DiagnosticModule">
            <summary>
            Abstract base class for Nancy diagnostics module.
            </summary>
            <seealso cref="T:Nancy.NancyModule" />
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticModule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.DiagnosticModule"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticModule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.DiagnosticModule"/> class, with
            the provided <paramref name="basePath"/>.
            </summary>
            <param name="basePath">The base path.</param>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticModule.View">
            <summary>
            Renders a view from inside a route handler.
            </summary>
            <value>  A <see cref="T:Nancy.ViewRenderer" /> instance that is used to determine which view that should be rendered. </value>
        </member>
        <member name="T:Nancy.Diagnostics.DiagnosticsConfiguration">
            <summary>
            Configuration for the diagnostics dashboard.
            </summary>
        </member>
        <member name="F:Nancy.Diagnostics.DiagnosticsConfiguration.Default">
            <summary>
            A default instance of the <see cref="T:Nancy.Diagnostics.DiagnosticsConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsConfiguration.#ctor(System.Boolean,System.String,System.String,System.String,System.Int32,Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.DiagnosticsConfiguration"/> class
            </summary>
            <param name="enabled"></param>
            <param name="password">Password used to secure the dashboard.</param>
            <param name="path">Relative path of the dashboard.</param>
            <param name="cookieName">Name of the cookie to store diagnostics information.</param>
            <param name="slidingTimeout">Number of minutes that expiry of the diagnostics dashboard.</param>
            <param name="cryptographyConfiguration">Cryptography config to use for securing the dashboard.</param>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsConfiguration.CookieName">
            <summary>
            Gets or sets the name of the cookie used by the diagnostics dashboard.
            </summary>
            <remarks>The default is __ncd</remarks>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsConfiguration.CryptographyConfiguration">
            <summary>
            Gets the cryptography config to use for securing the diagnostics dashboard
            </summary>
            <remarks>The default is <see cref="P:Nancy.Cryptography.CryptographyConfiguration.Default"/></remarks>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsConfiguration.Enabled">
            <summary>
            Gets a value indicating if diagnostics is enabled or not.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsConfiguration.Password">
            <summary>
            Gets password for accessing the diagnostics screen.
            </summary>
            <remarks>The default value is <see langword="null" />.</remarks>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsConfiguration.Path">
            <summary>
            Gets the path that the diagnostics dashboard will be accessible on.
            </summary>
            <remarks>The default is /_Nancy.</remarks>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsConfiguration.SlidingTimeout">
            <summary>
            The number of minutes that expiry of the diagnostics dashboard. Will be extended each time it is used.
            </summary>
            <remarks>The default is 15 minutes.</remarks>
        </member>
        <member name="T:Nancy.Diagnostics.DiagnosticsConfigurationExtensions">
            <summary>
            Contains <see cref="T:Nancy.Diagnostics.DiagnosticsConfiguration"/> configuration extensions for <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsConfigurationExtensions.Diagnostics(Nancy.Configuration.INancyEnvironment,System.String,System.String,System.String,System.Int32,Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Configures diagnostics.
            </summary>
            <param name="environment"><see cref="T:Nancy.Configuration.INancyEnvironment"/> that should be configured.</param>
            <param name="password">Password used to secure the dashboard.</param>
            <param name="path">Relative path of the dashboard.</param>
            <param name="cookieName">Name of the cookie to store diagnostics information.</param>
            <param name="slidingTimeout">Number of minutes that expiry of the diagnostics dashboard.</param>
            <param name="cryptographyConfiguration">Cryptography config to use for securing the dashboard.</param>
            <remarks>This will implicitly enable diagnostics. If you need control, please explicitly set enabled to either <see langword="true"/> or <see langword="false"/>.</remarks>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsConfigurationExtensions.Diagnostics(Nancy.Configuration.INancyEnvironment,System.Boolean,System.String,System.String,System.String,System.Int32,Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Configures diagnostics.
            </summary>
            <param name="environment"><see cref="T:Nancy.Configuration.INancyEnvironment"/> that should be configured.</param>
            <param name="enabled"><see langword="true"/> if diagnostics should be enabled, otherwise <see langword="false"/>.</param>
            <param name="password">Password used to secure the dashboard.</param>
            <param name="path">Relative path of the dashboard.</param>
            <param name="cookieName">Name of the cookie to store diagnostics information.</param>
            <param name="slidingTimeout">Number of minutes that expiry of the diagnostics dashboard.</param>
            <param name="cryptographyConfiguration">Cryptography config to use for securing the dashboard.</param>
        </member>
        <member name="T:Nancy.Diagnostics.DiagnosticsHook">
            <summary>
            Pipeline hook to handle diagnostics dashboard requests.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsHook.Enable(Nancy.Bootstrapper.IPipelines,System.Collections.Generic.IEnumerable{Nancy.Diagnostics.IDiagnosticsProvider},Nancy.IRootPathProvider,Nancy.Diagnostics.IRequestTracing,Nancy.Bootstrapper.NancyInternalConfiguration,Nancy.ModelBinding.IModelBinderLocator,System.Collections.Generic.IEnumerable{Nancy.Responses.Negotiation.IResponseProcessor},System.Collections.Generic.IEnumerable{Nancy.Routing.Constraints.IRouteSegmentConstraint},Nancy.Culture.ICultureService,Nancy.Diagnostics.IRequestTraceFactory,System.Collections.Generic.IEnumerable{Nancy.Routing.IRouteMetadataProvider},Nancy.Localization.ITextResource,Nancy.Configuration.INancyEnvironment,Nancy.ITypeCatalog,Nancy.IAssemblyCatalog,Nancy.Conventions.AcceptHeaderCoercionConventions)">
            <summary>
            Enables the diagnostics dashboard and will intercept all requests that are passed to
            the condigured paths.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsHook.GetDiagnosticsEnvironment">
            <summary>
            Gets a special <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance that is separate from the
            one used by the application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsHook.Disable(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Disables the specified pipelines.
            <seealso cref="T:Nancy.Bootstrapper.IPipelines"/>
            </summary>
            <param name="pipelines">The pipelines.</param>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsModuleBuilder.BuildModule(Nancy.INancyModule,Nancy.NancyContext)">
            <summary>
            Builds a fully configured <see cref="T:Nancy.INancyModule"/> instance, based upon the provided <paramref name="module"/>.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> that should be configured.</param>
            <param name="context">The current request context.</param>
            <returns>A fully configured <see cref="T:Nancy.INancyModule"/> instance.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsModuleCatalog.GetAllModules(Nancy.NancyContext)">
            <summary>
            Get all NancyModule implementation instances - should be per-request lifetime
            </summary>
            <param name="context">The current context</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.INancyModule"/> instances.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsModuleCatalog.GetModule(System.Type,Nancy.NancyContext)">
            <summary>
            Retrieves a specific <see cref="T:Nancy.INancyModule"/> implementation - should be per-request lifetime
            </summary>
            <param name="moduleType">Module type</param>
            <param name="context">The current context</param>
            <returns>The <see cref="T:Nancy.INancyModule"/> instance</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsSerializerFactory.GetSerializer(Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Gets the <see cref="T:Nancy.ISerializer"/> implementation that can serialize the provided <paramref name="mediaRange"/>.
            </summary>
            <param name="mediaRange">The <see cref="T:Nancy.Responses.Negotiation.MediaRange"/> to get a serializer for.</param>
            <returns>An <see cref="T:Nancy.ISerializer"/> instance, or <see langword="null" /> if not match was found.</returns>
        </member>
        <member name="T:Nancy.Diagnostics.DiagnosticsSession">
            <summary>
            Stores the http session information for diagnostics.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsSession.Hash">
            <summary>
            Gets or sets the hash.
            </summary>
            <value>The (salted) SHA256 hash.</value>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsSession.Salt">
            <summary>
            Gets or sets the salt.
            </summary>
            <value>The salt for the hash value.</value>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsSession.Expiry">
            <summary>
            Gets or sets the expiry.
            </summary>
            <value>The time when the session will be expired.</value>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsSession.GenerateRandomSalt">
            <summary>
            Generates a random salt.
            </summary>
            <returns>A byte array representing the random salt.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsSession.GenerateSaltedHash(System.Byte[],System.Byte[])">
            <summary>
            Generates the salted hash of a byte array.
            </summary>
            <param name="plainText">The plain text as <see cref="T:System.Byte"/> array.</param>
            <param name="salt">The salt as <see cref="T:System.Byte"/> array.</param>
            <returns>A byte array representing the salted hash.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsSession.GenerateSaltedHash(System.String,System.Byte[])">
            <summary>
            Generates the salted hash of a <see cref="T:System.String"/>.
            </summary>
            <param name="plainText">The plain text as <see cref="T:System.String"/></param>
            <param name="salt">The salt as <see cref="T:System.Byte"/> array.</param>
            <returns>A byte array representing the salted hash.</returns>
        </member>
        <member name="T:Nancy.Diagnostics.DiagnosticsViewRenderer">
            <summary>
            Renders diagnostics views from embedded resources.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsViewRenderer.#ctor(Nancy.NancyContext,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Creates a new instance of the <see cref="T:Nancy.Diagnostics.DiagnosticsViewRenderer"/> class.
            </summary>
            <param name="context">A <see cref="T:Nancy.NancyContext"/> instance.</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsViewRenderer.Item(System.String)">
            <summary>
            Renders the diagnostics view with the provided <paramref name="name"/>.
            </summary>
            <param name="name">The name of the view to render.</param>
            <returns>A <see cref="T:Nancy.Response"/> of the rendered view.</returns>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsViewRenderer.Item(System.String,System.Object)">
            <summary>
            Renders the diagnostics view with the provided <paramref name="name"/> and <paramref name="model"/>.
            </summary>
            <param name="name">The name of the view to render.</param>
            <param name="model">The model that should be passed to the view engine during rendering.</param>
            <returns>A <see cref="T:Nancy.Response"/> of the rendered view.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsViewRenderer.DiagnosticsViewResolver.GetViewLocation(System.String,System.Object,Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Locates a view based on the provided information.
            </summary>
            <param name="viewName">The name of the view to locate.</param>
            <param name="model">The model that will be used with the view.</param>
            <param name="viewLocationContext">A <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> instance, containing information about the context for which the view is being located.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be found, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:Nancy.Diagnostics.DisabledDiagnostics">
            <summary>
            Implementation of the <see cref="T:Nancy.Diagnostics.IDiagnostics"/> interface that does nothing.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DisabledDiagnostics.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Initialise diagnostics
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.Diagnostics.IDiagnostics">
            <summary>
            Defines the functionality for Nancy diagnostics.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.IDiagnostics.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Initializes diagnostics
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.Diagnostics.IDiagnosticsProvider">
            <summary>
            Defines the functionality a diagnostics provider.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.IDiagnosticsProvider.Name">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the provider.</value>
        </member>
        <member name="P:Nancy.Diagnostics.IDiagnosticsProvider.Description">
            <summary>
            Gets the description of the provider.
            </summary>
            <value>A <see cref="T:System.String"/> containing the description of the provider.</value>
        </member>
        <member name="P:Nancy.Diagnostics.IDiagnosticsProvider.DiagnosticObject">
            <summary>
            Gets the object that contains the interactive diagnostics methods.
            </summary>
            <value>An instance of the interactive diagnostics object.</value>
        </member>
        <member name="T:Nancy.Diagnostics.IInteractiveDiagnostics">
            <summary>
            Defines the functionality for Nancy interactive diagnostics
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.IInteractiveDiagnostics.AvailableDiagnostics">
            <summary>
            Gets the list of available <see cref="T:Nancy.Diagnostics.InteractiveDiagnostic"/>.
            </summary>
            <value>The available diagnostics. <seealso cref="T:Nancy.Diagnostics.InteractiveDiagnostic"/></value>
        </member>
        <member name="M:Nancy.Diagnostics.IInteractiveDiagnostics.ExecuteDiagnostic(Nancy.Diagnostics.InteractiveDiagnosticMethod,System.Object[])">
            <summary>
            Executes the <see cref="T:Nancy.Diagnostics.InteractiveDiagnosticMethod"/>.
            </summary>
            <param name="interactiveDiagnosticMethod">The <see cref="T:Nancy.Diagnostics.InteractiveDiagnosticMethod"/> instance</param>
            <param name="arguments">The <see cref="T:Nancy.Diagnostics.InteractiveDiagnosticMethod"/> arguments.</param>
            <returns>The result of the <see cref="T:Nancy.Diagnostics.InteractiveDiagnosticMethod"/> as <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Nancy.Diagnostics.IInteractiveDiagnostics.GetTemplate(Nancy.Diagnostics.InteractiveDiagnosticMethod)">
            <summary>
            Gets the template.
            </summary>
            <param name="interactiveDiagnosticMethod">The <see cref="T:Nancy.Diagnostics.InteractiveDiagnosticMethod"/> instance</param>
            <returns>The template as <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Nancy.Diagnostics.IInteractiveDiagnostics.GetDiagnostic(System.String)">
            <summary>
            Gets the <see cref="T:Nancy.Diagnostics.InteractiveDiagnostic"/>.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns>The <see cref="T:Nancy.Diagnostics.InteractiveDiagnostic"/> instance.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.IInteractiveDiagnostics.GetMethod(System.String,System.String)">
            <summary>
            Gets the <see cref="T:Nancy.Diagnostics.InteractiveDiagnosticMethod"/>.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="methodName">Name of the method.</param>
            <returns>The <see cref="T:Nancy.Diagnostics.InteractiveDiagnosticMethod"/> instance</returns>
        </member>
        <member name="T:Nancy.Diagnostics.InteractiveDiagnostic">
            <summary>
            An interactive diagnostic instance.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.InteractiveDiagnostic.Name">
            <summary>
            Gets or sets the diagnostic name.
            </summary>
            <value>The name of the diagnostic</value>
        </member>
        <member name="P:Nancy.Diagnostics.InteractiveDiagnostic.Description">
            <summary>
            Gets or sets the diagnostic description.
            </summary>
            <value>The description of the diagnostic.</value>
        </member>
        <member name="P:Nancy.Diagnostics.InteractiveDiagnostic.Methods">
            <summary>
            Gets or sets the diagnostic methods.
            </summary>
            <value>The collection of diagnostic methods.</value>
        </member>
        <member name="T:Nancy.Diagnostics.InteractiveDiagnosticMethod">
            <summary>
            Defines an interactive diagnostic method.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.InteractiveDiagnosticMethod.ParentDiagnosticObject">
            <summary>
            Gets the parent diagnostic object.
            </summary>
            <value>The parent diagnostic object.</value>
        </member>
        <member name="P:Nancy.Diagnostics.InteractiveDiagnosticMethod.ReturnType">
            <summary>
            Gets the return type
            </summary>
            <value>The type of the method return type</value>
        </member>
        <member name="P:Nancy.Diagnostics.InteractiveDiagnosticMethod.MethodName">
            <summary>
            Gets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Nancy.Diagnostics.InteractiveDiagnosticMethod.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description of the method.</value>
        </member>
        <member name="P:Nancy.Diagnostics.InteractiveDiagnosticMethod.Arguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>The arguments for the method.</value>
        </member>
        <member name="M:Nancy.Diagnostics.InteractiveDiagnosticMethod.#ctor(System.Object,System.Type,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Type}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.InteractiveDiagnosticMethod"/> class, with
            the provided <paramref name="parentDiagnostic"/>, <paramref name="returnType"/>, 
            <paramref name="methodName"/>, <paramref name="arguments"/> and <paramref name="description"/>.
            </summary>
            <param name="parentDiagnostic">The parent diagnostic.</param>
            <param name="returnType">Type of the return.</param>
            <param name="methodName">Name of the method.</param>
            <param name="arguments">The arguments.</param>
            <param name="description">The description.</param>
        </member>
        <member name="T:Nancy.Diagnostics.InteractiveDiagnostics">
            <summary>
            Handles interactive diagnostic instances.
            </summary>
            <seealso cref="T:Nancy.Diagnostics.IInteractiveDiagnostics" />
        </member>
        <member name="P:Nancy.Diagnostics.InteractiveDiagnostics.AvailableDiagnostics">
            <summary>
            Gets the list of available diagnostics.
            </summary>
            <value>The available diagnostics.</value>
        </member>
        <member name="M:Nancy.Diagnostics.InteractiveDiagnostics.#ctor(System.Collections.Generic.IEnumerable{Nancy.Diagnostics.IDiagnosticsProvider})">
            <summary>
            Initializes an <see cref="T:Nancy.Diagnostics.InteractiveDiagnostics"/> class of <see cref="T:Nancy.Diagnostics.IDiagnosticsProvider"/> instances.
            </summary>
            <param name="providers">The providers.</param>
        </member>
        <member name="M:Nancy.Diagnostics.InteractiveDiagnostics.ExecuteDiagnostic(Nancy.Diagnostics.InteractiveDiagnosticMethod,System.Object[])">
            <summary>
            Executes the diagnostic.
            </summary>
            <param name="interactiveDiagnosticMethod">The interactive diagnostic method.</param>
            <param name="arguments">The arguments.</param>
            <returns>The result of the <see cref="T:Nancy.Diagnostics.InteractiveDiagnosticMethod"/> as <see cref="T:System.Object"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Nancy.Diagnostics.InteractiveDiagnostics.GetTemplate(Nancy.Diagnostics.InteractiveDiagnosticMethod)">
            <summary>
            Gets the template for an interactive diagnostic method instance.
            </summary>
            <param name="interactiveDiagnosticMethod">The interactive diagnostic method.</param>
            <returns>The template as <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Nancy.Diagnostics.InteractiveDiagnostics.GetDiagnostic(System.String)">
            <summary>
            Gets the diagnostic for a provider.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns>The <see cref="T:Nancy.Diagnostics.InteractiveDiagnostic"/> instance.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.InteractiveDiagnostics.GetMethod(System.String,System.String)">
            <summary>
            Gets the method instance for a method name and provider.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="methodName">Name of the method.</param>
            <returns>The <see cref="T:Nancy.Diagnostics.InteractiveDiagnosticMethod"/> instance</returns>
        </member>
        <member name="T:Nancy.Diagnostics.IRequestTrace">
            <summary>
            Defines the functionality for tracing a request.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.IRequestTrace.Items">
            <summary>
            Gets or sets the generic item store.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the items.</value>
        </member>
        <member name="P:Nancy.Diagnostics.IRequestTrace.RequestData">
            <summary>
            Gets or sets the information about the request.
            </summary>
            <value>An <see cref="P:Nancy.Diagnostics.IRequestTrace.RequestData"/> instance.</value>
        </member>
        <member name="P:Nancy.Diagnostics.IRequestTrace.ResponseData">
            <summary>
            Gets or sets the information about the response.
            </summary>
            <value>An <see cref="P:Nancy.Diagnostics.IRequestTrace.ResponseData"/> instance.</value>
        </member>
        <member name="P:Nancy.Diagnostics.IRequestTrace.TraceLog">
            <summary>
            Gets the trace log.
            </summary>
            <value>A <see cref="T:Nancy.Diagnostics.ITraceLog"/> instance.</value>
        </member>
        <member name="T:Nancy.Diagnostics.IRequestTraceFactory">
            <summary>
            Defines the functionality for creating an <see cref="T:Nancy.Diagnostics.IRequestTrace"/> instance.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.IRequestTraceFactory.Create(Nancy.Request)">
            <summary>
            Creates an <see cref="T:Nancy.Diagnostics.IRequestTrace"/> instance.
            </summary>
            <param name="request">A <see cref="T:Nancy.Request"/> instance.</param>
            <returns>An <see cref="T:Nancy.Diagnostics.IRequestTrace"/> instance.</returns>
        </member>
        <member name="T:Nancy.Diagnostics.IRequestTracing">
            <summary>
            Defines the functionality for request tracing.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.IRequestTracing.AddRequestDiagnosticToSession(System.Guid,Nancy.NancyContext)">
            <summary>
            Adds the <see cref="T:Nancy.Diagnostics.IRequestTrace"/>, of the provided, <see cref="T:Nancy.NancyContext"/> to the trace log.
            </summary>
            <param name="sessionId">The identifier of the trace.</param>
            <param name="context">A <see cref="T:Nancy.NancyContext"/> instance.</param>
        </member>
        <member name="M:Nancy.Diagnostics.IRequestTracing.Clear">
            <summary>
            Clears the trace log.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.IRequestTracing.CreateSession">
            <summary>
            Creates a new trace session.
            </summary>
            <returns>A <see cref="T:System.Guid"/> which represents the identifier of the new trace session.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.IRequestTracing.GetSessions">
            <summary>
            Gets all the available <see cref="T:Nancy.Diagnostics.RequestTraceSession"/> instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nancy.Diagnostics.IRequestTracing.IsValidSessionId(System.Guid)">
            <summary>
            Checks if the provided <paramref name="sessionId"/> is valid or not.
            </summary>
            <param name="sessionId">A <see cref="T:System.Guid"/> representing the session to check.</param>
            <returns><see langword="true"/> if the session is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nancy.Diagnostics.ITraceLog">
            <summary>
            Provides request trace logging.
            Uses a delegate to write to the log, rather than creating strings regardless
            of whether the log is enabled or not.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.ITraceLog.WriteLog(System.Action{System.Text.StringBuilder})">
            <summary>
            Write to the log
            </summary>
            <param name="logDelegate">Log writing delegate</param>
        </member>
        <member name="T:Nancy.Diagnostics.Modules.InfoModule">
            <summary>
            The information module for diagnostics.
            </summary>
            <seealso cref="T:Nancy.Diagnostics.DiagnosticModule" />
        </member>
        <member name="M:Nancy.Diagnostics.Modules.InfoModule.#ctor(Nancy.IRootPathProvider,Nancy.Bootstrapper.NancyInternalConfiguration,Nancy.Configuration.INancyEnvironment,Nancy.ITypeCatalog,Nancy.IAssemblyCatalog)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.Modules.InfoModule"/> class, with
            the provided <paramref name="rootPathProvider"/>, <paramref name="configuration"/>, 
            <paramref name="environment"/>, <paramref name="typeCatalog"/> and <paramref name="assemblyCatalog"/>.
            </summary>
            <param name="rootPathProvider">The root path provider.</param>
            <param name="configuration">The configuration.</param>
            <param name="environment">The environment.</param>
            <param name="typeCatalog">The type catalog.</param>
            <param name="assemblyCatalog">The assembly catalog.</param>
        </member>
        <member name="T:Nancy.Diagnostics.Modules.InteractiveModule">
            <summary>
            Nancy module for interactive diagnostics.
            </summary>
            <seealso cref="T:Nancy.Diagnostics.DiagnosticModule" />
        </member>
        <member name="M:Nancy.Diagnostics.Modules.InteractiveModule.#ctor(Nancy.Diagnostics.IInteractiveDiagnostics)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.Modules.InteractiveModule"/> class, with
            the provided <paramref name="interactiveDiagnostics"/>.
            </summary>
            <param name="interactiveDiagnostics">The interactive diagnostics.</param>
        </member>
        <member name="T:Nancy.Diagnostics.Modules.MainModule">
            <summary>
            Main Nancy module for diagnostics.
            </summary>
            <seealso cref="T:Nancy.Diagnostics.DiagnosticModule" />
        </member>
        <member name="M:Nancy.Diagnostics.Modules.MainModule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.Modules.MainModule"/> class.
            </summary>
        </member>
        <member name="T:Nancy.Diagnostics.Modules.SettingsModule">
            <summary>
            Nancy module for diagnostic settings.
            </summary>
            <seealso cref="T:Nancy.Diagnostics.DiagnosticModule" />
        </member>
        <member name="M:Nancy.Diagnostics.Modules.SettingsModule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.Modules.SettingsModule"/> class.
            </summary>
        </member>
        <member name="T:Nancy.Diagnostics.Modules.SettingsModel">
            <summary>
            Data model for settings.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.Modules.SettingsModel.Name">
            <summary>
            Gets or sets the name for the setting.
            </summary>
            <value>The name of the setting</value>
        </member>
        <member name="P:Nancy.Diagnostics.Modules.SettingsModel.Value">
            <summary>
            Gets or sets the value for this setting.
            </summary>
            <value><see langword="true"/> or <see langword="false"/></value>
        </member>
        <member name="T:Nancy.Diagnostics.Modules.TraceModule">
            <summary>
            Nancy module for request tracing. Part of diagnostics module.
            </summary>
            <seealso cref="T:Nancy.Diagnostics.DiagnosticModule" />
        </member>
        <member name="M:Nancy.Diagnostics.Modules.TraceModule.#ctor(Nancy.Diagnostics.IRequestTracing)">
            <summary>
            Initializes an instance of the <see cref="T:Nancy.Diagnostics.Modules.TraceModule"/> class, with
            the provided <paramref name="sessionProvider"/>.
            </summary>
            <param name="sessionProvider">The session provider.</param>
        </member>
        <member name="T:Nancy.Diagnostics.NullLog">
            <summary>
            Implementation of <see cref="T:Nancy.Diagnostics.ITraceLog"/> that does not log anything.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.NullLog.WriteLog(System.Action{System.Text.StringBuilder})">
            <summary>
            Write to the log
            </summary>
            <param name="logDelegate">Log writing delegate</param>
        </member>
        <member name="M:Nancy.Diagnostics.NullLog.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Nancy.Diagnostics.RequestData">
            <summary>
            Stores request trace information about the request.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.RequestData.ContentType">
            <summary>
            Gets or sets the content type of the request.
            </summary>
            <value>A <see cref="T:Nancy.Responses.Negotiation.MediaRange"/> containing the content type.</value>
        </member>
        <member name="P:Nancy.Diagnostics.RequestData.Headers">
            <summary>
            Gets or sets the headers of the request.
            </summary>
            <value>A <see cref="T:Nancy.RequestHeaders"/> instance containing the headers.</value>
        </member>
        <member name="P:Nancy.Diagnostics.RequestData.Method">
            <summary>
            Gets the HTTP verb of the request.
            </summary>
            <value>A <see cref="T:System.String"/> containing the HTTP verb.</value>
        </member>
        <member name="P:Nancy.Diagnostics.RequestData.Url">
            <summary>
            Gets or sets the <see cref="P:Nancy.Diagnostics.RequestData.Url"/> that was requested.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.RequestData.op_Implicit(Nancy.Request)~Nancy.Diagnostics.RequestData">
            <summary>
            Implicitly casts a <see cref="T:Nancy.Request"/> instance into a <see cref="T:Nancy.Diagnostics.RequestData"/> instance.
            </summary>
            <param name="request">A <see cref="T:Nancy.Request"/> instance.</param>
            <returns>A <see cref="T:Nancy.Diagnostics.RequestData"/> instance.</returns>
        </member>
        <member name="T:Nancy.Diagnostics.RequestTraceSession">
            <summary>
            Holds trace sessions for a request.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.RequestTraceSession.#ctor(System.Guid)">
            <summary>
            Initializes an instance of the <see cref="T:Nancy.Diagnostics.RequestTraceSession"/> class, with
            the provided <paramref name="id"/>.
            </summary>
            <param name="id">The session identifier.</param>
        </member>
        <member name="P:Nancy.Diagnostics.RequestTraceSession.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The session identifier.</value>
        </member>
        <member name="P:Nancy.Diagnostics.RequestTraceSession.RequestTraces">
            <summary>
            Gets the request traces.
            </summary>
            <value>The collection of request traces.</value>
        </member>
        <member name="M:Nancy.Diagnostics.RequestTraceSession.AddRequestTrace(Nancy.Diagnostics.IRequestTrace)">
            <summary>
            Adds a request trace instance to the collection.
            </summary>
            <param name="trace">The trace.</param>
        </member>
        <member name="T:Nancy.Diagnostics.ResponseData">
            <summary>
            Stores request trace information about the response.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.ResponseData.ContentType">
            <summary>
            Gets or sets the content type of the response.
            </summary>
            <value>A <see cref="T:System.String"/> containing the content type.</value>
        </member>
        <member name="P:Nancy.Diagnostics.ResponseData.Headers">
            <summary>
            Gets or sets the headers of the response.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the headers.</value>
        </member>
        <member name="P:Nancy.Diagnostics.ResponseData.StatusCode">
            <summary>
            Gets or sets the <see cref="T:Nancy.HttpStatusCode"/> of the response.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.ResponseData.Type">
            <summary>
            Gets or sets the <see cref="P:Nancy.Diagnostics.ResponseData.Type"/> of the response.
            </summary>
            <value>A <see cref="P:Nancy.Diagnostics.ResponseData.Type"/> instance.</value>
        </member>
        <member name="M:Nancy.Diagnostics.ResponseData.op_Implicit(Nancy.Response)~Nancy.Diagnostics.ResponseData">
            <summary>
            Implicitly casts a <see cref="T:Nancy.Response"/> instance into a <see cref="T:Nancy.Diagnostics.ResponseData"/> instance.
            </summary>
            <param name="response">A <see cref="T:Nancy.Response"/> instance.</param>
            <returns>A <see cref="T:Nancy.Diagnostics.ResponseData"/> instance.</returns>
        </member>
        <member name="T:Nancy.Diagnostics.TemplateAttribute">
            <summary>
            Attribute for defining an HTML template.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Nancy.Diagnostics.TemplateAttribute.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template as <see cref="T:System.String"/>.</value>
        </member>
        <member name="M:Nancy.Diagnostics.TemplateAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.TemplateAttribute"/> class.
            </summary>
            <param name="template">The template as <see cref="T:System.String"/>.</param>
        </member>
        <member name="T:Nancy.Diagnostics.TestingDiagnosticProvider">
            <summary>
            A dummy diagnostic provider for testing purposes.
            </summary>
            <seealso cref="T:Nancy.Diagnostics.IDiagnosticsProvider" />
        </member>
        <member name="M:Nancy.Diagnostics.TestingDiagnosticProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.TestingDiagnosticProvider"/> class.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.TestingDiagnosticProvider.Name">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the provider.</value>
        </member>
        <member name="P:Nancy.Diagnostics.TestingDiagnosticProvider.Description">
            <summary>
            Gets the description of the provider.
            </summary>
            <value>A <see cref="T:System.String"/> containing the description of the provider.</value>
        </member>
        <member name="P:Nancy.Diagnostics.TestingDiagnosticProvider.DiagnosticObject">
            <summary>
            Gets the object that contains the interactive diagnostics methods.
            </summary>
            <value>An instance of the interactive diagnostics object.</value>
        </member>
        <member name="T:Nancy.Diagnostics.TestingDiagnosticProvider.DiagObject">
            <summary>
            Contains dummy diagnostic methods.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.TestingDiagnosticProvider.DiagObject.NoReturnValue">
            <summary>
            Empty return value
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.TestingDiagnosticProvider.DiagObject.StringReturnValue">
            <summary>
            String return value.
            </summary>
            <returns>A dummy <seealso cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.TestingDiagnosticProvider.DiagObject.SayHello(System.String)">
            <summary>
            Returns hello with a given name.
            </summary>
            <param name="name">A name.</param>
            <returns>A dummy <seealso cref="T:System.String"/> value.</returns>
        </member>
        <member name="P:Nancy.Diagnostics.TestingDiagnosticProvider.DiagObject.SayHelloWithAgeTemplate">
            <summary>
            Returns the template for the SayHelloWithAge
            </summary>
            <value>The template for the SayHelloWithAge</value>
        </member>
        <member name="P:Nancy.Diagnostics.TestingDiagnosticProvider.DiagObject.SayHelloWithAgeDescription">
            <summary>
            Returns the description of the SayHelloWithAgeDescription method
            </summary>
            <value>Description for the test method</value>
        </member>
        <member name="M:Nancy.Diagnostics.TestingDiagnosticProvider.DiagObject.SayHelloWithAge(System.String,System.Int32)">
            <summary>
            Simple test method that takes a name and an age and returns a string.
            </summary>
            <param name="myName">A name.</param>
            <param name="myAge">An age.</param>
            <returns>A string with the given name and age.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.TestingDiagnosticProvider.DiagObject.SayHelloWithAge2(System.String,System.Int32)">
            <summary>
            Returns a string with a name and an age using built-in attributes.
            </summary>
            <param name="myName">My name.</param>
            <param name="myAge">My age.</param>
            <returns>A templated string with the given name and age.</returns>
        </member>
        <member name="T:Nancy.DisabledStaticContentProvider">
            <summary>
            A "disabled" static content provider - always returns null
            so no content is served.
            </summary>
        </member>
        <member name="M:Nancy.DisabledStaticContentProvider.GetContent(Nancy.NancyContext)">
            <summary>
            Gets the static content response, if possible.
            </summary>
            <param name="context">Current context</param>
            <returns>Response if serving content, null otherwise</returns>
        </member>
        <member name="T:Nancy.DynamicDictionary">
            <summary>
            A dictionary that supports dynamic access.
            </summary>
        </member>
        <member name="M:Nancy.DynamicDictionary.#ctor">
            <summary>
            Initializes a new istance of the <see cref="T:Nancy.DynamicDictionary"/> class.
            </summary>
        </member>
        <member name="M:Nancy.DynamicDictionary.#ctor(Nancy.GlobalizationConfiguration)">
            <summary>
            Initializes a new istance of the <see cref="T:Nancy.DynamicDictionary"/> class.
            </summary>
            <param name="globalizationConfiguration">A <see cref="T:Nancy.GlobalizationConfiguration"/> instance.</param>
        </member>
        <member name="P:Nancy.DynamicDictionary.Empty">
            <summary>
            Returns an empty dynamic dictionary.
            </summary>
            <value>A <see cref="T:Nancy.DynamicDictionary"/> instance.</value>
        </member>
        <member name="M:Nancy.DynamicDictionary.Create(System.Collections.Generic.IDictionary{System.String,System.Object},Nancy.GlobalizationConfiguration)">
            <summary>
            Creates a dynamic dictionary from an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance, that the dynamic dictionary should be created from.</param>
            <param name="globalizationConfiguration"></param>
            <returns>An <see cref="T:Nancy.DynamicDictionary"/> instance.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param><param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param><param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains dynamic member names.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.GetEnumerator">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains dynamic member names.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A <see cref="T:System.Collections.IEnumerator"/> that contains dynamic member names.</returns>
        </member>
        <member name="P:Nancy.DynamicDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Nancy.DynamicDictionaryValue"/> with the specified name.
            </summary>
            <value>A <see cref="T:Nancy.DynamicDictionaryValue"/> instance containing a value.</value>
        </member>
        <member name="M:Nancy.DynamicDictionary.Equals(Nancy.DynamicDictionary)">
            <summary>
            Indicates whether the current <see cref="T:Nancy.DynamicDictionary"/> is equal to another object of the same type.
            </summary>
            <returns><see langword="true"/> if the current instance is equal to the <paramref name="other"/> parameter; otherwise, <see langword="false"/>.</returns>
            <param name="other">An <see cref="T:Nancy.DynamicDictionary"/> instance to compare with this instance.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <returns> A hash code for this <see cref="T:Nancy.DynamicDictionary"/>, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.Add(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Nancy.DynamicDictionary"/>.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Nancy.DynamicDictionary"/> contains an element with the specified key.
            </summary>
            <returns><see langword="true" /> if the <see cref="T:Nancy.DynamicDictionary"/> contains an element with the key; otherwise, <see langword="false" />.
            </returns>
            <param name="key">The key to locate in the <see cref="T:Nancy.DynamicDictionary"/>.</param>
        </member>
        <member name="P:Nancy.DynamicDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:Nancy.DynamicDictionary"/>.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns><see langword="true" /> if the <see cref="T:Nancy.DynamicDictionary"/> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.Clear">
            <summary>
            Removes all items from the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
        </member>
        <member name="P:Nancy.DynamicDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <returns>The number of elements contained in the <see cref="T:Nancy.DynamicDictionary"/>.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:Nancy.DynamicDictionary"/> contains a specific value.
            </summary>
            <returns><see langword="true" /> if <paramref name="item"/> is found in the <see cref="T:Nancy.DynamicDictionary"/>; otherwise, <see langword="false" />.
            </returns>
            <param name="item">The object to locate in the <see cref="T:Nancy.DynamicDictionary"/>.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Nancy.DynamicDictionary"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the <see cref="T:Nancy.DynamicDictionary"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:Nancy.DynamicDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Nancy.DynamicDictionary"/> is read-only.
            </summary>
            <returns>Always returns <see langword="false" />.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <returns><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</returns>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <returns><see langword="true" /> if <paramref name="item"/> was successfully removed from the <see cref="T:Nancy.DynamicDictionary"/>; otherwise, <see langword="false" />.</returns>
            <param name="item">The object to remove from the <see cref="T:Nancy.DynamicDictionary"/>.</param>
        </member>
        <member name="P:Nancy.DynamicDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:Nancy.DynamicDictionary"/>.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.ToDictionary">
            <summary>
            Gets a typed Dictionary of <see cref="T:Dictionary{String, Object}" /> from <see cref="T:Nancy.DynamicDictionary"/>
            </summary>
            <returns>Gets a typed Dictionary of <see cref="T:Dictionary{String, Object}" /> from <see cref="T:Nancy.DynamicDictionary"/></returns>
        </member>
        <member name="T:Nancy.DynamicDictionaryValue">
            <summary>
            A value that is stored inside a <see cref="T:Nancy.DynamicDictionary"/> instance.
            </summary>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.DynamicDictionaryValue"/> class, with
            the provided <paramref name="value"/>.
            </summary>
            <param name="value">The value to store in the instance</param>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.#ctor(System.Object,Nancy.GlobalizationConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.DynamicDictionaryValue"/> class, with
            the provided <paramref name="value"/> and <paramref name="globalizationConfiguration"/>.
            </summary>
            <param name="value">The value to store in the instance</param>
            <param name="globalizationConfiguration">A <see cref="T:Nancy.GlobalizationConfiguration"/> instance.</param>
        </member>
        <member name="P:Nancy.DynamicDictionaryValue.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><see langword="true"/>  if this instance has value; otherwise, <see langword="false"/> .</value>
            <remarks><see langword="null"/> is considered as not being a value.</remarks>
        </member>
        <member name="P:Nancy.DynamicDictionaryValue.Value">
            <summary>
            Gets the inner value
            </summary>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.Default``1(``0)">
            <summary>
            Returns a default value if Value is null
            </summary>
            <typeparam name="T">When no default value is supplied, required to supply the default type</typeparam>
            <param name="defaultValue">Optional parameter for default value, if not given it returns default of type T</param>
            <returns>If value is not null, value is returned, else default value is returned</returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.TryParse``1(``0)">
            <summary>
            Attempts to convert the value to type of T, failing to do so will return the defaultValue.
            </summary>
            <typeparam name="T">When no default value is supplied, required to supply the default type</typeparam>
            <param name="defaultValue">Optional parameter for default value, if not given it returns default of type T</param>
            <returns>If value is not null, value is returned, else default value is returned</returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Equality(Nancy.DynamicDictionaryValue,System.Object)">
            <summary>
            == operator for <see cref="T:Nancy.DynamicDictionaryValue"/>
            </summary>
            <param name="dynamicValue"><see cref="T:Nancy.DynamicDictionaryValue"/></param>
            <param name="compareValue"><see cref="T:System.Object"/> value to compare to</param>
            <returns><see langword="true"/> if equal,<see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Inequality(Nancy.DynamicDictionaryValue,System.Object)">
            <summary>
            != operator for <see cref="T:Nancy.DynamicDictionaryValue"/>
            </summary>
            <param name="dynamicValue"><see cref="T:Nancy.DynamicDictionaryValue"/></param>
            <param name="compareValue"><see cref="T:System.Object"/> value to compare to</param>
            <returns><see langword="true"/> if not equal,<see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.Equals(Nancy.DynamicDictionaryValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns><see langword="true"/> if the current object is equal to the <paramref name="compareValue"/> parameter; otherwise, <see langword="false"/>.
            </returns>
            <param name="compareValue">An <see cref="T:Nancy.DynamicDictionaryValue"/> to compare with this instance.</param>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Nancy.DynamicDictionaryValue"/>; otherwise, <see langword="false"/>.</returns>
            <param name="compareValue">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Nancy.DynamicDictionaryValue"/>.</param>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current instance.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
            <summary>
            Provides implementation for binary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as addition and multiplication.
            </summary>
            <returns><see langword="true"/>  if the operation is successful; otherwise, <see langword="false"/>. If this method returns <see langword="false"/>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
            <param name="binder">Provides information about the binary operation. The binder.Operation property returns an <see cref="T:System.Linq.Expressions.ExpressionType"/> object. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, binder.Operation returns ExpressionType.Add.</param><param name="arg">The right operand for the binary operation. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, <paramref name="arg"/> is equal to second.</param><param name="result">The result of the binary operation.</param>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <returns><see langword="true"/>  if the operation is successful; otherwise, <see langword="false"/>. If this method returns <see langword="false"/>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param><param name="result">The result of the type conversion operation.</param>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents a <see cref="T:Nancy.DynamicDictionaryValue"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Nullable{System.Boolean}">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Boolean">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Nullable{System.Int32}">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Nullable{System.Guid}">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Guid">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Nullable{System.DateTime}">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.DateTime">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.TimeSpan">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Nullable{System.Int64}">
            <summary>
            Implicit type conversion operator from <see cref="T:Nancy.DynamicDictionaryValue"/> to long?
            </summary>
            <param name="dynamicValue"><see cref="T:Nancy.DynamicDictionaryValue"/></param>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Int64">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Nullable{System.Single}">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Nullable{System.Decimal}">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Decimal">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Nullable{System.Double}">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.op_Implicit(Nancy.DynamicDictionaryValue)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.DynamicDictionaryValue"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="dynamicValue">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that implements this interface.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.String"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="T:System.Type"/> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.
            </returns>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted. </param><param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:Nancy.ErrorHandling.DefaultStatusCodeHandler">
            <summary>
            Default error handler
            </summary>
        </member>
        <member name="M:Nancy.ErrorHandling.DefaultStatusCodeHandler.#ctor(Nancy.Responses.Negotiation.IResponseNegotiator,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ErrorHandling.DefaultStatusCodeHandler"/> type.
            </summary>
            <param name="responseNegotiator">The response negotiator.</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="M:Nancy.ErrorHandling.DefaultStatusCodeHandler.HandlesStatusCode(Nancy.HttpStatusCode,Nancy.NancyContext)">
            <summary>
            Whether the status code is handled
            </summary>
            <param name="statusCode">Status code</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance of the current request.</param>
            <returns>True if handled, false otherwise</returns>
        </member>
        <member name="M:Nancy.ErrorHandling.DefaultStatusCodeHandler.Handle(Nancy.HttpStatusCode,Nancy.NancyContext)">
            <summary>
            Handle the error code
            </summary>
            <param name="statusCode">Status code</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance of the current request.</param>
            <returns>Nancy Response</returns>
        </member>
        <member name="T:Nancy.ErrorHandling.RouteExecutionEarlyExitException">
            <summary>
            Here Be Dragons - Using an exception for flow control to hotwire route execution.
            It can be useful to call a method inside a route definition and have that method
            immediately return a response (such as for authentication). This exception is used
            to allow that flow.
            </summary>
        </member>
        <member name="M:Nancy.ErrorHandling.RouteExecutionEarlyExitException.#ctor(Nancy.Response,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ErrorHandling.RouteExecutionEarlyExitException"/> class.
            </summary>
            <param name="response">
            The response.
            </param>
            <param name="reason">
            The reason for the early exit.
            </param>
        </member>
        <member name="P:Nancy.ErrorHandling.RouteExecutionEarlyExitException.Reason">
            <summary>
            Gets or sets the reason for the early exit
            </summary>
        </member>
        <member name="P:Nancy.ErrorHandling.RouteExecutionEarlyExitException.Response">
            <summary>
            Gets or sets the response
            </summary>
        </member>
        <member name="T:Nancy.ErrorHandling.IStatusCodeHandler">
            <summary>
            Provides informative responses for particular HTTP status codes
            </summary>
        </member>
        <member name="M:Nancy.ErrorHandling.IStatusCodeHandler.HandlesStatusCode(Nancy.HttpStatusCode,Nancy.NancyContext)">
            <summary>
            Check if the error handler can handle errors of the provided status code.
            </summary>
            <param name="statusCode">Status code</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance of the current request.</param>
            <returns>True if handled, false otherwise</returns>
        </member>
        <member name="M:Nancy.ErrorHandling.IStatusCodeHandler.Handle(Nancy.HttpStatusCode,Nancy.NancyContext)">
            <summary>
            Handle the error code
            </summary>
            <param name="statusCode">Status code</param>
            <param name="context">Current context</param>
        </member>
        <member name="T:Nancy.ErrorPipeline">
            <summary>
            A simple pipeline for on-error hooks.
            Hooks will be executed until either a hook returns a response, or every
            hook has been executed.
            Can be implictly cast to/from the on-error hook delegate signature
            (Func NancyContext, Exception, Response) for assigning to NancyEngine or for building
            composite pipelines.
            </summary>
            <seealso>
                <cref>Nancy.NamedPipelineBase{System.Func{Nancy.NancyContext, System.Exception, dynamic}}</cref>
            </seealso>
        </member>
        <member name="M:Nancy.ErrorPipeline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ErrorPipeline"/> class.
            </summary>
        </member>
        <member name="M:Nancy.ErrorPipeline.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ErrorPipeline"/> class, with
            the provided <paramref name="capacity"/>.
            </summary>
            <param name="capacity">The number of pipeline delegates.</param>
        </member>
        <member name="M:Nancy.ErrorPipeline.op_Implicit(Nancy.ErrorPipeline)~System.Func{Nancy.NancyContext,System.Exception,System.Object}">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.ErrorPipeline"/> to <see cref="T:System.Func`3"/>.
            </summary>
            <param name="pipeline">The pipeline.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.ErrorPipeline.op_Implicit(System.Func{Nancy.NancyContext,System.Exception,System.Object})~Nancy.ErrorPipeline">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Func`3"/> to <see cref="T:Nancy.ErrorPipeline"/>.
            </summary>
            <param name="func">The function.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.ErrorPipeline.op_Addition(Nancy.ErrorPipeline,System.Func{Nancy.NancyContext,System.Exception,System.Object})">
            <summary>
            Appends a new func to the ErrorPipeline.
            </summary>
            <param name="pipeline">The pipeline.</param>
            <param name="func">The function.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Nancy.ErrorPipeline.op_Addition(Nancy.ErrorPipeline,Nancy.ErrorPipeline)">
            <summary>
            Appends the items of an ErrorPipeline to the other.
            </summary>
            <param name="pipelineToAddTo">The pipeline to add to.</param>
            <param name="pipelineToAdd">The pipeline to add.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Nancy.ErrorPipeline.Invoke(Nancy.NancyContext,System.Exception)">
            <summary>
            Invoke the pipeline. Each item will be invoked in turn until either an
            item returns a Response, or all items have been invoked.
            </summary>
            <param name="context">
            The current context to pass to the items.
            </param>
            <param name="ex">
            The exception currently being handled by the error pipeline
            </param>
            <returns>
            Response from an item invocation, or null if no response was generated.
            </returns>
        </member>
        <member name="T:Nancy.Extensions.AssemblyExtensions">
            <summary>
            Assembly extension methods
            </summary>
        </member>
        <member name="M:Nancy.Extensions.AssemblyExtensions.SafeGetExportedTypes(System.Reflection.Assembly)">
            <summary>
            Gets exported types from an assembly and catches common errors
            that occur when running under test runners.
            </summary>
            <param name="assembly">Assembly to retrieve from</param>
            <returns>An array of types</returns>
        </member>
        <member name="M:Nancy.Extensions.AssemblyExtensions.IsReferencing(System.Reflection.Assembly,System.Reflection.AssemblyName)">
            <summary>
            Indicates if a given assembly references another which is identified by its name.
            </summary>
            <param name="assembly">The assembly which will be probed.</param>
            <param name="referenceName">The reference assembly name.</param>
            <returns>A boolean value indicating if there is a reference.</returns>
        </member>
        <member name="T:Nancy.Extensions.CollectionExtensions">
            <summary>
            Containing extensions for the collection objects.
            </summary>
        </member>
        <member name="M:Nancy.Extensions.CollectionExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts a <see cref="T:System.Collections.Specialized.NameValueCollection"/> to a <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to convert.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.</returns>
        </member>
        <member name="M:Nancy.Extensions.CollectionExtensions.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance to a <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> instance to convert.</param>
            <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance.</returns>
        </member>
        <member name="M:Nancy.Extensions.CollectionExtensions.Merge(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Merges a collection of <see cref="T:System.Collections.Generic.IDictionary`2"/> instances into a single one.
            </summary>
            <param name="dictionaries">The list of <see cref="T:System.Collections.Generic.IDictionary`2"/> instances to merge.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the keys and values from the other instances.</returns>
        </member>
        <member name="M:Nancy.Extensions.CollectionExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Filters a collection based on a provided key selector.
            </summary>
            <param name="source">The collection filter.</param>
            <param name="keySelector">The predicate to filter by.</param>
            <typeparam name="TSource">The type of the collection to filter.</typeparam>
            <typeparam name="TKey">The type of the key to filter by.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance with the filtered values.</returns>
        </member>
        <member name="T:Nancy.Extensions.ContextExtensions">
            <summary>
            Containing extensions for the <see cref="T:Nancy.NancyContext"/> object
            </summary>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.IsAjaxRequest(Nancy.NancyContext)">
            <summary>
            Ascertains if a request originated from an Ajax request or not.
            </summary>
            <param name="context">The current nancy context</param>
            <returns>True if the request was done using ajax, false otherwise</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.ToFullPath(Nancy.NancyContext,System.String)">
            <summary>
            Expands a path to take into account a base path (if any)
            </summary>
            <param name="context">Nancy context</param>
            <param name="path">Path to expand</param>
            <returns>Expanded path</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.GetRedirect(Nancy.NancyContext,System.String)">
            <summary>
            Returns a redirect response with the redirect path expanded to take into
            account a base path (if any)
            </summary>
            <param name="context">Nancy context</param>
            <param name="path">Path to redirect to</param>
            <returns>Redirect response</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.GetExceptionDetails(Nancy.NancyContext)">
            <summary>
            Retrieves exception details from the context, if any exist
            </summary>
            <param name="context">Nancy context</param>
            <returns>Exception details</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.GetException(Nancy.NancyContext)">
            <summary>
            Get a thrown exception from the context.
            </summary>
            <param name="context">The context.</param>
            <returns>The thrown exception or <c>null</c> if not exception has been thrown.</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.GetException``1(Nancy.NancyContext)">
            <summary>
            Get a thrown exception of the given type from the context.
            </summary>
            <typeparam name="T">The type of exception to get.</typeparam>
            <param name="context">The context.</param>
            <returns>The thrown exception or <c>null</c> if not exception has been thrown.</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.TryGetException(Nancy.NancyContext,System.Exception@)">
            <summary>
            Tries to get a thrown exception from the context.
            </summary>
            <param name="context">The context.</param>
            <param name="exception">The thrown exception.</param>
            <returns><c>true</c> if an exception has been thrown during the request, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.TryGetException``1(Nancy.NancyContext,``0@)">
            <summary>
            Tries to get a thrown exception of the given type from the context.
            </summary>
            <typeparam name="T">The type of exception to get.</typeparam>
            <param name="context">The context.</param>
            <param name="exception">The thrown exception.</param>
            <returns><c>true</c> if an exception of the given type has been thrown during the request, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.WriteTraceLog(Nancy.NancyContext,System.Action{System.Text.StringBuilder})">
            <summary>
            Shortcut extension method for writing trace information
            </summary>
            <param name="context">Nancy context</param>
            <param name="logDelegate">Log delegate</param>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.IsLocalUrl(Nancy.NancyContext,System.String)">
            <summary>
            Returns a boolean indicating whether a given url string is local or not
            </summary>
            <param name="context">Nancy context</param>
            <param name="url">Url string (relative or absolute)</param>
            <returns>True if local, false otherwise</returns>
        </member>
        <member name="T:Nancy.Extensions.MemoryStreamExtensions">
            <summary>
            Extensions for <see cref="T:System.IO.MemoryStream"/>
            </summary>
        </member>
        <member name="M:Nancy.Extensions.MemoryStreamExtensions.GetBufferSegment(System.IO.MemoryStream)">
            <summary>
            Gets the buffer segment.
            </summary>
            <param name="stream">The memory stream.</param>
            <returns>Buffer segment as bytes</returns>
        </member>
        <member name="T:Nancy.Extensions.ModuleExtensions">
            <summary>
            Containing extensions for <see cref="T:Nancy.INancyModule"/> implementations.
            </summary>
        </member>
        <member name="M:Nancy.Extensions.ModuleExtensions.GetModuleName(Nancy.INancyModule)">
            <summary>
            Extracts the friendly name of a Nancy module given its type.
            </summary>
            <param name="module">The module instance</param>
            <returns>A string containing the name of the parameter.</returns>
        </member>
        <member name="M:Nancy.Extensions.ModuleExtensions.RouteExecuting(Nancy.INancyModule)">
            <summary>
            Returns a boolean indicating whether the route is executing, or whether the module is
            being constructed.
            </summary>
            <param name="module">The module instance</param>
            <returns>True if the route is being executed, false if the module is being constructed</returns>
        </member>
        <member name="M:Nancy.Extensions.ModuleExtensions.AddBeforeHookOrExecute(Nancy.INancyModule,System.Func{Nancy.NancyContext,Nancy.Response},System.String)">
            <summary>
            Adds the before delegate to the Before pipeline if the module is not currently executing,
            or executes the delegate directly and returns any response returned if it is.
            Uses <see cref="T:Nancy.ErrorHandling.RouteExecutionEarlyExitException"/>
            </summary>
            <param name="module">Current module</param>
            <param name="beforeDelegate">Delegate to add or execute</param>
            <param name="earlyExitReason">Optional reason for the early exit (if necessary)</param>
        </member>
        <member name="T:Nancy.Extensions.ObjectExtensions">
            <summary>
            Contains extensions to <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Extensions.ObjectExtensions.ToDynamic(System.Object)">
            <summary>
            Convert an object to a dynamic type
            </summary>
            <param name="value">An object to convert to dynamic</param>
            <returns>Returns a dynamic version of the specified type</returns>
        </member>
        <member name="T:Nancy.Extensions.RequestExtensions">
            <summary>
            Containing extensions for the <see cref="T:Nancy.Request"/> object
            </summary>
        </member>
        <member name="M:Nancy.Extensions.RequestExtensions.IsAjaxRequest(Nancy.Request)">
            <summary>
            An extension method making it easy to check if the request was done using ajax
            </summary>
            <param name="request">The request made by client</param>
            <returns><see langword="true" /> if the request was done using ajax, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Nancy.Extensions.RequestExtensions.IsLocal(Nancy.Request)">
            <summary>
            Gets a value indicating whether the request is local.
            </summary>
            <param name="request">The request made by client</param>
            <returns><see langword="true" /> if the request is local, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nancy.Extensions.StreamExtensions">
            <summary>
            Extensions for Stream.
            </summary>
        </member>
        <member name="M:Nancy.Extensions.StreamExtensions.AsString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Gets the request body as a string.
            </summary>
            <param name="stream">The request body stream.</param>
            <param name="encoding">The encoding to use, <see cref="P:System.Text.Encoding.UTF8"/> by default.</param>
            <returns>The request body as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Nancy.Extensions.StringExtensions">
            <summary>
            Containing extensions for the <see cref="T:System.String"/> object.
            </summary>
        </member>
        <member name="F:Nancy.Extensions.StringExtensions.ParameterExpression">
            <summary>
            A regular expression used to manipulate parameterized route segments.
            </summary>
            <value>A <see cref="T:System.Text.RegularExpressions.Regex"/> object.</value>
        </member>
        <member name="M:Nancy.Extensions.StringExtensions.GetParameterDetails(System.String)">
            <summary>
            Extracts information about the parameters in the <paramref name="segment"/>.
            </summary>
            <param name="segment">The segment that the information should be extracted from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, containing <see cref="T:Nancy.Routing.ParameterSegmentInformation"/> instances for the parameters in the segment.</returns>
        </member>
        <member name="M:Nancy.Extensions.StringExtensions.IsParameterized(System.String)">
            <summary>
            Checks if a segment contains any parameters.
            </summary>
            <param name="segment">The segment to check for parameters.</param>
            <returns>true if the segment contains a parameter; otherwise false.</returns>
            <remarks>A parameter is defined as a string which is surrounded by a pair of curly brackets.</remarks>
            <exception cref="T:System.ArgumentException">The provided value for the segment parameter was null or empty.</exception>
        </member>
        <member name="M:Nancy.Extensions.StringExtensions.AsQueryDictionary(System.String)">
            <summary>
            Gets a dynamic dictionary back from a Uri query string
            </summary>
            <param name="queryString">The query string to extract values from</param>
            <returns>A dynamic dictionary containing the query string values</returns>
        </member>
        <member name="M:Nancy.Extensions.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the value from PascalCase to camelCase.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Nancy.Extensions.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Converts the value from camelCase to PascalCase.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Nancy.Extensions.TypeExtensions">
            <summary>
            Containing extensions for the <see cref="T:System.Type"/> object.
            </summary>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.CreateInstance``1(System.Type,System.Boolean)">
            <summary>
            Creates an instance of <paramref name="type"/> and cast it to <typeparamref name="T"/>.
            </summary>
            <param name="type">The type to create an instance of.</param>
            <param name="nonPublic"><see langword="true"/> if a non-public constructor can be used, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.CreateInstance(System.Type,System.Boolean)">
            <summary>
            Creates an instance of <paramref name="type"/>.
            </summary>
            <param name="type">The type to create an instance of.</param>
            <param name="nonPublic"><see langword="true"/> if a non-public constructor can be used, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.GetAssembly(System.Type)">
            <summary>
            returns the assembly that the type belongs to
            </summary>
            <param name="source"></param>
            <returns> The assembly that contains the type </returns>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.IsArray(System.Type)">
            <summary>
            Checks if a type is an array or not
            </summary>
            <param name="source">The type to check.</param>
            <returns><see langword="true" /> if the type is an array, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Determines whether the <paramref name="genericType"/> is assignable from
            <paramref name="givenType"/> taking into account generic definitions
            </summary>
            <remarks>
            Borrowed from: http://tmont.com/blargh/2011/3/determining-if-an-open-generic-type-isassignablefrom-a-type
            </remarks>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.IsCollection(System.Type)">
            <summary>
            Checks if a type is an collection or not
            </summary>
            <param name="source">The type to check.</param>
            <returns><see langword="true" /> if the type is an collection, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Checks if a type is enumerable or not
            </summary>
            <param name="source">The type to check.</param>
            <returns><see langword="true" /> if the type is an enumerable, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.IsNumeric(System.Type)">
            <summary>
            Determines if a type is numeric.  Nullable numeric types are considered numeric.
            </summary>
            <remarks>
            Boolean is not considered numeric.
            </remarks>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.NotOfType``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Filters our all types not assignable to <typeparamref name="TType"/>.
            </summary>
            <typeparam name="TType">The type that all resulting <see cref="T:System.Type"/> should be assignable to.</typeparam>
            <param name="types">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Type"/> instances that should be filtered.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Type"/> instances.</returns>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.GetTypeCode(System.Type)">
            <summary>
            Gets the enum for type code.
            </summary>
            <param name="type">The type.</param>
            <returns>An enum value representing the type code.</returns>
        </member>
        <member name="T:Nancy.ModelValidationResultExtensions">
            <summary>
            Containing extensions for the <see cref="P:Nancy.Validation.ModelValidationResult.Errors"/> property.
            </summary>
        </member>
        <member name="M:Nancy.ModelValidationResultExtensions.Add(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Nancy.Validation.ModelValidationError}},System.String,System.String)">
            <summary>
            Adds a new <see cref="T:Nancy.Validation.ModelValidationError"/> to the validation results.
            </summary>
            <param name="errors">A reference to the <see cref="P:Nancy.Validation.ModelValidationResult.Errors"/> property.</param>
            <param name="name">The name of the property.</param>
            <param name="errorMessage">The validation error message.</param>
            <returns>A reference to the <see cref="P:Nancy.Validation.ModelValidationResult.Errors"/> property.</returns>
        </member>
        <member name="T:Nancy.FormatterExtensions">
            <summary>
            Various extensions to return different responses form a <see cref="T:Nancy.NancyModule"/>.
            </summary>
        </member>
        <member name="M:Nancy.FormatterExtensions.AsFile(Nancy.IResponseFormatter,System.String,System.String)">
            <summary>
            Sends the file at <paramref name="applicationRelativeFilePath"/> to the
            agent, using <paramref name="contentType"/> for the <c>Content-Type</c> header.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="applicationRelativeFilePath">The application relative file path.</param>
            <param name="contentType">Value for the <c>Content-Type</c> header.</param>
        </member>
        <member name="M:Nancy.FormatterExtensions.AsFile(Nancy.IResponseFormatter,System.String)">
            <summary>
            Sends the file at <paramref name="applicationRelativeFilePath"/> to the
            agent, using the file extension and <see cref="M:Nancy.MimeTypes.GetMimeType(System.String)"/>
            to determine the <c>Content-Type</c> header.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="applicationRelativeFilePath">The application relative file path.</param>
        </member>
        <member name="M:Nancy.FormatterExtensions.AsText(Nancy.IResponseFormatter,System.String,System.String,System.Text.Encoding)">
            <summary>
            Returns the <paramref name="contents"/> string to the
            agent, using <paramref name="contentType"/> and <paramref name="encoding"/>
            for the <c>Content-Type</c> header.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="contents">The contents of the response.</param>
            <param name="contentType">Value for the <c>Content-Type</c> header.</param>
            <param name="encoding">The encoding to use.</param>
        </member>
        <member name="M:Nancy.FormatterExtensions.AsText(Nancy.IResponseFormatter,System.String,System.Text.Encoding)">
            <summary>
            Returns the <paramref name="contents"/> string to the
            agent, using <c>text/plain</c> and <paramref name="encoding"/>
            for the <c>Content-Type</c> header.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="contents">The contents of the response.</param>
            <param name="encoding">The encoding to use.</param>
        </member>
        <member name="M:Nancy.FormatterExtensions.AsText(Nancy.IResponseFormatter,System.String,System.String)">
            <summary>
            Returns the <paramref name="contents"/> string to the
            agent, using <paramref name="contentType"/> for the <c>Content-Type</c> header.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="contents">The contents of the response.</param>
            <param name="contentType">Value for the <c>Content-Type</c> header.</param>
        </member>
        <member name="M:Nancy.FormatterExtensions.AsText(Nancy.IResponseFormatter,System.String)">
            <summary>
            Returns the <paramref name="contents"/> string as a <c>text/plain</c> response to the agent.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="contents">The contents of the response.</param>
        </member>
        <member name="M:Nancy.FormatterExtensions.AsJson``1(Nancy.IResponseFormatter,``0,Nancy.HttpStatusCode)">
            <summary>
            Serializes the <paramref name="model"/> to JSON and returns it to the
            agent, optionally using the <paramref name="statusCode"/>.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="formatter">The formatter.</param>
            <param name="model">The model to serialize.</param>
            <param name="statusCode">The HTTP status code. Defaults to <see cref="F:Nancy.HttpStatusCode.OK"/>.</param>
        </member>
        <member name="M:Nancy.FormatterExtensions.AsRedirect(Nancy.IResponseFormatter,System.String,Nancy.Responses.RedirectResponse.RedirectType)">
            <summary>
            Returns a redirect response to the agent.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="location">The location to redirect to.</param>
            <param name="type">The redirect type. See <see cref="T:Nancy.Responses.RedirectResponse.RedirectType"/>.</param>
        </member>
        <member name="M:Nancy.FormatterExtensions.AsXml``1(Nancy.IResponseFormatter,``0,Nancy.HttpStatusCode)">
            <summary>
            Serializes the <paramref name="model"/> to XML and returns it to the
            agent, optionally using the <paramref name="statusCode"/>.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="formatter">The formatter.</param>
            <param name="model">The model to serialize.</param>
            <param name="statusCode">The HTTP status code. Defaults to <see cref="F:Nancy.HttpStatusCode.OK"/>.</param>
        </member>
        <member name="M:Nancy.FormatterExtensions.FromStream(Nancy.IResponseFormatter,System.IO.Stream,System.String)">
            <summary>
            Writes the data from the given <paramref name="stream"/> to the
            agent, using <paramref name="contentType"/> for the <c>Content-Type</c> header.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="stream">The stream to copy from.</param>
            <param name="contentType">Value for the <c>Content-Type</c> header.</param>
        </member>
        <member name="M:Nancy.FormatterExtensions.FromStream(Nancy.IResponseFormatter,System.Func{System.IO.Stream},System.String)">
            <summary>
            Invokes the given <paramref name="streamDelegate"/> to write the stream data to the
            agent, using <paramref name="contentType"/> for the <c>Content-Type</c> header.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="streamDelegate">A delegate returning a stream to copy from.</param>
            <param name="contentType">Value for the <c>Content-Type</c> header.</param>
        </member>
        <member name="T:Nancy.GlobalizationConfiguration">
            <summary>
            Globalization configuration
            </summary>
        </member>
        <member name="F:Nancy.GlobalizationConfiguration.Default">
            <summary>
            A default instance of the <see cref="T:Nancy.GlobalizationConfiguration"/> class
            </summary>
        </member>
        <member name="M:Nancy.GlobalizationConfiguration.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Globalization.DateTimeStyles})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.GlobalizationConfiguration"/> class
            </summary>
            <param name="supportedCultureNames">An array of supported cultures</param>
            <param name="defaultCulture">The default culture of the application</param>
            <param name="dateTimeStyles">The <see cref="P:Nancy.GlobalizationConfiguration.DateTimeStyles"/> that should be used for date parsing.</param>
        </member>
        <member name="P:Nancy.GlobalizationConfiguration.DateTimeStyles">
            <summary>
            The <see cref="P:Nancy.GlobalizationConfiguration.DateTimeStyles"/> that should be used for date parsing.
            </summary>
        </member>
        <member name="P:Nancy.GlobalizationConfiguration.DefaultCulture">
            <summary>
            The default culture for the application
            </summary>
        </member>
        <member name="P:Nancy.GlobalizationConfiguration.SupportedCultureNames">
            <summary>
            A set of supported cultures
            </summary>
        </member>
        <member name="T:Nancy.GlobalizationConfigurationExtensions">
            <summary>
            Contains <see cref="T:Nancy.GlobalizationConfiguration"/> configuration extensions for <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
        </member>
        <member name="M:Nancy.GlobalizationConfigurationExtensions.Globalization(Nancy.Configuration.INancyEnvironment,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Globalization.DateTimeStyles})">
            <summary>
            Configures <see cref="T:Nancy.GlobalizationConfiguration"/>
            </summary>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> that should be configured.</param>
            <param name="supportedCultureNames">Cultures that the application can accept</param>
            <param name="defaultCulture">Used to set a default culture for the application</param>
            <param name="dateTimeStyles">The <see cref="T:System.Globalization.DateTimeStyles"/> that should be used for date parsing.</param>
            <remarks>If defaultCulture not specified the first supported culture is used</remarks>
        </member>
        <member name="T:Nancy.HeadResponse">
            <summary>
            Represents a HEAD only response.
            </summary>
        </member>
        <member name="M:Nancy.HeadResponse.#ctor(Nancy.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HeadResponse"/> class, with
            the provided <paramref name="response"/>.
            </summary>
            <param name="response">
            The full response to create the head response from.
            </param>
        </member>
        <member name="M:Nancy.HeadResponse.PreExecute(Nancy.NancyContext)">
            <summary>
            Executes at the end of the nancy execution pipeline and before control is passed back to the hosting.
            Can be used to pre-render/validate views while still inside the main pipeline/error handling.
            </summary>
            <param name="context">Nancy context</param>
            <returns>
            Task for completion/erroring
            </returns>
        </member>
        <member name="T:Nancy.Helpers.CacheHelpers">
            <summary>
            Helper class for caching related functions
            </summary>
        </member>
        <member name="M:Nancy.Helpers.CacheHelpers.ReturnNotModified(System.String,System.Nullable{System.DateTime},Nancy.NancyContext)">
            <summary>
            Returns whether to return a not modified response, based on the etag and last modified date
            of the resource, and the current nancy context
            </summary>
            <param name="etag">Current resource etag, or null</param>
            <param name="lastModified">Current resource last modified, or null</param>
            <param name="context">Current nancy context</param>
            <returns>True if not modified should be sent, false otherwise</returns>
        </member>
        <member name="M:Nancy.Helpers.HttpUtility.HtmlDecode(System.String)">
            <summary>
            Decodes an HTML-encoded string and returns the decoded string.
            </summary>
            <param name="s">The HTML string to decode. </param>
            <returns>The decoded text.</returns>
        </member>
        <member name="M:Nancy.Helpers.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Decodes an HTML-encoded string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The HTML string to decode</param>
            <param name="output">The TextWriter output stream containing the decoded string. </param>
        </member>
        <member name="M:Nancy.Helpers.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            HTML-encodes a string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The string to encode. </param>
            <param name="output">The TextWriter output stream containing the encoded string. </param>
        </member>
        <member name="T:Nancy.Helpers.ProxyNancyReferenceProber">
            <summary>
            Utility class used to probe assembly references.
            </summary>
            <remarks>
            Because this class inherits from <see cref="T:System.MarshalByRefObject"/> it can be used across different <see cref="T:System.AppDomain"/>.
            </remarks>
        </member>
        <member name="M:Nancy.Helpers.ProxyNancyReferenceProber.HasReference(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
            <summary>
            Determines if the assembly has a reference (dependency) upon another one.
            </summary>
            <param name="assemblyNameForProbing">The name of the assembly that will be tested.</param>
            <param name="referenceAssemblyName">The reference assembly name.</param>
            <returns>A boolean value indicating if there is a reference.</returns>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.GetTypedListItemType(System.Type)">
            <summary>
            Gets the type of the typed list's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed list's items.</returns>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Nancy.Helpers.TaskHelpers">
            <summary>
            Convenience class with helper methods for <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="F:Nancy.Helpers.TaskHelpers.CompletedTask">
            <summary>
            The completed task
            </summary>
        </member>
        <member name="M:Nancy.Helpers.TaskHelpers.GetFaultedTask``1(System.Exception)">
            <summary>
            Gets the faulted task.
            </summary>
            <typeparam name="T">Type for <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/></typeparam>
            <param name="exception">The exception.</param>
            <returns>The faulted <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="T:Nancy.HttpFile">
            <summary>
            Represents a file that was captured in a HTTP multipart/form-data request
            </summary>
        </member>
        <member name="M:Nancy.HttpFile.#ctor(Nancy.HttpMultipartBoundary)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpFile"/> class,
            using the provided <paramref name="boundary"/>.
            </summary>
            <param name="boundary">The <see cref="T:Nancy.HttpMultipartBoundary"/> that contains the file information.</param>
        </member>
        <member name="M:Nancy.HttpFile.#ctor(System.String,System.String,System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpFile"/> class,
            using the provided values
            </summary>
            <paramref name="contentType">The content type of the file.</paramref>
            <paramref name="name">The name of the file.</paramref>
            <paramref name="value">The content of the file.</paramref>
            <paramref name="key">The name of the field that uploaded the file.</paramref>
        </member>
        <member name="P:Nancy.HttpFile.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>A <see cref="T:System.String"/> containing the content type of the file.</value>
        </member>
        <member name="P:Nancy.HttpFile.Name">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the file.</value>
        </member>
        <member name="P:Nancy.HttpFile.Key">
            <summary>
            Gets or sets the form element name of this file.
            </summary>
            <value>A <see cref="T:System.String"/> containing the key.</value>
        </member>
        <member name="P:Nancy.HttpFile.Value">
            <summary>
            Gets or sets the value stream.
            </summary>
            <value>A <see cref="T:System.IO.Stream"/> containing the contents of the file.</value>
            <remarks>This is a <see cref="T:Nancy.HttpMultipartSubStream"/> instance that sits ontop of the request stream.</remarks>
        </member>
        <member name="T:Nancy.HttpLink">
            <summary>
            Represents one of possibly many RFC 5988 HTTP Links contained in a <see cref="T:Nancy.HttpLinkBuilder"/>.
            </summary>
        </member>
        <member name="M:Nancy.HttpLink.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpLink" /> class.
            </summary>
            <param name="targetUri">The target URI of the link.</param>
            <param name="relation">The relation that identifies the semantics of the link.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> or <paramref name="relation" /></exception>
        </member>
        <member name="M:Nancy.HttpLink.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpLink" /> class.
            </summary>
            <param name="targetUri">The target URI of the link.</param>
            <param name="relation">The relation that identifies the semantics of the link.</param>
            <param name="type">The optional type parameter is a hint indicating what the media type of the result of dereferencing the link should be. Note that this is only a hint; for example, it does not override the HTTP Content-Type header of a HTTP response obtained by actually following the link.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> or <paramref name="relation" /></exception>
        </member>
        <member name="M:Nancy.HttpLink.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpLink" /> class.
            </summary>
            <param name="targetUri">The target URI of the link.</param>
            <param name="relation">The relation that identifies the semantics of the link.</param>
            <param name="type">The optional type parameter is a hint indicating what the media type of the result of dereferencing the link should be. Note that this is only a hint; for example, it does not override the HTTP Content-Type header of a HTTP response obtained by actually following the link.</param>
            <param name="title">The optional title parameter is used to label the destination of a link such that it can be used as a human-readable identifier (e.g., a menu entry) in the language indicated by the HTTP Content-Language header (if present).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> or <paramref name="relation" /></exception>
        </member>
        <member name="M:Nancy.HttpLink.#ctor(System.Uri,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpLink" /> class.
            </summary>
            <param name="targetUri">The target URI of the link.</param>
            <param name="relation">The relation that identifies the semantics of the link.</param>
            <param name="type">The optional type parameter is a hint indicating what the media type of the result of dereferencing the link should be. Note that this is only a hint; for example, it does not override the HTTP Content-Type header of a HTTP response obtained by actually following the link.</param>
            <param name="title">The optional title parameter is used to label the destination of a link such that it can be used as a human-readable identifier (e.g., a menu entry) in the language indicated by the HTTP Content-Language header (if present).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> or <paramref name="relation" /></exception>
        </member>
        <member name="P:Nancy.HttpLink.Parameters">
            <summary>
            The dictionary of parameters associated with the link.
            </summary>
        </member>
        <member name="P:Nancy.HttpLink.Relation">
            <summary>
            The relation that identifies the semantics of the link.
            </summary>
        </member>
        <member name="P:Nancy.HttpLink.TargetUri">
            <summary>
            Gets the target URI.
            </summary>
        </member>
        <member name="P:Nancy.HttpLink.Title">
            <summary>
            The optional title parameter is used to label the destination of a link such that it can be used as a human-readable identifier (e.g., a menu entry) in the language indicated by the HTTP Content-Language header (if present).
            </summary>
        </member>
        <member name="P:Nancy.HttpLink.Type">
            <summary>
            The optional type parameter is a hint indicating what the media type of the result of dereferencing the link should be. Note that this is only a hint; for example, it does not override the HTTP Content-Type header of a HTTP response obtained by actually following the link.
            </summary>
        </member>
        <member name="M:Nancy.HttpLink.Equals(Nancy.HttpLink)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Nancy.HttpLink.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nancy.HttpLink.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Nancy.HttpLink.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Nancy.HttpLink.ParseUri(System.String)">
            <summary>
            Parses the specified <paramref name="uri"/> string into a <see cref="P:Nancy.HttpLink.TargetUri"/>.
            </summary>
            <param name="uri">The URI string.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">uri</exception>
        </member>
        <member name="T:Nancy.HttpLinkBuilder">
            <summary>
            Builds an RFC 5988 Link HTTP header as a <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:Nancy.HttpLink" /> objects.
            </summary>
            <seealso cref="T:Nancy.HttpLink" />
        </member>
        <member name="M:Nancy.HttpLinkBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpLinkBuilder"/> class.
            </summary>
        </member>
        <member name="M:Nancy.HttpLinkBuilder.Add(System.String)">
            <summary>
            Adds the specified link to the builder.
            </summary>
            <param name="link">The link to add to the builder.</param>
        </member>
        <member name="M:Nancy.HttpLinkBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents an RFC 5988 Link HTTP header.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents an RFC 5988 Link HTTP header.
            </returns>
        </member>
        <member name="T:Nancy.HttpLinkRelation">
            <summary>
            The relation that identifies the semantics of a <see cref="T:Nancy.HttpLink"/> contained in an RFC 5988 Link HTTP header,
            as built by the <see cref="T:Nancy.HttpLinkBuilder"/>.
            </summary>
            <seealso cref="T:System.Uri" />
        </member>
        <member name="F:Nancy.HttpLinkRelation.IanaLinkRelationPrefix">
            <summary>
            The URI prefix to use for IANA registered link relations.
            </summary>
        </member>
        <member name="M:Nancy.HttpLinkRelation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpLinkRelation"/> class.
            </summary>
            <param name="relation">The relation.</param>
        </member>
        <member name="M:Nancy.HttpLinkRelation.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpLinkRelation" /> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Nancy.HttpLinkRelation.Prefix">
            <summary>
            Gets the <see cref="T:System.Uri"/> prefix for the link relation. Will be set to <see cref="F:Nancy.HttpLinkRelation.IanaLinkRelationPrefix"/>
            if the <see cref="P:Nancy.HttpLinkRelation.Value"/> is a relative one.
            </summary>
            <value>
            The <see cref="T:System.Uri"/> prefix for the link relation.
            </value>
        </member>
        <member name="P:Nancy.HttpLinkRelation.Value">
            <summary>
            Gets the link relation value.
            </summary>
            <value>
            The link relation value.
            </value>
        </member>
        <member name="M:Nancy.HttpLinkRelation.Equals(Nancy.HttpLinkRelation)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Nancy.HttpLinkRelation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nancy.HttpLinkRelation.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Nancy.HttpLinkRelation.Parse(System.String)">
            <summary>
            Parses the specified link <paramref name="relation" /> name into an absolute <see cref="T:System.Uri" />.
            Will be prefixed with <see cref="F:Nancy.HttpLinkRelation.IanaLinkRelationPrefix" /> if the <paramref name="relation" /> is
            a relative value.
            </summary>
            <param name="relation">The link relation name.</param>
            <returns>
            A new instance of <see cref="T:Nancy.HttpLinkRelation" /> from the parsed link <paramref name="relation"/> value.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="relation"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="relation"/></exception>
        </member>
        <member name="M:Nancy.HttpLinkRelation.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Nancy.HttpMultipart">
            <summary>
            Retrieves <see cref="T:Nancy.HttpMultipartBoundary"/> instances from a request stream.
            </summary>
        </member>
        <member name="M:Nancy.HttpMultipart.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpMultipart"/> class.
            </summary>
            <param name="requestStream">The request stream to parse.</param>
            <param name="boundary">The boundary marker to look for.</param>
        </member>
        <member name="M:Nancy.HttpMultipart.GetBoundaries">
            <summary>
            Gets the <see cref="T:Nancy.HttpMultipartBoundary"/> instances from the request stream.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the found <see cref="T:Nancy.HttpMultipartBoundary"/> instances.</returns>
        </member>
        <member name="T:Nancy.HttpMultipartBoundary">
            <summary>
            Represents the content boundary of a HTTP multipart/form-data boundary in a stream.
            </summary>
        </member>
        <member name="M:Nancy.HttpMultipartBoundary.#ctor(Nancy.HttpMultipartSubStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpMultipartBoundary"/> class.
            </summary>
            <param name="boundaryStream">The stream that contains the boundary information.</param>
        </member>
        <member name="P:Nancy.HttpMultipartBoundary.ContentType">
            <summary>
            Gets the contents type of the boundary value.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.HttpMultipartBoundary.Filename">
            <summary>
            Gets or the filename for the boundary value.
            </summary>
            <value>A <see cref="T:System.String"/> containing the filename value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
            <remarks>This is the RFC2047 decoded value of the filename attribute of the Content-Disposition header.</remarks>
        </member>
        <member name="P:Nancy.HttpMultipartBoundary.Name">
            <summary>
            Gets name of the boundary value.
            </summary>
            <remarks>This is the RFC2047 decoded value of the name attribute of the Content-Disposition header.</remarks>
        </member>
        <member name="P:Nancy.HttpMultipartBoundary.Value">
            <summary>
            A stream containing the value of the boundary.
            </summary>
            <remarks>This is the RFC2047 decoded value of the Content-Type header.</remarks>
        </member>
        <member name="T:Nancy.HttpMultipartBuffer">
            <summary>
            A buffer that is used to locate a HTTP multipart/form-data boundary in a stream.
            </summary>
        </member>
        <member name="M:Nancy.HttpMultipartBuffer.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpMultipartBuffer"/> class, with
            the provided <paramref name="boundaryAsBytes"/> and <paramref name="closingBoundaryAsBytes"/>.
            </summary>
            <param name="boundaryAsBytes">The boundary as a byte-array.</param>
            <param name="closingBoundaryAsBytes">The closing boundary as byte-array</param>
        </member>
        <member name="P:Nancy.HttpMultipartBuffer.IsBoundary">
            <summary>
            Gets a value indicating whether the buffer contains the same values as the boundary.
            </summary>
            <value><see langword="true"/> if buffer contains the same values as the boundary; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Nancy.HttpMultipartBuffer.IsClosingBoundary">
            <summary>
            Gets a value indicating whether this instance is closing boundary.
            </summary>
            <value>
            <see langword="true"/> if this instance is closing boundary; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Nancy.HttpMultipartBuffer.IsFull">
            <summary>
            Gets a value indicating whether this buffer is full.
            </summary>
            <value><see langword="true"/> if buffer is full; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Nancy.HttpMultipartBuffer.Length">
            <summary>
            Gets the number of bytes that can be stored in the buffer.
            </summary>
            <value>The number of bytes that can be stored in the buffer.</value>
        </member>
        <member name="M:Nancy.HttpMultipartBuffer.Reset">
            <summary>
            Resets the buffer so that inserts happens from the start again.
            </summary>
            <remarks>This does not clear any previously written data, just resets the buffer position to the start. Data that is inserted after Reset has been called will overwrite old data.</remarks>
        </member>
        <member name="M:Nancy.HttpMultipartBuffer.Insert(System.Byte)">
            <summary>
            Inserts the specified value into the buffer and advances the internal position.
            </summary>
            <param name="value">The value to insert into the buffer.</param>
            <remarks>This will throw an <see cref="T:System.ArgumentOutOfRangeException"/> is you attempt to call insert more times then the <see cref="P:Nancy.HttpMultipartBuffer.Length"/> of the buffer and <see cref="M:Nancy.HttpMultipartBuffer.Reset"/> was not invoked.</remarks>
        </member>
        <member name="T:Nancy.HttpMultipartSubStream">
            <summary>
            A decorator stream that sits on top of an existing stream and appears as a unique stream.
            </summary>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpMultipartSubStream"/> class, with
            the provided <paramref name="stream"/>, <paramref name="start"/> and <paramref name="end"/>.
            </summary>
            <param name="stream">The stream to create the sub-stream ontop of.</param>
            <param name="start">The start offset on the parent stream where the sub-stream should begin.</param>
            <param name="end">The end offset on the parent stream where the sub-stream should end.</param>
        </member>
        <member name="P:Nancy.HttpMultipartSubStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns><see langword="true"/> if the stream supports reading; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Nancy.HttpMultipartSubStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns><see langword="true"/> if the stream supports seeking; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Nancy.HttpMultipartSubStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns><see langword="true"/> if the stream supports writing; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Nancy.HttpMultipartSubStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="P:Nancy.HttpMultipartSubStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.PositionStartAtCurrentLocation">
            <summary>
            Sets the position of the stream as the start point.
            </summary>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <remarks>In the <see cref="T:Nancy.HttpMultipartSubStream"/> type this method is implemented as no-op.</remarks>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>The new position within the current stream.</returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <remarks>This will always throw a <see cref="T:System.InvalidOperationException"/> for the <see cref="T:Nancy.HttpMultipartSubStream"/> type.</remarks>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
            <remarks>This will always throw a <see cref="T:System.InvalidOperationException"/> for the <see cref="T:Nancy.HttpMultipartSubStream"/> type.</remarks>
        </member>
        <member name="T:Nancy.HttpStatusCode">
            <summary>
            HTTP Status Codes
            </summary>
            <remarks>The values are based on the list found at http://en.wikipedia.org/wiki/List_of_HTTP_status_codes </remarks>
        </member>
        <member name="F:Nancy.HttpStatusCode.Continue">
            <summary>
            100 Continue
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.SwitchingProtocols">
            <summary>
            101 SwitchingProtocols
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Processing">
            <summary>
            102 Processing
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Checkpoint">
            <summary>
            103 Checkpoint
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.OK">
            <summary>
            200 OK
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Created">
            <summary>
            201 Created
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Accepted">
            <summary>
            202 Accepted
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NonAuthoritativeInformation">
            <summary>
            203 NonAuthoritativeInformation
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NoContent">
            <summary>
            204 NoContent
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ResetContent">
            <summary>
            205 ResetContent
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.PartialContent">
            <summary>
            206 PartialContent
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.MultipleStatus">
            <summary>
            207 MultipleStatus
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.IMUsed">
            <summary>
            226 IMUsed
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.MultipleChoices">
            <summary>
            300 MultipleChoices
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.MovedPermanently">
            <summary>
            301 MovedPermanently
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Found">
            <summary>
            302 Found
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.SeeOther">
            <summary>
            303 SeeOther
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NotModified">
            <summary>
            304 NotModified
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.UseProxy">
            <summary>
            305 UseProxy
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.SwitchProxy">
            <summary>
            306 SwitchProxy
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.TemporaryRedirect">
            <summary>
            307 TemporaryRedirect
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ResumeIncomplete">
            <summary>
            308 ResumeIncomplete
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.BadRequest">
            <summary>
            400 BadRequest
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Unauthorized">
            <summary>
            401 Unauthorized
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.PaymentRequired">
            <summary>
            402 PaymentRequired
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Forbidden">
            <summary>
            403 Forbidden
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NotFound">
            <summary>
            404 NotFound
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.MethodNotAllowed">
            <summary>
            405 MethodNotAllowed
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NotAcceptable">
            <summary>
            406 NotAcceptable
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ProxyAuthenticationRequired">
            <summary>
            407 ProxyAuthenticationRequired
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.RequestTimeout">
            <summary>
            408 RequestTimeout
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Conflict">
            <summary>
            409 Conflict
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Gone">
            <summary>
            410 Gone
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.LengthRequired">
            <summary>
            411 LengthRequired
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.PreconditionFailed">
            <summary>
            412 PreconditionFailed
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.RequestEntityTooLarge">
            <summary>
            413 RequestEntityTooLarge
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.RequestUriTooLong">
            <summary>
            414 RequestUriTooLong
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.UnsupportedMediaType">
            <summary>
            415 UnsupportedMediaType
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.RequestedRangeNotSatisfiable">
            <summary>
            416 RequestedRangeNotSatisfiable
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ExpectationFailed">
            <summary>
            417 ExpectationFailed
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ImATeapot">
            <summary>
            418 ImATeapot
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.EnhanceYourCalm">
            <summary>
            420 Enhance Your Calm
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.UnprocessableEntity">
            <summary>
            422 UnprocessableEntity
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Locked">
            <summary>
            423 Locked
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.FailedDependency">
            <summary>
            424 FailedDependency
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.UnorderedCollection">
            <summary>
            425 UnorderedCollection
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.UpgradeRequired">
            <summary>
            426 UpgradeRequired
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.TooManyRequests">
            <summary>
            429 Too Many Requests
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NoResponse">
            <summary>
            444 NoResponse
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.RetryWith">
            <summary>
            449 RetryWith
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.BlockedByWindowsParentalControls">
            <summary>
            450 BlockedByWindowsParentalControls
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.UnavailableForLegalReasons">
            <summary>
            451 UnavailableForLegalReasons
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ClientClosedRequest">
            <summary>
            499 ClientClosedRequest
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.InternalServerError">
            <summary>
            500 InternalServerError
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NotImplemented">
            <summary>
            501 NotImplemented
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.BadGateway">
            <summary>
            502 BadGateway
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ServiceUnavailable">
            <summary>
            503 ServiceUnavailable
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.GatewayTimeout">
            <summary>
            504 GatewayTimeout
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.HttpVersionNotSupported">
            <summary>
            505 HttpVersionNotSupported
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.VariantAlsoNegotiates">
            <summary>
            506 VariantAlsoNegotiates
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.InsufficientStorage">
            <summary>
            507 InsufficientStorage
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.BandwidthLimitExceeded">
            <summary>
            509 BandwidthLimitExceeded
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NotExtended">
            <summary>
            510 NotExtended
            </summary>
        </member>
        <member name="T:Nancy.IAssemblyCatalog">
            <summary>
            Defines the functionality of an assembly catalog.
            </summary>
        </member>
        <member name="M:Nancy.IAssemblyCatalog.GetAssemblies">
            <summary>
            Gets all <see cref="T:System.Reflection.Assembly"/> instances in the catalog.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:System.Reflection.Assembly"/> instances.</returns>
        </member>
        <member name="T:Nancy.IHideObjectMembers">
            <summary>
            Helper interface used to hide the base <see cref="T:System.Object"/>  members from the fluent API to make it much cleaner
            in Visual Studio intellisense.
            </summary>
        </member>
        <member name="M:Nancy.IHideObjectMembers.Equals(System.Object)">
            <summary>
            Hides the <see cref="M:Nancy.IHideObjectMembers.Equals(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:Nancy.IHideObjectMembers.GetHashCode">
            <summary>
            Hides the <see cref="M:Nancy.IHideObjectMembers.GetHashCode"/> method.
            </summary>
        </member>
        <member name="M:Nancy.IHideObjectMembers.GetType">
            <summary>
            Hides the <see cref="M:Nancy.IHideObjectMembers.GetType"/> method.
            </summary>
        </member>
        <member name="M:Nancy.IHideObjectMembers.ToString">
            <summary>
            Hides the <see cref="M:Nancy.IHideObjectMembers.ToString"/> method.
            </summary>
        </member>
        <member name="T:Nancy.INancyContextFactory">
            <summary>
            Creates NancyContext instances
            </summary>
        </member>
        <member name="M:Nancy.INancyContextFactory.Create(Nancy.Request)">
            <summary>
            Create a new NancyContext
            </summary>
            <returns>NancyContext instance</returns>
        </member>
        <member name="T:Nancy.INancyEngine">
            <summary>
            Defines the functionality of an engine that can handle Nancy <see cref="T:Nancy.Request"/>s.
            </summary>
        </member>
        <member name="P:Nancy.INancyEngine.RequestPipelinesFactory">
            <summary>
            Factory for creating an <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance for a incoming request.
            </summary>
            <value>An <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance.</value>
        </member>
        <member name="M:Nancy.INancyEngine.HandleRequest(Nancy.Request,System.Func{Nancy.NancyContext,Nancy.NancyContext},System.Threading.CancellationToken)">
            <summary>
            Handles an incoming <see cref="T:Nancy.Request"/> async.
            </summary>
            <param name="request">An <see cref="T:Nancy.Request"/> instance, containing the information about the current request.</param>
            <param name="preRequest">Delegate to call before the request is processed</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Nancy.INancyModule">
            <summary>
            Nancy module base interface
            Defines all the properties / behaviour needed by Nancy internally
            </summary>
        </member>
        <member name="P:Nancy.INancyModule.After">
            <summary><para>
            The post-request hook
            </para><para>
            The post-request hook is called after the response is created by the route execution.
            It can be used to rewrite the response or add/remove items from the context.
            </para></summary>
        </member>
        <member name="P:Nancy.INancyModule.Before">
            <summary><para>
            The pre-request hook
            </para><para>
            The PreRequest hook is called prior to executing a route. If any item in the
            pre-request pipeline returns a response then the route is not executed and the
            response is returned.
            </para></summary>
        </member>
        <member name="P:Nancy.INancyModule.OnError">
            <summary><para>
            The error hook
            </para><para>
            The error hook is called if an exception is thrown at any time during executing
            the PreRequest hook, a route and the PostRequest hook. It can be used to set
            the response and/or finish any ongoing tasks (close database session, etc).
            </para></summary>
        </member>
        <member name="P:Nancy.INancyModule.Context">
            <summary>
            Gets or sets the current Nancy context
            </summary><value>A <see cref="T:Nancy.NancyContext" /> instance.</value>
        </member>
        <member name="P:Nancy.INancyModule.Response">
            <summary>
            An extension point for adding support for formatting response contents.
            </summary><value>This property will always return <see langword="null" /> because it acts as an extension point.</value><remarks>Extension methods to this property should always return <see cref="P:Nancy.NancyModuleBase.Response" /> or one of the types that can implicitly be types into a <see cref="P:Nancy.NancyModuleBase.Response" />.</remarks>
        </member>
        <member name="P:Nancy.INancyModule.ModelBinderLocator">
            <summary>
            Gets or sets the model binder locator
            </summary>
        </member>
        <member name="P:Nancy.INancyModule.ModelValidationResult">
            <summary>
            Gets or sets the model validation result
            </summary>
        </member>
        <member name="P:Nancy.INancyModule.ValidatorLocator">
            <summary>
            Gets or sets the validator locator.
            </summary>
        </member>
        <member name="P:Nancy.INancyModule.Request">
            <summary>
            Gets or sets an <see cref="P:Nancy.INancyModule.Request" /> instance that represents the current request.
            </summary><value>An <see cref="P:Nancy.INancyModule.Request" /> instance.</value>
        </member>
        <member name="P:Nancy.INancyModule.ViewFactory">
            <summary>
            The extension point for accessing the view engines in Nancy.
            </summary><value>An <see cref="T:Nancy.ViewEngines.IViewFactory" /> instance.</value><remarks>This is automatically set by Nancy at runtime.</remarks>
        </member>
        <member name="P:Nancy.INancyModule.ModulePath">
            <summary>
            Get the root path of the routes in the current module.
            </summary><value>A <see cref="T:System.String" /> containing the root path of the module or <see langword="null" /> if no root path should be used.</value><remarks>All routes will be relative to this root path.</remarks>
        </member>
        <member name="P:Nancy.INancyModule.Routes">
            <summary>
            Gets all declared routes by the module.
            </summary><value>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance, containing all <see cref="T:Nancy.Routing.Route" /> instances declared by the module.</value>
        </member>
        <member name="P:Nancy.INancyModule.Text">
            <summary>
            Gets or sets the dynamic object used to locate text resources.
            </summary>
        </member>
        <member name="P:Nancy.INancyModule.View">
            <summary>
            Renders a view from inside a route handler.
            </summary>
            <value>A <see cref="T:Nancy.ViewRenderer"/> instance that is used to determine which view that should be rendered.</value>
        </member>
        <member name="P:Nancy.INancyModule.Negotiate">
            <summary>
            Used to negotiate the content returned based on Accepts header.
            </summary>
            <value>A <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> instance that is used to negotiate the content returned.</value>
        </member>
        <member name="T:Nancy.INancyModuleCatalog">
            <summary>
            Catalog of <see cref="T:Nancy.INancyModule"/> instances.
            </summary>
        </member>
        <member name="M:Nancy.INancyModuleCatalog.GetAllModules(Nancy.NancyContext)">
            <summary>
            Get all NancyModule implementation instances - should be per-request lifetime
            </summary>
            <param name="context">The current context</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.INancyModule"/> instances.</returns>
        </member>
        <member name="M:Nancy.INancyModuleCatalog.GetModule(System.Type,Nancy.NancyContext)">
            <summary>
            Retrieves a specific <see cref="T:Nancy.INancyModule"/> implementation - should be per-request lifetime
            </summary>
            <param name="moduleType">Module type</param>
            <param name="context">The current context</param>
            <returns>The <see cref="T:Nancy.INancyModule"/> instance</returns>
        </member>
        <member name="T:Nancy.IncludeInNancyAssemblyScanningAttribute">
            <summary>
            Add this attribute to an assembly to make sure
            it is included in Nancy's assembly scanning.
            </summary>
            <example>
            Apply the attribute, typically in AssemblyInfo.(cs|fs|vb), as follows:
            <code>[assembly: IncludeInNancyAssemblyScanning]</code>
            </example>
        </member>
        <member name="T:Nancy.IObjectSerializer">
            <summary>
            De/Serialisation for cookie objects
            </summary>
        </member>
        <member name="M:Nancy.IObjectSerializer.Serialize(System.Object)">
            <summary>
            Serialize an object
            </summary>
            <param name="sourceObject">Source object</param>
            <returns>Serialised object string</returns>
        </member>
        <member name="M:Nancy.IObjectSerializer.Deserialize(System.String)">
            <summary>
            Deserialize an object string
            </summary>
            <param name="sourceString">Source object string</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:Nancy.IObjectSerializerSelector">
            <summary>
            Allows setting of the serializer for session object storage
            </summary>
        </member>
        <member name="M:Nancy.IObjectSerializerSelector.WithSerializer(Nancy.IObjectSerializer)">
            <summary>
            Using the specified serializer
            </summary>
            <param name="newSerializer">Serializer to use</param>
        </member>
        <member name="T:Nancy.IO.RequestStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> decorator that can handle moving the stream out from memory and on to disk when the contents reaches a certain length.
            </summary>
        </member>
        <member name="F:Nancy.IO.RequestStream.DEFAULT_SWITCHOVER_THRESHOLD">
            <summary>
            The default switchover threshold
            </summary>
        </member>
        <member name="M:Nancy.IO.RequestStream.#ctor(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.IO.RequestStream"/> class, with
            the provided <paramref name="expectedLength"/>, <paramref name="thresholdLength"/> and <paramref name="disableStreamSwitching"/>.
            </summary>
            <param name="expectedLength">The expected length of the contents in the stream.</param>
            <param name="thresholdLength">The content length that will trigger the stream to be moved out of memory.</param>
            <param name="disableStreamSwitching">if set to <see langword="true"/> the stream will never explicitly be moved to disk.</param>
        </member>
        <member name="M:Nancy.IO.RequestStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.IO.RequestStream"/> class, with
            the provided <paramref name="expectedLength"/>, <paramref name="expectedLength"/> and <paramref name="disableStreamSwitching"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that should be handled by the request stream</param>
            <param name="expectedLength">The expected length of the contents in the stream.</param>
            <param name="disableStreamSwitching">if set to <see langword="true"/> the stream will never explicitly be moved to disk.</param>
        </member>
        <member name="M:Nancy.IO.RequestStream.#ctor(System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.IO.RequestStream"/> class, with
            the provided <paramref name="expectedLength"/> and <paramref name="disableStreamSwitching"/>.
            </summary>
            <param name="expectedLength">The expected length of the contents in the stream.</param>
            <param name="disableStreamSwitching">if set to <see langword="true"/> the stream will never explicitly be moved to disk.</param>
        </member>
        <member name="M:Nancy.IO.RequestStream.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.IO.RequestStream"/> class, with
            the provided <paramref name="expectedLength"/>, <paramref name="expectedLength"/>, <paramref name="thresholdLength"/> and <paramref name="disableStreamSwitching"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that should be handled by the request stream</param>
            <param name="expectedLength">The expected length of the contents in the stream.</param>
            <param name="thresholdLength">The content length that will trigger the stream to be moved out of memory.</param>
            <param name="disableStreamSwitching">if set to <see langword="true"/> the stream will never explicitly be moved to disk.</param>
        </member>
        <member name="M:Nancy.IO.RequestStream.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Nancy.IO.RequestStream"/> class.
            </summary>
        </member>
        <member name="P:Nancy.IO.RequestStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>Always returns <see langword="true"/>.</returns>
        </member>
        <member name="P:Nancy.IO.RequestStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>Always returns <see langword="true"/>.</returns>
        </member>
        <member name="P:Nancy.IO.RequestStream.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
            <returns>Always returns <see langword="false"/>.</returns>
        </member>
        <member name="P:Nancy.IO.RequestStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>Always returns <see langword="true"/>.</returns>
        </member>
        <member name="P:Nancy.IO.RequestStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:Nancy.IO.RequestStream.IsInMemory">
            <summary>
            Gets a value indicating whether the current stream is stored in memory.
            </summary>
            <value><see langword="true"/> if the stream is stored in memory; otherwise, <see langword="false"/>.</value>
            <remarks>The stream is moved to disk when either the length of the contents or expected content length exceeds the threshold specified in the constructor.</remarks>
        </member>
        <member name="P:Nancy.IO.RequestStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <returns>The current position within the stream.</returns>
        </member>
        <member name="M:Nancy.IO.RequestStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.</returns>
            <param name="buffer">The buffer to read the data into. </param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data read from the stream. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete. </param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param>
        </member>
        <member name="M:Nancy.IO.RequestStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous write, which could still be pending.</returns>
            <param name="buffer">The buffer to write data from. </param>
            <param name="offset">The byte offset in <paramref name="buffer"/> from which to begin writing. </param>
            <param name="count">The maximum number of bytes to write. </param>
            <param name="callback">An optional asynchronous callback, to be called when the write is complete. </param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
        </member>
        <member name="M:Nancy.IO.RequestStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Nancy.IO.RequestStream.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete.
            </summary>
            <returns>
            The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
            </returns>
            <param name="asyncResult">The reference to the pending asynchronous request to finish. </param>
        </member>
        <member name="M:Nancy.IO.RequestStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request. </param>
        </member>
        <member name="M:Nancy.IO.RequestStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Nancy.IO.RequestStream.FromStream(System.IO.Stream)">
            <summary>
            Creates a new request stream from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>A request stream instance</returns>
        </member>
        <member name="M:Nancy.IO.RequestStream.FromStream(System.IO.Stream,System.Int64)">
            <summary>
            Creates a new request stream from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="expectedLength">The expected length.</param>
            <returns>A request stream instance</returns>
        </member>
        <member name="M:Nancy.IO.RequestStream.FromStream(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Creates a new request stream from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="expectedLength">The expected length.</param>
            <param name="thresholdLength">Length of the threshold.</param>
            <returns>A request stream instance</returns>
        </member>
        <member name="M:Nancy.IO.RequestStream.FromStream(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
            Creates a new request stream from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="expectedLength">The expected length.</param>
            <param name="disableStreamSwitching">if set to <c>true</c> [disable stream switching].</param>
            <returns>A request stream instance</returns>
        </member>
        <member name="M:Nancy.IO.RequestStream.FromStream(System.IO.Stream,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Creates a new request stream from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="expectedLength">The expected length.</param>
            <param name="thresholdLength">Length of the threshold.</param>
            <param name="disableStreamSwitching">if set to <c>true</c> [disable stream switching].</param>
            <returns>A request stream instance</returns>
        </member>
        <member name="M:Nancy.IO.RequestStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
        </member>
        <member name="M:Nancy.IO.RequestStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Nancy.IO.RequestStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <returns>The new position within the current stream.</returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. </param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. </param>
        </member>
        <member name="M:Nancy.IO.RequestStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
            <exception cref="T:System.NotSupportedException">The stream does not support having its length set.</exception>
            <remarks>This functionality is not supported by the <see cref="T:Nancy.IO.RequestStream"/> type and will always throw <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="M:Nancy.IO.RequestStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
        </member>
        <member name="T:Nancy.IO.UnclosableStreamWrapper">
            <summary>
            To close the unclosable stream..
            To fight the unbeatable foe..
            To bear with unbearable sorrow..
            To run where the brave dare not go..
            </summary>
        </member>
        <member name="F:Nancy.IO.UnclosableStreamWrapper.baseStream">
            <summary>
            The wrapped stream
            </summary>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.IO.UnclosableStreamWrapper"/> class.
            </summary>
            <param name="baseStream">The base stream to wrap.</param>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.BaseStream">
            <summary>
            Gets the base stream that the wrapper is wrapping
            </summary>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
            <returns>
            A value that determines whether the current stream can time out.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.ReadTimeout">
            <summary>
            Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. 
            </summary>
            <returns>
            A value, in milliseconds, that determines how long the stream will attempt to read before timing out.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.ReadTimeout"/> method always throws an <see cref="T:System.InvalidOperationException"/>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.WriteTimeout">
            <summary>
            Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. 
            </summary>
            <returns>
            A value, in milliseconds, that determines how long the stream will attempt to write before timing out.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.WriteTimeout"/> method always throws an <see cref="T:System.InvalidOperationException"/>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. </param><param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream. </param><param name="count">The maximum number of bytes to be read from the current stream. </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support reading. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. </param><param name="count">The number of bytes to be written to the current stream. </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support writing. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.
            </returns>
            <param name="buffer">The buffer to read the data into. </param><param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data read from the stream. </param><param name="count">The maximum number of bytes to read. </param><param name="callback">An optional asynchronous callback, to be called when the read is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <returns>
            An IAsyncResult that represents the asynchronous write, which could still be pending.
            </returns>
            <param name="buffer">The buffer to write data from. </param><param name="offset">The byte offset in <paramref name="buffer"/> from which to begin writing. </param><param name="count">The maximum number of bytes to write. </param><param name="callback">An optional asynchronous callback, to be called when the write is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous write past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the write operation. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete.
            </summary>
            <returns>
            The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
            </returns>
            <param name="asyncResult">The reference to the pending asynchronous request to finish. </param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream. </exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request. </param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream. </exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an Int32, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Nancy.IResourceAssemblyProvider">
            <summary>
            Defines the functionality for retrieving which assemblies that should be used by Nancy.
            </summary>
        </member>
        <member name="M:Nancy.IResourceAssemblyProvider.GetAssembliesToScan">
            <summary>
            Gets a list of assemblies that should be scanned.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Reflection.Assembly"/> instances.</returns>
        </member>
        <member name="T:Nancy.IResponseFormatter">
            <summary>
            An extension point for adding support for formatting response contents. No members should be added to this interface without good reason.
            </summary>
            <remarks>Extension methods to this interface should always return <see cref="T:Nancy.Response"/> or one of the types that can implicitly be types into a <see cref="T:Nancy.Response"/>.</remarks>
        </member>
        <member name="P:Nancy.IResponseFormatter.SerializerFactory">
            <summary>
            Gets all <see cref="T:Nancy.ISerializerFactory"/> factory.
            </summary>
        </member>
        <member name="P:Nancy.IResponseFormatter.Context">
            <summary>
            Gets the context for which the response is being formatted.
            </summary>
            <value>A <see cref="T:Nancy.NancyContext"/> instance.</value>
        </member>
        <member name="P:Nancy.IResponseFormatter.Environment">
            <summary>
            Gets the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <value>An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</value>
        </member>
        <member name="P:Nancy.IResponseFormatter.RootPath">
            <summary>
            Gets the root path of the application.
            </summary>
            <value>A <see cref="T:System.String"/> containing the root path.</value>
        </member>
        <member name="T:Nancy.IResponseFormatterFactory">
            <summary>
            Defines the functionality of a <see cref="T:Nancy.IResponseFormatter"/> factory.
            </summary>
        </member>
        <member name="M:Nancy.IResponseFormatterFactory.Create(Nancy.NancyContext)">
            <summary>
            Creates a new <see cref="T:Nancy.IResponseFormatter"/> instance.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance that should be used by the response formatter.</param>
            <returns>An <see cref="T:Nancy.IResponseFormatter"/> instance.</returns>
        </member>
        <member name="T:Nancy.IRootPathProvider">
            <summary>
            Defines the functionality to retrieve the root folder path of the current Nancy application.
            </summary>
        </member>
        <member name="M:Nancy.IRootPathProvider.GetRootPath">
            <summary>
            Returns the root folder path of the current Nancy application.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the path of the root folder.</returns>
        </member>
        <member name="T:Nancy.IRuntimeEnvironmentInformation">
            <summary>
            Defines functionality for getting information about the runtime execution environment.
            </summary>
        </member>
        <member name="P:Nancy.IRuntimeEnvironmentInformation.IsDebug">
            <summary>
            Gets a value indicating if the application is running in debug mode.
            </summary>
            <returns><see langword="true"/> if the application is running in debug mode, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nancy.ISerializer">
            <summary>
            Defines the functionality for providing serialization support.
            </summary>
        </member>
        <member name="M:Nancy.ISerializer.CanSerialize(Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Whether the serializer can serialize the content type
            </summary>
            <param name="mediaRange">Content type to serialise</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="P:Nancy.ISerializer.Extensions">
            <summary>
            Gets the list of extensions that the serializer can handle.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of extensions if any are available, otherwise an empty enumerable.</value>
        </member>
        <member name="M:Nancy.ISerializer.Serialize``1(Nancy.Responses.Negotiation.MediaRange,``0,System.IO.Stream)">
            <summary>
            Serialize the given model with the given contentType
            </summary>
            <param name="mediaRange">Content type to serialize into</param>
            <param name="model">Model to serialize</param>
            <param name="outputStream">Output stream to serialize to</param>
            <returns>Serialised object</returns>
        </member>
        <member name="T:Nancy.ISerializerFactory">
            <summary>
            Defines the functionality of an <see cref="T:Nancy.ISerializer"/> factory.
            </summary>
        </member>
        <member name="M:Nancy.ISerializerFactory.GetSerializer(Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Gets the <see cref="T:Nancy.ISerializer"/> implementation that can serialize the provided <paramref name="mediaRange"/>.
            </summary>
            <param name="mediaRange">The <see cref="T:Nancy.Responses.Negotiation.MediaRange"/> to get a serializer for.</param>
            <returns>An <see cref="T:Nancy.ISerializer"/> instance, or <see langword="null" /> if not match was found.</returns>
        </member>
        <member name="T:Nancy.IStaticContentProvider">
            <summary>
            Provides static content delivery
            </summary>
        </member>
        <member name="M:Nancy.IStaticContentProvider.GetContent(Nancy.NancyContext)">
            <summary>
            Gets the static content response, if possible.
            </summary>
            <param name="context">Current context</param>
            <returns>Response if serving content, null otherwise</returns>
        </member>
        <member name="T:Nancy.ITypeCatalog">
            <summary>
            Defines the functionality of a type catalog.
            </summary>
        </member>
        <member name="M:Nancy.ITypeCatalog.GetTypesAssignableTo(System.Type,Nancy.TypeResolveStrategy)">
            <summary>
            Gets all types that are assignable to the provided <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that returned types should be assignable to.</param>
            <param name="strategy">A <see cref="T:Nancy.TypeResolveStrategy"/> that should be used when retrieving types.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:System.Type"/> instances.</returns>
        </member>
        <member name="T:Nancy.Jsonp">
            <summary>
            Handles JSONP requests.
            </summary>
        </member>
        <member name="M:Nancy.Jsonp.Enable(Nancy.Bootstrapper.IPipelines,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Enable JSONP support in the application
            </summary>
            <param name="pipelines">Application Pipeline to Hook into</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="M:Nancy.Jsonp.Disable(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Disable JSONP support in the application
            </summary>
            <param name="pipelines">Application Pipeline to Hook into</param>
        </member>
        <member name="M:Nancy.Jsonp.PrepareJsonp(Nancy.NancyContext)">
            <summary>
            Transmogrify original response and apply JSONP Padding
            </summary>
            <param name="context">Current Nancy Context</param>
        </member>
        <member name="T:Nancy.JsonpApplicationStartup">
            <summary>
            Enables JSONP support at application startup.
            </summary>
        </member>
        <member name="M:Nancy.JsonpApplicationStartup.#ctor(Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.JsonpApplicationStartup"/> class,
            with the provided <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.
            </summary>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="M:Nancy.JsonpApplicationStartup.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Perform any initialisation tasks
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.Json.Converters.TimeSpanConverter">
            <summary>
            Converts a dictionary with time info into a time span instance or vice versa.
            </summary>
            <seealso cref="T:Nancy.Json.JavaScriptConverter" />
        </member>
        <member name="P:Nancy.Json.Converters.TimeSpanConverter.SupportedTypes">
            <summary>
            Gets the supported types.
            </summary>
            <value>The collection of supported types.</value>
        </member>
        <member name="M:Nancy.Json.Converters.TimeSpanConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,Nancy.Json.JavaScriptSerializer)">
            <summary>
            Deserializes the specified dictionary into a timespan instance.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="type">The type.</param>
            <param name="serializer">The serializer.</param>
            <returns>A <see cref="T:System.TimeSpan"/> instance as <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Nancy.Json.Converters.TimeSpanConverter.Serialize(System.Object,Nancy.Json.JavaScriptSerializer)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="serializer">The serializer.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing a <see cref="T:System.TimeSpan"/> object</returns>
        </member>
        <member name="T:Nancy.Json.Converters.TupleConverter">
            <summary>
            Converts a dictionary into a list of tuples.
            </summary>
            <seealso cref="T:Nancy.Json.JavaScriptConverter" />
        </member>
        <member name="P:Nancy.Json.Converters.TupleConverter.SupportedTypes">
            <summary>
            Gets the supported tuple types.
            </summary>
            <value>The supported types.</value>
        </member>
        <member name="M:Nancy.Json.Converters.TupleConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,Nancy.Json.JavaScriptSerializer)">
            <summary>
            Deserializes the specified dictionary into a list of tuples.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="type">The type.</param>
            <param name="serializer">The serializer.</param>
            <returns>A list of <see cref="T:System.Tuple`2"/> representing the <paramref name="dictionary"/></returns>
        </member>
        <member name="M:Nancy.Json.Converters.TupleConverter.Serialize(System.Object,Nancy.Json.JavaScriptSerializer)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Nancy.Json.DefaultJsonConfigurationProvider">
            <summary>
            Provides the default configuration for <see cref="T:Nancy.Json.JsonConfiguration"/>.
            </summary>
        </member>
        <member name="M:Nancy.Json.DefaultJsonConfigurationProvider.GetDefaultConfiguration">
            <summary>
            Gets the default configuration instance to register in the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <returns>The configuration instance</returns>
            <remarks>Will return <see cref="F:Nancy.Json.JsonConfiguration.Default"/></remarks>
        </member>
        <member name="T:Nancy.Json.JavaScriptConverter">
            <summary>
            Abstracr base class for javascript converter operations.
            </summary>
        </member>
        <member name="M:Nancy.Json.JavaScriptConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Json.JavaScriptConverter"/> class.
            </summary>
        </member>
        <member name="P:Nancy.Json.JavaScriptConverter.SupportedTypes">
            <summary>
            Gets the supported types.
            </summary>
            <value>The supported types.</value>
        </member>
        <member name="M:Nancy.Json.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type)">
            <summary>
            Deserializes the specified dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="type">The type.</param>
            <returns>The deserialized <paramref name="dictionary"/></returns>
        </member>
        <member name="M:Nancy.Json.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,Nancy.Json.JavaScriptSerializer)">
            <summary>
            Deserializes the specified dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="type">The type.</param>
            <param name="serializer">The serializer.</param>
            <returns>An <see cref="T:System.Object"/> representing <paramref name="dictionary"/></returns>
        </member>
        <member name="M:Nancy.Json.JavaScriptConverter.Serialize(System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> instance</returns>
        </member>
        <member name="M:Nancy.Json.JavaScriptConverter.Serialize(System.Object,Nancy.Json.JavaScriptSerializer)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="serializer">The serializer.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> instance</returns>
        </member>
        <member name="T:Nancy.Json.JavaScriptPrimitiveConverter">
            <summary>
             Operations for converting javascript primitives.
            </summary>
        </member>
        <member name="P:Nancy.Json.JavaScriptPrimitiveConverter.SupportedTypes">
            <summary>
            Gets the supported types.
            </summary>
            <value>The supported types.</value>
        </member>
        <member name="M:Nancy.Json.JavaScriptPrimitiveConverter.Deserialize(System.Object,System.Type)">
            <summary>
            Deserializes the specified primitive value.
            </summary>
            <param name="primitiveValue">The primitive value.</param>
            <param name="type">The type.</param>
            <returns>The deserialized <paramref name="primitiveValue"/></returns>
        </member>
        <member name="M:Nancy.Json.JavaScriptPrimitiveConverter.Deserialize(System.Object,System.Type,Nancy.Json.JavaScriptSerializer)">
            <summary>
            Deserializes the specified primitive value.
            </summary>
            <param name="primitiveValue">The primitive value.</param>
            <param name="type">The type.</param>
            <param name="serializer">The serializer.</param>
            <returns>The deserialized <paramref name="primitiveValue"/></returns>
        </member>
        <member name="M:Nancy.Json.JavaScriptPrimitiveConverter.Serialize(System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>The serialized <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Nancy.Json.JavaScriptPrimitiveConverter.Serialize(System.Object,Nancy.Json.JavaScriptSerializer)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="serializer">The serializer.</param>
            <returns>The serialized <see cref="T:System.Object"/></returns>
        </member>
        <member name="T:Nancy.Json.JavaScriptSerializer">
            <summary>
            JavaScriptSerializer responsible for serializing objects
            </summary>
        </member>
        <member name="M:Nancy.Json.JavaScriptSerializer.#ctor">
            <summary>
            Creates an instance of <see cref="T:Nancy.Json.JavaScriptSerializer"/>
            </summary>
        </member>
        <member name="M:Nancy.Json.JavaScriptSerializer.#ctor(Nancy.Json.JsonConfiguration,Nancy.GlobalizationConfiguration)">
            <summary>
            Creates an instance of <see cref="T:Nancy.Json.JavaScriptSerializer"/>
            </summary>
            <param name="jsonConfiguration">A <see cref="T:Nancy.Json.JsonConfiguration"/> object to configure the serializer</param>
            <param name="globalizationConfiguration">A <see cref="T:Nancy.GlobalizationConfiguration"/> object to configure the serializer</param>
        </member>
        <member name="M:Nancy.Json.JavaScriptSerializer.#ctor(Nancy.Json.JsonConfiguration,System.Boolean,Nancy.GlobalizationConfiguration)">
            <summary>
            Creates an instance of <see cref="T:Nancy.Json.JavaScriptSerializer"/>
            </summary>
            <param name="jsonConfiguration">A <see cref="T:Nancy.Json.JsonConfiguration"/> object to configure the serializer</param>
            <param name="registerConverters">A boolean to determine whether to register custom converters</param>
            <param name="globalizationConfiguration">A <see cref="T:Nancy.GlobalizationConfiguration"/> object to configure the serializer</param>
        </member>
        <member name="M:Nancy.Json.JavaScriptSerializer.Deserialize``1(System.String)">
            <summary>
            Deserialize JSON
            </summary>
            <param name="input">JSON representation</param>
            <typeparam name="T">The <see cref="T:System.Type"/> to deserialize into</typeparam>
            <returns>An instance of type <typeparamref name="T"/> representing <paramref name="input"/> as an object</returns>
        </member>
        <member name="M:Nancy.Json.JavaScriptSerializer.DeserializeObject(System.String)">
            <summary>
            Deserialize JSON
            </summary>
            <param name="input">JSON representation</param>
            <returns>An object representing <paramref name="input"/></returns>
        </member>
        <member name="M:Nancy.Json.JavaScriptSerializer.RegisterConverters(System.Collections.Generic.IEnumerable{Nancy.Json.JavaScriptConverter})">
            <summary>
            Register custom JSON converters
            </summary>
            <param name="converters">An array of <see cref="T:Nancy.Json.JavaScriptConverter"/> to register</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="converters"/> is null</exception>
        </member>
        <member name="M:Nancy.Json.JavaScriptSerializer.RegisterConverters(System.Collections.Generic.IEnumerable{Nancy.Json.JavaScriptPrimitiveConverter})">
            <summary>
            Register custom JSON converters
            </summary>
            <param name="primitiveConverters">An array of <see cref="T:Nancy.Json.JavaScriptPrimitiveConverter"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="primitiveConverters"/> is null</exception>
        </member>
        <member name="M:Nancy.Json.JavaScriptSerializer.RegisterConverters(System.Collections.Generic.IEnumerable{Nancy.Json.JavaScriptConverter},System.Collections.Generic.IEnumerable{Nancy.Json.JavaScriptPrimitiveConverter})">
            <summary>
            Register custom JSON converters
            </summary>
            <param name="converters">An array of <see cref="T:Nancy.Json.JavaScriptConverter"/> to register</param>
            <param name="primitiveConverters">An array of <see cref="T:Nancy.Json.JavaScriptPrimitiveConverter"/></param>
        </member>
        <member name="M:Nancy.Json.JavaScriptSerializer.Serialize(System.Object)">
            <summary>
            Serialize an object to JSON
            </summary>
            <param name="obj">The object to serialize</param>
            <returns>A JSON string representation of <paramref name="obj"/></returns>
        </member>
        <member name="M:Nancy.Json.JavaScriptSerializer.Serialize(System.Object,System.IO.TextWriter)">
            <summary>
            Serialize an object to JSON and write result to <paramref name="output"/>
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="output">An instance of <see cref="T:System.IO.TextWriter" /> to write the serialized <paramref name="obj"/></param>
        </member>
        <member name="T:Nancy.Json.Json">
            <summary>
            JSON Helper Class.
            </summary>
        </member>
        <member name="M:Nancy.Json.Json.IsJsonContentType(System.String)">
            <summary>
            Attempts to detect if the content type is JSON.
            Supports:
              application/json
              text/json
              [something]+json
            Matches are case insensitive to try and be as "accepting" as possible.
            </summary>
            <param name="contentType">Request content type</param>
            <returns>True if content type is JSON, false otherwise</returns>
        </member>
        <member name="T:Nancy.Json.JsonConfiguration">
            <summary>
            Configuration for JSON serialization.
            </summary>
        </member>
        <member name="F:Nancy.Json.JsonConfiguration.Default">
            <summary>
            A default instance of the <see cref="T:Nancy.Json.JsonConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Json.JsonConfiguration.#ctor(System.Text.Encoding,System.Collections.Generic.IList{Nancy.Json.JavaScriptConverter},System.Collections.Generic.IList{Nancy.Json.JavaScriptPrimitiveConverter},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Json.JsonConfiguration"/> class.
            </summary>
            <param name="defaultEncoding">The default <see cref="T:System.Text.Encoding"/> that should be used by the serializer.</param>
            <param name="converters">List of <see cref="T:Nancy.Json.JavaScriptConverter"/> instances.</param>
            <param name="primitiveConverters">List of <see cref="T:Nancy.Json.JavaScriptPrimitiveConverter"/> instances.</param>
            <param name="retainCasing"><see langword="true"/> if the name casing should be retained during serialization, otherwise <see langword="false"/>.</param>
            <param name="serializeEnumToString"><see langword="true"/> if enums should be represented as string otherwise <see langword="false"/>.</param>
            <param name="excludeNullValues"><see langword="true" /> if the serializer should exclude null values for properties on objects otherwise <see langword="false" />.</param>
        </member>
        <member name="P:Nancy.Json.JsonConfiguration.DefaultEncoding">
            <summary>
            Gets the default <see cref="T:System.Text.Encoding"/> for JSON responses.
            </summary>
            <remarks>The default is <see langword="Encoding.UTF8" />.</remarks>
        </member>
        <member name="P:Nancy.Json.JsonConfiguration.Converters">
            <summary>
            Gets or sets the type converters that should be used.
            </summary>
            <remarks>The default is <see cref="T:Nancy.Json.Converters.TimeSpanConverter"/> and <see cref="T:Nancy.Json.Converters.TupleConverter"/>.</remarks>
        </member>
        <member name="P:Nancy.Json.JsonConfiguration.PrimitiveConverters">
            <summary>
            Gets or sets the converters used for primitive types.
            </summary>
            <remarks>The default are no converters.</remarks>
        </member>
        <member name="P:Nancy.Json.JsonConfiguration.RetainCasing">
            <summary>
            Gets or sets if C# casing should be retained or if camel-casing should be enforeced.
            </summary>
            <remarks>The default is <see langword="false"/>.</remarks>
        </member>
        <member name="P:Nancy.Json.JsonConfiguration.SerializeEnumToString">
            <summary>
            Get or sets whether enums should be treated as string
            </summary>
        </member>
        <member name="P:Nancy.Json.JsonConfiguration.ExcludeNullValues">
            <summary>
            Gets or sets if the serializer should return null values for properties on objects
            </summary>
        </member>
        <member name="T:Nancy.Json.JsonConfigurationExtensions">
            <summary>
            Contains <see cref="T:Nancy.Json.JsonConfiguration"/> configuration extensions for <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
        </member>
        <member name="M:Nancy.Json.JsonConfigurationExtensions.Json(Nancy.Configuration.INancyEnvironment,System.Text.Encoding,System.Collections.Generic.IList{Nancy.Json.JavaScriptConverter},System.Collections.Generic.IList{Nancy.Json.JavaScriptPrimitiveConverter},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Configures JSON serialization.
            </summary>
            <param name="environment"><see cref="T:Nancy.Configuration.INancyEnvironment"/> that should be configured.</param>
            <param name="defaultEncoding">The <see cref="T:System.Text.Encoding"/> that should be as a default.</param>
            <param name="converters">List of <see cref="T:Nancy.Json.JavaScriptConverter"/> that should be used.</param>
            <param name="primitiveConverters">List of <see cref="T:Nancy.Json.JavaScriptPrimitiveConverter"/> that should be used.</param>
            <param name="retainCasing"><see langword="true" /> if C# casing should be retained, otherwise <see langword="false" /> to use camel-casing.</param>
            <param name="serializeEnumToString"><see langword="true"/> if enums should be represented as string otherwise <see langword="false"/>.</param>
            <param name="excludeNullValues"><see langword="true" /> if the serializer should exclude null values for properties on objects otherwise <see langword="false" />.</param>
        </member>
        <member name="T:Nancy.Json.ScriptIgnoreAttribute">
            <summary>
            Property attribute for ignoring scripts.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Nancy.Json.Simple.NancySerializationStrategy">
            <summary>
            Nancy serialization stategy for SimpleJson
            </summary>
        </member>
        <member name="M:Nancy.Json.Simple.NancySerializationStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Json.Simple.NancySerializationStrategy"/> class.
            </summary>
            <remarks>C# casing of objects will be defaulted to camelCase and enums treated as integers</remarks>
        </member>
        <member name="M:Nancy.Json.Simple.NancySerializationStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
             Initializes a new instance of the <see cref="T:Nancy.Json.Simple.NancySerializationStrategy"/> class.
            </summary>
            <param name="retainCasing">Retain C# casing of objects when serialized</param>
            <param name="serializeEnumToString">Should enums be represented as string</param>
        </member>
        <member name="M:Nancy.Json.Simple.NancySerializationStrategy.RegisterConverters(System.Collections.Generic.IEnumerable{Nancy.Json.JavaScriptConverter})">
            <summary>
            Register custom <see cref="T:Nancy.Json.JavaScriptConverter"/> converters
            </summary>
            <param name="javaScriptConverters">An array of <see cref="T:Nancy.Json.JavaScriptConverter"/></param>
        </member>
        <member name="M:Nancy.Json.Simple.NancySerializationStrategy.RegisterConverters(System.Collections.Generic.IEnumerable{Nancy.Json.JavaScriptPrimitiveConverter})">
            <summary>
            Register custom <see cref="T:Nancy.Json.JavaScriptPrimitiveConverter"/>
            </summary>
            <param name="javaScriptPrimitiveConverters">An array of <see cref="T:Nancy.Json.JavaScriptPrimitiveConverter"/></param>
        </member>
        <member name="M:Nancy.Json.Simple.NancySerializationStrategy.MapClrMemberNameToJsonFieldName(System.String)">
            <summary>
            Formats a property name to a JSON field name
            </summary>
            <param name="clrPropertyName">The property name to format</param>
            <returns>camelCase <paramref name="clrPropertyName"/> if retainCasing is false, otherwise <paramref name="clrPropertyName"/></returns>
        </member>
        <member name="M:Nancy.Json.Simple.NancySerializationStrategy.DeserializeObject(System.Object,System.Type,System.Globalization.DateTimeStyles)">
            <summary>
            Deserialize an object
            </summary>
            <param name="value">The object to deserialize</param>
            <param name="type">The type of object to deserialize</param>
            <param name="dateTimeStyles">The <see cref="T:System.Globalization.DateTimeStyles"/> ton convert <see cref="T:System.DateTime"/> objects</param>
            <returns>A instance of <paramref name="type" /> deserialized from <paramref name="value"/></returns>
        </member>
        <member name="M:Nancy.Json.Simple.NancySerializationStrategy.SerializeEnum(System.Enum)">
            <summary>
            Serializes an <see cref="T:System.Enum"/>.
            </summary>
            <param name="p">The enum value to serialize.</param>
            <returns>The serialized value.</returns>
        </member>
        <member name="M:Nancy.Json.Simple.NancySerializationStrategy.TrySerializeKnownTypes(System.Object,System.Object@)">
            <summary>
            Serialize an object
            </summary>
            <param name="input">The object to serialize</param>
            <param name="output">The serialized object</param>
            <returns>true if <paramref name="input"/> was converted successfully; otherwise, false</returns>
        </member>
        <member name="T:Nancy.Json.Simple.JsonArray">
            <summary>
            Represents the json array.
            </summary>
        </member>
        <member name="M:Nancy.Json.Simple.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Json.Simple.JsonArray"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Json.Simple.JsonArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Json.Simple.JsonArray"/> class.
            </summary>
            <param name="capacity">The capacity of the json array.</param>
        </member>
        <member name="M:Nancy.Json.Simple.JsonArray.ToString">
            <summary>
            The json representation of the array.
            </summary>
            <returns>The json representation of the array.</returns>
        </member>
        <member name="T:Nancy.Json.Simple.JsonObject">
            <summary>
            Represents the json object.
            </summary>
        </member>
        <member name="F:Nancy.Json.Simple.JsonObject._members">
            <summary>
            The internal member dictionary.
            </summary>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Nancy.Json.Simple.JsonObject"/>.
            </summary>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Nancy.Json.Simple.JsonObject"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="P:Nancy.Json.Simple.JsonObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Nancy.Json.Simple.JsonObject.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Nancy.Json.Simple.JsonObject.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Nancy.Json.Simple.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:Nancy.Json.Simple.JsonObject.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Nancy.Json.Simple.JsonObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.ToString">
            <summary>
            Returns a json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
            <param name="result">The result of the type conversion operation.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <summary>
            Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.
            </summary>
            <param name="binder">Provides information about the deletion.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes"/> is equal to 3.</param>
            <param name="result">The result of the index operation.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that access objects by a specified index.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="indexes"/> is equal to 3.</param>
            <param name="value">The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="value"/> is equal to 10.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
            </returns>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Nancy.Json.Simple.JsonObject.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="T:Nancy.Json.Simple.SimpleJson">
             <summary>
             This class encodes and decodes JSON strings.
             Spec. details, see http://www.json.org/
            
             JSON uses Arrays and Objects. These correspond here to the datatypes JsonArray(IList&lt;object>) and JsonObject(IDictionary&lt;string,object>).
             All numbers are parsed to doubles.
             </summary>
        </member>
        <member name="M:Nancy.Json.Simple.SimpleJson.DeserializeObject(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An IList&lt;object>, a IDictionary&lt;string,object>, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:Nancy.Json.Simple.SimpleJson.TryDeserializeObject(System.String,System.Object@)">
            <summary>
            Try parsing the json string into a value.
            </summary>
            <param name="json">
            A JSON string.
            </param>
            <param name="obj">
            The object.
            </param>
            <returns>
            Returns true if successfull otherwise false.
            </returns>
        </member>
        <member name="M:Nancy.Json.Simple.SimpleJson.SerializeObject(System.Object,Nancy.Json.Simple.IJsonSerializerStrategy,System.Boolean)">
            <summary>
            Converts a IDictionary&lt;string,object> / IList&lt;object> object into a JSON string
            </summary>
            <param name="json">A IDictionary&lt;string,object> / IList&lt;object></param>
            <param name="jsonSerializerStrategy">Serializer strategy to use</param>
            <param name="excludeNullValues"><see langword="true" /> if the serializer should exclude null values for properties on objects otherwise <see langword="false" /></param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:Nancy.Json.Simple.SimpleJson.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, null, etc).
            </summary>
        </member>
        <member name="T:Nancy.JsonArray">
            <summary>
            Represents the json array.
            </summary>
        </member>
        <member name="M:Nancy.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.JsonArray"/> class. 
            </summary>
        </member>
        <member name="M:Nancy.JsonArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.JsonArray"/> class. 
            </summary>
            <param name="capacity">The capacity of the json array.</param>
        </member>
        <member name="M:Nancy.JsonArray.ToString">
            <summary>
            The json representation of the array.
            </summary>
            <returns>The json representation of the array.</returns>
        </member>
        <member name="T:Nancy.JsonObject">
            <summary>
            Represents the json object.
            </summary>
        </member>
        <member name="F:Nancy.JsonObject._members">
            <summary>
            The internal member dictionary.
            </summary>
        </member>
        <member name="M:Nancy.JsonObject.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Nancy.JsonObject"/>.
            </summary>
        </member>
        <member name="M:Nancy.JsonObject.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Nancy.JsonObject"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="P:Nancy.JsonObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Nancy.JsonObject.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Nancy.JsonObject.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Nancy.JsonObject.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="M:Nancy.JsonObject.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Nancy.JsonObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Nancy.JsonObject.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Nancy.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:Nancy.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Nancy.JsonObject.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Nancy.JsonObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nancy.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:Nancy.JsonObject.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Nancy.JsonObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Nancy.JsonObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Nancy.JsonObject.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nancy.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Nancy.JsonObject.ToString">
            <summary>
            Returns a json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Nancy.JsonObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
            <param name="result">The result of the type conversion operation.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:Nancy.JsonObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <summary>
            Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.
            </summary>
            <param name="binder">Provides information about the deletion.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:Nancy.JsonObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes"/> is equal to 3.</param>
            <param name="result">The result of the index operation.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:Nancy.JsonObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:Nancy.JsonObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that access objects by a specified index.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="indexes"/> is equal to 3.</param>
            <param name="value">The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="value"/> is equal to 10.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
            </returns>
        </member>
        <member name="M:Nancy.JsonObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Nancy.JsonObject.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="T:Nancy.SimpleJson">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes JsonArray(IList&lt;object>) and JsonObject(IDictionary&lt;string,object>).
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:Nancy.SimpleJson.DeserializeObject(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An IList&lt;object>, a IDictionary&lt;string,object>, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:Nancy.SimpleJson.TryDeserializeObject(System.String,System.Object@)">
            <summary>
            Try parsing the json string into a value.
            </summary>
            <param name="json">
            A JSON string.
            </param>
            <param name="obj">
            The object.
            </param>
            <returns>
            Returns true if successfull otherwise false.
            </returns>
        </member>
        <member name="M:Nancy.SimpleJson.SerializeObject(System.Object,Nancy.IJsonSerializerStrategy)">
            <summary>
            Converts a IDictionary&lt;string,object> / IList&lt;object> object into a JSON string
            </summary>
            <param name="json">A IDictionary&lt;string,object> / IList&lt;object></param>
            <param name="jsonSerializerStrategy">Serializer strategy to use</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:Nancy.SimpleJson.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, null, etc).
            </summary>
        </member>
        <member name="T:Nancy.Localization.ITextResource">
            <summary>
            Used to return string values
            </summary>
        </member>
        <member name="P:Nancy.Localization.ITextResource.Item(System.String,Nancy.NancyContext)">
            <summary>
            Gets a translation based on the provided key.
            </summary>
            <param name="key">The key to look up the translation for.</param>
            <param name="context">The current <see cref="T:Nancy.NancyContext"/> instance.</param>
        </member>
        <member name="T:Nancy.Localization.ResourceBasedTextResource">
            <summary>
            Resource based implementation of <see cref="T:Nancy.Localization.ITextResource"/>
            </summary>
        </member>
        <member name="M:Nancy.Localization.ResourceBasedTextResource.#ctor(Nancy.IResourceAssemblyProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Nancy.Localization.ResourceBasedTextResource"/> to read strings from *.resx files
            </summary>
            <param name="resourceAssemblyProvider">The <see cref="T:Nancy.IResourceAssemblyProvider"/> that should be used when scanning.</param>
        </member>
        <member name="P:Nancy.Localization.ResourceBasedTextResource.Item(System.String,Nancy.NancyContext)">
            <summary>
            Used to return a string value from *.resx files
            </summary>
            <param name="key">The key to look for in the resource file</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> used to determine the culture for returning culture specific values.</param>
            <returns>Returns a string value from culture specific or default file or null if key does not exist as determined by <see cref="T:System.Resources.ResourceManager"/>.</returns>
        </member>
        <member name="T:Nancy.Localization.TextResourceFinder">
            <summary>
            Returns text from an implemented ITextResource
            </summary>
        </member>
        <member name="M:Nancy.Localization.TextResourceFinder.#ctor(Nancy.Localization.ITextResource,Nancy.NancyContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Localization.TextResourceFinder"/> class, with
            the provided <paramref name="textResource"/> and <paramref name="context"/>.
            </summary>
            <param name="textResource">The <see cref="T:Nancy.Localization.ITextResource"/> that should be used by the TextResourceFinder</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> that should be used by the TextResourceFinder</param>
        </member>
        <member name="P:Nancy.Localization.TextResourceFinder.Resource">
            <summary>
            Gets the <see cref="T:Nancy.Localization.ITextResource"/> that is being used to locate texts.
            </summary>
            <value>An <see cref="T:Nancy.Localization.ITextResource"/> instance.</value>
        </member>
        <member name="M:Nancy.Localization.TextResourceFinder.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Finds text resource
            </summary>
            <param name="binder">GetMemberBinder with dynamic text key</param>
            <param name="result">Text item</param>
            <returns>Returns a value or a non existing value from the <see cref="T:Nancy.Localization.ITextResource"/> implementation</returns>
        </member>
        <member name="P:Nancy.Localization.TextResourceFinder.Item(System.String)">
            <summary>
            Gets a translation based on the provided key.
            </summary>
            <param name="key">The key to look up the translation for.</param>
        </member>
        <member name="T:Nancy.Localization.TextResourceFinder.DynamicMemberChainer">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
        </member>
        <member name="M:Nancy.Localization.TextResourceFinder.DynamicMemberChainer.#ctor(System.String,Nancy.NancyContext,Nancy.Localization.ITextResource)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Localization.TextResourceFinder.DynamicMemberChainer"/> class.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="context">The nancy context instance.</param>
            <param name="resource">The text resource instance.</param>
        </member>
        <member name="M:Nancy.Localization.TextResourceFinder.DynamicMemberChainer.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Gets the member name concatenated to binder name.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Nancy.Localization.TextResourceFinder.DynamicMemberChainer.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Attempts to convert provided member name and context to the text resource representation.
            </summary>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Type returns the <see cref="T:System.String" /> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
            <param name="result">The result of the type conversion operation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
            <exception cref="T:System.InvalidOperationException">Cannot cast dynamic member access to anything else than a string.</exception>
        </member>
        <member name="M:Nancy.Localization.TextResourceFinder.DynamicMemberChainer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Nancy.MimeTypes">
            <summary>
            Holds the MIME types
            </summary>
        </member>
        <member name="M:Nancy.MimeTypes.AddType(System.String,System.String)">
            <summary>
            Adds a new MIME type.
            </summary>
            <param name="extension">File extension</param>
            <param name="type">MIME type</param>
        </member>
        <member name="M:Nancy.MimeTypes.GetMimeType(System.String)">
            <summary>
            Gets the MIME type for a file name.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="T:Nancy.ModelBinding.BindingConfig">
            <summary>
            Configurations that controls the behavior of the binder at runtime.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.BindingConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ModelBinding.BindingConfig"/> class.
            </summary>
        </member>
        <member name="F:Nancy.ModelBinding.BindingConfig.NoOverwrite">
            <summary>
            Binding configuration that permits that the binder overwrites non-default values.
            </summary>
        </member>
        <member name="F:Nancy.ModelBinding.BindingConfig.Default">
            <summary>
            Default binding configuration.
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingConfig.BodyOnly">
            <summary>
            Gets or sets whether the binder should be happy once it has bound to the request body. In this case,
            request and context parameters will not be bound to. If there is no body and this option is enabled,
            no binding will take place at all.
            </summary>
            <value><see langword="true" /> if the binder will stop once the body has been bound, otherwise <see langword="false" />.</value>
        </member>
        <member name="P:Nancy.ModelBinding.BindingConfig.IgnoreErrors">
            <summary>
            Gets or sets whether binding error should be ignored and the binder should continue with the next property.
            </summary>
            <remarks>Setting this property to <see langword="true" /> means that no <see cref="T:Nancy.ModelBinding.ModelBindingException"/> will be thrown if an error occurs.</remarks>
            <value><see langword="true" />If the binder should ignore errors, otherwise <see langword="false" />.</value>
        </member>
        <member name="P:Nancy.ModelBinding.BindingConfig.Overwrite">
            <summary>
            Gets or sets whether the binder is allowed to overwrite properties that does not have a default value.
            </summary>
            <value><see langword="true" /> if the binder is allowed to overwrite non-default values, otherwise <see langword="false" />.</value>
        </member>
        <member name="T:Nancy.ModelBinding.BindingContext">
            <summary>
            Model binding context object
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.Configuration">
            <summary>
            The binding configuration
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.Context">
            <summary>
            Current Nancy context
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.DestinationType">
            <summary>
            Binding destination type
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.GenericType">
            <summary>
            The generic type of a collection is only used when DestinationType is a enumerable.
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.Model">
            <summary>
            The current model object (or null for body deserialization)
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.ValidModelBindingMembers">
            <summary>
            DestinationType properties that are not black listed
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.RequestData">
            <summary>
            The incoming data fields
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.TypeConverters">
            <summary>
            Available type converters - user converters followed by any defaults
            </summary>
        </member>
        <member name="T:Nancy.ModelBinding.BindingDefaults">
            <summary>
            Provides default binding converters/deserializers
            The defaults have less precedence than any user supplied ones
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.BindingDefaults.#ctor(Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ModelBinding.BindingDefaults"/> class,
            with the provided <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="P:Nancy.ModelBinding.BindingDefaults.DefaultTypeConverters">
            <summary>
            Gets the default type converters
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Nancy.ModelBinding.ITypeConverter"/> instances.</value>
        </member>
        <member name="P:Nancy.ModelBinding.BindingDefaults.DefaultBodyDeserializers">
            <summary>
            Gets the default type converters
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Nancy.ModelBinding.IBodyDeserializer"/> instances.</value>
        </member>
        <member name="T:Nancy.ModelBinding.BindingMemberInfo">
            <summary>
            Represents a bindable member of a type, which can be a property or a field.
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingMemberInfo.MemberInfo">
            <summary>
            Gets a reference to the MemberInfo that this BindingMemberInfo represents. This can be a property or a field.
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingMemberInfo.Name">
            <summary>
            Gets the name of the property or field represented by this BindingMemberInfo.
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingMemberInfo.PropertyType">
            <summary>
            Gets the data type of the property or field represented by this BindingMemberInfo.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Constructs a BindingMemberInfo instance for a property.
            </summary>
            <param name="propertyInfo">The bindable property to represent.</param>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Constructs a BindingMemberInfo instance for a field.
            </summary>
            <param name="fieldInfo">The bindable field to represent.</param>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.GetValue(System.Object)">
            <summary>
            Gets the value from a specified object associated with the property or field represented by this BindingMemberInfo.
            </summary>
            <param name="sourceObject">The object whose property or field should be retrieved.</param>
            <returns>The value for this BindingMemberInfo's property or field in the specified object.</returns>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value from a specified object associated with the property or field represented by this BindingMemberInfo.
            </summary>
            <param name="destinationObject">The object whose property or field should be assigned.</param>
            <param name="newValue">The value to assign in the specified object to this BindingMemberInfo's property or field.</param>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.Equals(System.Object)">
            <inherit-doc/>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.Equals(Nancy.ModelBinding.BindingMemberInfo)">
            <summary>
            Compares two BindingMemberInfo's with eachother on their respective values rather then their reference
            </summary>
            <param name="obj">the other BindingMemberInfo</param>
            <returns>true when they are equal and false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.GetHashCode">
            <inherit-doc/>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.Collect``1">
            <summary>
            Returns an enumerable sequence of bindable properties for the specified type.
            </summary>
            <typeparam name="T">The type to enumerate.</typeparam>
            <returns>Bindable properties.</returns>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.Collect(System.Type)">
            <summary>
            Returns an enumerable sequence of bindable properties for the specified type.
            </summary>
            <param name="type">The type to enumerate.</param>
            <returns>Bindable properties.</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultBinder">
            <summary>
            Default binder - used as a fallback when a specific modelbinder
            is not available.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBinder.#ctor(System.Collections.Generic.IEnumerable{Nancy.ModelBinding.ITypeConverter},System.Collections.Generic.IEnumerable{Nancy.ModelBinding.IBodyDeserializer},Nancy.ModelBinding.IFieldNameConverter,Nancy.ModelBinding.BindingDefaults)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ModelBinding.DefaultBinder"/> class, with
            the provided <paramref name="typeConverters"/>, <paramref name="bodyDeserializers"/>, 
            <paramref name="fieldNameConverter"/> and <paramref name="defaults"/>.
            </summary>
            <param name="typeConverters">The type converters.</param>
            <param name="bodyDeserializers">The body deserializers.</param>
            <param name="fieldNameConverter">The field name converter.</param>
            <param name="defaults">The defaults for bindings.</param>
            <exception cref="T:System.ArgumentNullException">
            typeConverters
            or
            bodyDeserializers
            or
            fieldNameConverter
            or
            defaults
            </exception>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBinder.Bind(Nancy.NancyContext,System.Type,System.Object,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind to the given model type
            </summary>
            <param name="context">Current context</param>
            <param name="modelType">Model type to bind to</param>
            <param name="instance">Optional existing instance</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blackList">Blacklisted binding property names</param>
            <returns>Bound model</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBinder.GetBindingListInstanceCount(Nancy.NancyContext)">
             <summary>
             Gets the number of distinct indexes from context:
            
             i.e:
              IntProperty_5
              StringProperty_5
              IntProperty_7
              StringProperty_8
              You'll end up with a list of 3 matches: 5,7,8
            
             </summary>
             <param name="context">Current Context </param>
             <returns>An int containing the number of elements</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultBodyDeserializers.JsonBodyDeserializer">
            <summary>
            Deserializes request bodies in JSON format
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBodyDeserializers.JsonBodyDeserializer.#ctor(Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ModelBinding.DefaultBodyDeserializers.JsonBodyDeserializer"/>,
            with the provided <paramref name="environment"/>.
            </summary>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBodyDeserializers.JsonBodyDeserializer.CanDeserialize(Nancy.Responses.Negotiation.MediaRange,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the deserializer can deserialize the content type
            </summary>
            <param name="mediaRange">Content type to deserialize</param>
            <param name="context">Current <see cref="T:Nancy.ModelBinding.BindingContext"/>.</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBodyDeserializers.JsonBodyDeserializer.Deserialize(Nancy.Responses.Negotiation.MediaRange,System.IO.Stream,Nancy.ModelBinding.BindingContext)">
            <summary>
            Deserialize the request body to a model
            </summary>
            <param name="mediaRange">Content type to deserialize</param>
            <param name="bodyStream">Request body stream</param>
            <param name="context">Current context</param>
            <returns>Model instance</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultBodyDeserializers.XmlBodyDeserializer">
            <summary>
            Deserializes request bodies in XML format
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBodyDeserializers.XmlBodyDeserializer.CanDeserialize(Nancy.Responses.Negotiation.MediaRange,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the deserializer can deserialize the content type
            </summary>
            <param name="mediaRange">Content type to deserialize</param>
            <param name="context">Current <see cref="T:Nancy.ModelBinding.BindingContext"/>.</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBodyDeserializers.XmlBodyDeserializer.Deserialize(Nancy.Responses.Negotiation.MediaRange,System.IO.Stream,Nancy.ModelBinding.BindingContext)">
            <summary>
            Deserialize the request body to a model
            </summary>
            <param name="mediaRange">Content type to deserialize</param>
            <param name="bodyStream">Request body stream</param>
            <param name="context">Current <see cref="T:Nancy.ModelBinding.BindingContext"/>.</param>
            <returns>Model instance</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultConverters.CollectionConverter">
            <summary>
            Converter for handling enumerable types
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.CollectionConverter.CanConvertTo(System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the converter can convert to the destination type
            </summary>
            <param name="destinationType">Destination type</param>
            <param name="context">The current binding context</param>
            <returns>True if conversion supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.CollectionConverter.Convert(System.String,System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Convert the string representation to the destination type
            </summary>
            <param name="input">Input string</param>
            <param name="destinationType">Destination type</param>
            <param name="context">Current context</param>
            <returns>Converted object of the destination type</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultConverters.DateTimeConverter">
            <summary>
            Converter for datetime types
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.DateTimeConverter.CanConvertTo(System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the converter can convert to the destination type
            </summary>
            <param name="destinationType">Destination type</param>
            <param name="context">The current binding context</param>
            <returns>True if conversion supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.DateTimeConverter.Convert(System.String,System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Convert the string representation to the destination type
            </summary>
            <param name="input">Input string</param>
            <param name="destinationType">Destination type</param>
            <param name="context">Current context</param>
            <returns>Converted object of the destination type</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultConverters.FallbackConverter">
            <summary>
            A fallback converter that uses TypeDescriptor.GetConverter to try
            and convert the value.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.FallbackConverter.CanConvertTo(System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the converter can convert to the destination type
            </summary>
            <param name="destinationType">Destination type</param>
            <param name="context">The current binding context</param>
            <returns>True if conversion supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.FallbackConverter.Convert(System.String,System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Convert the string representation to the destination type
            </summary>
            <param name="input">Input string</param>
            <param name="destinationType">Destination type</param>
            <param name="context">Current context</param>
            <returns>Converted object of the destination type</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultConverters.NumericConverter">
            <summary>
            Converter for numeric types
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.NumericConverter.CanConvertTo(System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the converter can convert to the destination type
            </summary>
            <param name="destinationType">Destination type</param>
            <param name="context">The current binding context</param>
            <returns>True if conversion supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.NumericConverter.Convert(System.String,System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Convert the string representation to the destination type
            </summary>
            <param name="input">Input string</param>
            <param name="destinationType">Destination type</param>
            <param name="context">Current context</param>
            <returns>Converted object of the destination type</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultFieldNameConverter">
            <summary>
            Default field name converter
            Converts camel case to pascal case
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultFieldNameConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ModelBinding.DefaultFieldNameConverter"/> class.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultFieldNameConverter.Convert(System.String)">
            <summary>
            Converts a field name to a property name
            </summary>
            <param name="fieldName">Field name</param>
            <returns>Property name</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultModelBinderLocator">
            <summary>
            Locates model binders for a particular model
            </summary>
        </member>
        <member name="F:Nancy.ModelBinding.DefaultModelBinderLocator.binders">
            <summary>
            Available model binders
            </summary>
        </member>
        <member name="F:Nancy.ModelBinding.DefaultModelBinderLocator.fallbackBinder">
            <summary>
            Default model binder to fall back on
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultModelBinderLocator.#ctor(System.Collections.Generic.IEnumerable{Nancy.ModelBinding.IModelBinder},Nancy.ModelBinding.IBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ModelBinding.DefaultModelBinderLocator"/> class.
            </summary>
            <param name="binders">Available model binders</param>
            <param name="fallbackBinder">Fallback binder</param>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultModelBinderLocator.GetBinderForType(System.Type,Nancy.NancyContext)">
            <summary>
            Gets a binder for the given type
            </summary>
            <param name="modelType">Destination type to bind to</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance of the current request.</param>
            <returns>IModelBinder instance or null if none found</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DynamicModelBinderAdapter">
            <summary>
            Provides wiring up of a model binder when cast to a destination type
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DynamicModelBinderAdapter.#ctor(Nancy.ModelBinding.IModelBinderLocator,Nancy.NancyContext,System.Object,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ModelBinding.DynamicModelBinderAdapter"/> class.
            </summary>
            <param name="locator">Model binder locator</param>
            <param name="context">Nancy context</param>
            <param name="instance">Optional existing instance, or null</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Blacklisted property names</param>
        </member>
        <member name="M:Nancy.ModelBinding.DynamicModelBinderAdapter.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param><param name="result">The result of the type conversion operation.</param>
        </member>
        <member name="T:Nancy.ModelBinding.ExpressionExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Linq.Expressions.Expression"/> type.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.ExpressionExtensions.GetTargetMemberInfo(System.Linq.Expressions.Expression)">
            <summary>
            Retrieves the member that an expression is defined for.
            </summary>
            <param name="expression">The expression to retrieve the member from.</param>
            <returns>A <see cref="T:System.Reflection.MemberInfo"/> instance if the member could be found; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:Nancy.ModelBinding.IBinder">
            <summary>
            Binds incoming request data to a model type
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.IBinder.Bind(Nancy.NancyContext,System.Type,System.Object,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind to the given model type
            </summary>
            <param name="context">Current context</param>
            <param name="modelType">Model type to bind to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blackList">Blacklisted property names</param>
            <param name="instance">Existing instance of the object</param>
            <returns>Bound model</returns>
        </member>
        <member name="T:Nancy.ModelBinding.IBodyDeserializer">
            <summary>
            Provides a way to deserialize the contents of a request
            into a bound model.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.IBodyDeserializer.CanDeserialize(Nancy.Responses.Negotiation.MediaRange,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the deserializer can deserialize the content type
            </summary>
            <param name="mediaRange">Content type to deserialize</param>
            <param name="context">Current <see cref="T:Nancy.ModelBinding.BindingContext"/>.</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.IBodyDeserializer.Deserialize(Nancy.Responses.Negotiation.MediaRange,System.IO.Stream,Nancy.ModelBinding.BindingContext)">
            <summary>
            Deserialize the request body to a model
            </summary>
            <param name="mediaRange">Content type to deserialize</param>
            <param name="bodyStream">Request body stream</param>
            <param name="context">Current <see cref="T:Nancy.ModelBinding.BindingContext"/>.</param>
            <returns>Model instance</returns>
        </member>
        <member name="T:Nancy.ModelBinding.IFieldNameConverter">
            <summary>
            Provides the capability to supply a convention to
            convert form field names to property names if required.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.IFieldNameConverter.Convert(System.String)">
            <summary>
            Converts a field name to a property name
            </summary>
            <param name="fieldName">Field name</param>
            <returns>Property name</returns>
        </member>
        <member name="T:Nancy.ModelBinding.IModelBinder">
            <summary>
            Provides a way to bind an incoming request, via the context, to a model type
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.IModelBinder.CanBind(System.Type)">
            <summary>
            Whether the binder can bind to the given model type
            </summary>
            <param name="modelType">Required model type</param>
            <returns>True if binding is possible, false otherwise</returns>
        </member>
        <member name="T:Nancy.ModelBinding.IModelBinderLocator">
            <summary>
            Locates model binders for a particular model
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.IModelBinderLocator.GetBinderForType(System.Type,Nancy.NancyContext)">
            <summary>
            Gets a binder for the given type
            </summary>
            <param name="modelType">Destination type to bind to</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance of the current request.</param>
            <returns>IModelBinder instance or null if none found</returns>
        </member>
        <member name="T:Nancy.ModelBinding.ITypeConverter">
            <summary>
            Provides a way to convert from the incoming string representation
            of a type to the type itself.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.ITypeConverter.CanConvertTo(System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the converter can convert to the destination type
            </summary>
            <param name="destinationType">Destination type</param>
            <param name="context">The current binding context</param>
            <returns>True if conversion supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ITypeConverter.Convert(System.String,System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Convert the string representation to the destination type
            </summary>
            <param name="input">Input string</param>
            <param name="destinationType">Destination type</param>
            <param name="context">Current context</param>
            <returns>Converted object of the destination type</returns>
        </member>
        <member name="T:Nancy.ModelBinding.ModelBindingException">
            <summary>
            Represents an exception when attempting to bind to a model
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.ModelBindingException.PropertyBindingExceptions">
            <summary>
            Gets all failures
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.ModelBindingException.BoundType">
            <summary>
            Gets the model type, which caused the exception
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.ModelBindingException.#ctor(System.Type,System.Collections.Generic.IEnumerable{Nancy.ModelBinding.PropertyBindingException},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ModelBinding.ModelBindingException"/> class, with
            the provided <paramref name="boundType"/>, <paramref name="propertyBindingExceptions"/> and <paramref name="innerException"/>.
            </summary>
            <param name="boundType">the model type to bind to</param>
            <param name="propertyBindingExceptions">the original exceptions, thrown while binding the property</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Nancy.ModelBinding.ModelBindingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ModelBinding.ModelBindingException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Nancy.ModelBinding.ModuleExtensions">
            <summary>
            A convenience class that contains various extension methods for modules.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.ParseBlacklistedPropertiesExpressionTree``1(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Parses an array of expressions like <code>t =&gt; t.Property</code> to a list of strings containing the property names;
            </summary>
            <typeparam name="T">Type of the model</typeparam>
            <param name="expressions">Expressions that tell which property should be ignored</param>
            <returns>Array of strings containing the names of the properties.</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind(Nancy.INancyModule,System.String[])">
            <summary>
            Bind the incoming request to a model
            </summary>
            <param name="module">Current module</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <returns>Model adapter - cast to a model type to bind it</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind the incoming request to a model
            </summary>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <returns>Model adapter - cast to a model type to bind it</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule)">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule,System.String[])">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindAndValidate``1(Nancy.INancyModule,System.String[])">
            <summary>
            Bind the incoming request to a model and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <returns>Bound model instance</returns>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindAndValidate``1(Nancy.INancyModule,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to a model and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
            <returns>Bound model instance</returns>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindAndValidate``1(Nancy.INancyModule)">
            <summary>
            Bind the incoming request to a model and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <returns>Bound model instance</returns>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig)">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperty">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindAndValidate``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind the incoming request to a model and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <returns>Bound model instance</returns>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindAndValidate``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to a model and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
            <returns>Bound model instance</returns>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindAndValidate``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig)">
            <summary>
            Bind the incoming request to a model and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <returns>Bound model instance</returns>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindTo``1(Nancy.INancyModule,``0,System.String[])">
            <summary>
            Bind the incoming request to an existing instance
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindTo``1(Nancy.INancyModule,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to an existing instance
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindTo``1(Nancy.INancyModule,``0)">
            <summary>
            Bind the incoming request to an existing instance
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindToAndValidate``1(Nancy.INancyModule,``0,System.String[])">
            <summary>
            Bind the incoming request to an existing instance and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindToAndValidate``1(Nancy.INancyModule,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to an existing instance and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindToAndValidate``1(Nancy.INancyModule,``0)">
            <summary>
            Bind the incoming request to an existing instance and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindTo``1(Nancy.INancyModule,``0,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind the incoming request to an existing instance
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindTo``1(Nancy.INancyModule,``0,Nancy.ModelBinding.BindingConfig,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to an existing instance
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindTo``1(Nancy.INancyModule,``0,Nancy.ModelBinding.BindingConfig)">
            <summary>
            Bind the incoming request to an existing instance
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindToAndValidate``1(Nancy.INancyModule,``0,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind the incoming request to an existing instance and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindToAndValidate``1(Nancy.INancyModule,``0,Nancy.ModelBinding.BindingConfig,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to an existing instance and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
            <example>this.BindToAndValidate(person, config, p =&gt; p.Name, p =&gt; p.Age)</example>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindToAndValidate``1(Nancy.INancyModule,``0,Nancy.ModelBinding.BindingConfig)">
            <summary>
            Bind the incoming request to an existing instance and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="T:Nancy.ModelBinding.PropertyBindingException">
            <summary>
            Represents an exception occurred when binding the properties.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="P:Nancy.ModelBinding.PropertyBindingException.PropertyName">
            <summary>
            Gets the property name for which the bind failed
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.PropertyBindingException.AttemptedValue">
            <summary>
            Gets the value which was attempted to be assigned to the property
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.PropertyBindingException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates new instance
            </summary>
            <param name="propertyName">the name of the property which failed to bind</param>
            <param name="attemptedValue">the value attempted to set</param>
            <param name="innerException">the underlying exception</param>
        </member>
        <member name="T:Nancy.NamedPipelineBase`1">
            <summary>
            Abstract base class for named pipelines.
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
        </member>
        <member name="F:Nancy.NamedPipelineBase`1.pipelineItems">
            <summary>
            Pipeline items to execute
            </summary>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.NamedPipelineBase`1"/> class.
            </summary>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.NamedPipelineBase`1"/> class.
            </summary>
            <param name="capacity">The number of pipeline delegates.</param>
        </member>
        <member name="P:Nancy.NamedPipelineBase`1.PipelineItems">
            <summary>
            Gets the current pipeline items
            </summary>
        </member>
        <member name="P:Nancy.NamedPipelineBase`1.PipelineDelegates">
            <summary>
            Gets the current pipeline item delegates
            </summary>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.AddItemToStartOfPipeline(`0)">
            <summary>
            Add an item to the start of the pipeline
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.AddItemToStartOfPipeline(Nancy.PipelineItem{`0},System.Boolean)">
            <summary>
            Add an item to the start of the pipeline
            </summary>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.AddItemToEndOfPipeline(`0)">
            <summary>
            Add an item to the end of the pipeline
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.AddItemToEndOfPipeline(Nancy.PipelineItem{`0},System.Boolean)">
            <summary>
            Add an item to the end of the pipeline
            </summary>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.InsertItemAtPipelineIndex(System.Int32,`0)">
            <summary>
            Add an item to a specific place in the pipeline.
            </summary>
            <param name="index">Index to add at</param>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.InsertItemAtPipelineIndex(System.Int32,Nancy.PipelineItem{`0},System.Boolean)">
            <summary>
            Add an item to a specific place in the pipeline.
            </summary>
            <param name="index">Index to add at</param>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.InsertBefore(System.String,`0)">
            <summary>
            Insert an item before a named item.
            If the named item does not exist the item is inserted at the start of the pipeline.
            </summary>
            <param name="name">Name of the item to insert before</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.InsertBefore(System.String,Nancy.PipelineItem{`0})">
            <summary>
            Insert an item before a named item.
            If the named item does not exist the item is inserted at the start of the pipeline.
            </summary>
            <param name="name">Name of the item to insert before</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.InsertAfter(System.String,`0)">
            <summary>
            Insert an item after a named item.
            If the named item does not exist the item is inserted at the end of the pipeline.
            </summary>
            <param name="name">Name of the item to insert after</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.InsertAfter(System.String,Nancy.PipelineItem{`0})">
            <summary>
            Insert an item after a named item.
            If the named item does not exist the item is inserted at the end of the pipeline.
            </summary>
            <param name="name">Name of the item to insert after</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.RemoveByName(System.String)">
            <summary>
            Remove a named pipeline item
            </summary>
            <param name="name">Name</param>
            <returns>Index of item that was removed or -1 if nothing removed</returns>
        </member>
        <member name="T:Nancy.NancyContext">
            <summary>
            Nancy context.
            </summary>
        </member>
        <member name="M:Nancy.NancyContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.NancyContext"/> class.
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Items">
            <summary>
            Gets the dictionary for storage of per-request items. Disposable items will be disposed when the context is.
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.ResolvedRoute">
            <summary>
            Gets or sets the resolved route
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Parameters">
            <summary>
            Gets or sets the parameters for the resolved route
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Request">
            <summary>
            Gets or sets the incoming request
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Response">
            <summary>
            Gets or sets the outgoing response
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.CurrentUser">
            <summary>
            Gets or sets the current user
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Trace">
            <summary>
            Diagnostic request tracing
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.ControlPanelEnabled">
            <summary>
            Gets a value indicating whether control panel access is enabled for this request
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.ViewBag">
            <summary>
            Non-model specific data for rendering in the response
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.ModelValidationResult">
            <summary>
            Gets or sets the model validation result.
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Culture">
            <summary>
            Gets or sets the context's culture
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.NegotiationContext">
            <summary>
            Context of content negotiation (if relevant)
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Text">
            <summary>
            Gets or sets the dynamic object used to locate text resources.
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Environment">
            <summary>
            Gets or sets the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <value>An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</value>
        </member>
        <member name="M:Nancy.NancyContext.Dispose">
            <summary>
            Disposes any disposable items in the <see cref="P:Nancy.NancyContext.Items"/> dictionary.
            </summary>
        </member>
        <member name="T:Nancy.NancyEngine">
            <summary>
            Default engine for handling Nancy <see cref="T:Nancy.Request"/>s.
            </summary>
        </member>
        <member name="F:Nancy.NancyEngine.ERROR_KEY">
            <summary>
            Key for error type
            </summary>
        </member>
        <member name="F:Nancy.NancyEngine.ERROR_EXCEPTION">
            <summary>
            Key for error exception message
            </summary>
        </member>
        <member name="M:Nancy.NancyEngine.#ctor(Nancy.Routing.IRequestDispatcher,Nancy.INancyContextFactory,System.Collections.Generic.IEnumerable{Nancy.ErrorHandling.IStatusCodeHandler},Nancy.Diagnostics.IRequestTracing,Nancy.IStaticContentProvider,Nancy.Responses.Negotiation.IResponseNegotiator,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.NancyEngine"/> class.
            </summary>
            <param name="dispatcher">An <see cref="T:Nancy.Routing.IRouteResolver"/> instance that will be used to resolve a route, from the modules, that matches the incoming <see cref="T:Nancy.Request"/>.</param>
            <param name="contextFactory">A factory for creating contexts</param>
            <param name="statusCodeHandlers">Error handlers</param>
            <param name="requestTracing">The request tracing instance.</param>
            <param name="staticContentProvider">The provider to use for serving static content</param>
            <param name="negotiator">The response negotiator.</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="P:Nancy.NancyEngine.RequestPipelinesFactory">
            <summary>
            Factory for creating an <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance for a incoming request.
            </summary>
            <value>An <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance.</value>
        </member>
        <member name="M:Nancy.NancyEngine.HandleRequest(Nancy.Request,System.Func{Nancy.NancyContext,Nancy.NancyContext},System.Threading.CancellationToken)">
            <summary>
            Handles an incoming <see cref="T:Nancy.Request"/> async.
            </summary>
            <param name="request">An <see cref="T:Nancy.Request"/> instance, containing the information about the current request.</param>
            <param name="preRequest">Delegate to call before the request is processed</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Nancy.NancyEngine.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Nancy.NancyEngineExtensions">
            <summary>
            Extensions for Nancy engine
            </summary>
        </member>
        <member name="M:Nancy.NancyEngineExtensions.HandleRequest(Nancy.INancyEngine,Nancy.Request)">
            <summary>
            Handles an incoming <see cref="T:Nancy.Request"/>.
            </summary>
            <param name="nancyEngine">The <see cref="T:Nancy.INancyEngine"/> instance.</param>
            <param name="request">An <see cref="T:Nancy.Request"/> instance, containing the information about the current request.</param>
            <returns>A <see cref="T:Nancy.NancyContext"/> instance containing the request/response context.</returns>
        </member>
        <member name="T:Nancy.NancyModule">
            <summary>
            Basic class containing the functionality for defining routes and actions in Nancy.
            </summary>
        </member>
        <member name="M:Nancy.NancyModule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.NancyModule"/> class.
            </summary>
        </member>
        <member name="M:Nancy.NancyModule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.NancyModule"/> class.
            </summary>
            <param name="modulePath">A <see cref="T:System.String"/> containing the root relative path that all paths in the module will be a subset of.</param>
        </member>
        <member name="P:Nancy.NancyModule.ViewBag">
            <summary>
            Non-model specific data for rendering in the response
            </summary>
        </member>
        <member name="P:Nancy.NancyModule.Text">
            <summary>
            Dynamic access to text resources.
            </summary>
        </member>
        <member name="M:Nancy.NancyModule.Delete(System.String,System.Func{System.Object,System.Object},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for DELETE requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Delete``1(System.String,System.Func{System.Object,``0},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for DELETE requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Delete(System.String,System.Func{System.Object,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for DELETE requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Delete``1(System.String,System.Func{System.Object,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for DELETE requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Delete(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for DELETE requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Delete``1(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for DELETE requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Get(System.String,System.Func{System.Object,System.Object},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for GET requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Get``1(System.String,System.Func{System.Object,``0},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for GET requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Get(System.String,System.Func{System.Object,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for GET requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Get``1(System.String,System.Func{System.Object,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for GET requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Get(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for GET requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Get``1(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for GET requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Head(System.String,System.Func{System.Object,System.Object},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for HEAD requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Head``1(System.String,System.Func{System.Object,``0},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for HEAD requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Head(System.String,System.Func{System.Object,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for HEAD requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Head``1(System.String,System.Func{System.Object,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for HEAD requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Head(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for HEAD requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Head``1(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for HEAD requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Options(System.String,System.Func{System.Object,System.Object},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for OPTIONS requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Options``1(System.String,System.Func{System.Object,``0},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for OPTIONS requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Options(System.String,System.Func{System.Object,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for OPTIONS requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Options``1(System.String,System.Func{System.Object,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for OPTIONS requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Options(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for OPTIONS requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Options``1(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for OPTIONS requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Patch(System.String,System.Func{System.Object,System.Object},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for PATCH requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Patch``1(System.String,System.Func{System.Object,``0},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for PATCH requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Patch(System.String,System.Func{System.Object,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for PATCH requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Patch``1(System.String,System.Func{System.Object,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for PATCH requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Patch(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for PATCH requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Patch``1(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for PATCH requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Post(System.String,System.Func{System.Object,System.Object},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for POST requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Post``1(System.String,System.Func{System.Object,``0},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for POST requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Post(System.String,System.Func{System.Object,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for POST requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Post``1(System.String,System.Func{System.Object,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for POST requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Post(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for POST requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Post``1(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for POST requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Put(System.String,System.Func{System.Object,System.Object},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for PUT requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Put``1(System.String,System.Func{System.Object,``0},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for PUT requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Put(System.String,System.Func{System.Object,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for PUT requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Put``1(System.String,System.Func{System.Object,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for PUT requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Put(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for PUT requests.
            </summary>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="M:Nancy.NancyModule.Put``1(System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for PUT requests.
            </summary>
            <typeparam name="T">The return type of the <paramref name="action"/></typeparam>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="name">Name of the route</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="P:Nancy.NancyModule.ModulePath">
            <summary>
            Get the root path of the routes in the current module.
            </summary>
            <value>
            A <see cref="T:System.String" /> containing the root path of the module or <see langword="null" />
            if no root path should be used.</value><remarks>All routes will be relative to this root path.
            </remarks>
        </member>
        <member name="P:Nancy.NancyModule.Routes">
            <summary>
            Gets all declared routes by the module.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing all <see cref="T:Nancy.Routing.Route"/> instances declared by the module.</value>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
        </member>
        <member name="P:Nancy.NancyModule.Session">
            <summary>
            Gets the current session.
            </summary>
        </member>
        <member name="P:Nancy.NancyModule.View">
            <summary>
            Renders a view from inside a route handler.
            </summary>
            <value>A <see cref="T:Nancy.ViewRenderer"/> instance that is used to determine which view that should be rendered.</value>
        </member>
        <member name="P:Nancy.NancyModule.Negotiate">
            <summary>
            Used to negotiate the content returned based on Accepts header.
            </summary>
            <value>A <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> instance that is used to negotiate the content returned.</value>
        </member>
        <member name="P:Nancy.NancyModule.ValidatorLocator">
            <summary>
            Gets or sets the validator locator.
            </summary>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
        </member>
        <member name="P:Nancy.NancyModule.Request">
            <summary>
            Gets or sets an <see cref="P:Nancy.NancyModule.Request"/> instance that represents the current request.
            </summary>
            <value>An <see cref="P:Nancy.NancyModule.Request"/> instance.</value>
        </member>
        <member name="P:Nancy.NancyModule.ViewFactory">
            <summary>
            The extension point for accessing the view engines in Nancy.
            </summary><value>An <see cref="T:Nancy.ViewEngines.IViewFactory" /> instance.</value>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
        </member>
        <member name="P:Nancy.NancyModule.After">
            <summary><para>
            The post-request hook
            </para><para>
            The post-request hook is called after the response is created by the route execution.
            It can be used to rewrite the response or add/remove items from the context.
            </para>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
            </summary>
        </member>
        <member name="P:Nancy.NancyModule.Before">
            <summary>
            <para>
            The pre-request hook
            </para>
            <para>
            The PreRequest hook is called prior to executing a route. If any item in the
            pre-request pipeline returns a response then the route is not executed and the
            response is returned.
            </para>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
            </summary>
        </member>
        <member name="P:Nancy.NancyModule.OnError">
            <summary>
            <para>
            The error hook
            </para>
            <para>
            The error hook is called if an exception is thrown at any time during executing
            the PreRequest hook, a route and the PostRequest hook. It can be used to set
            the response and/or finish any ongoing tasks (close database session, etc).
            </para>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
            </summary>
        </member>
        <member name="P:Nancy.NancyModule.Context">
            <summary>
            Gets or sets the current Nancy context
            </summary>
            <value>A <see cref="T:Nancy.NancyContext" /> instance.</value>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
        </member>
        <member name="P:Nancy.NancyModule.Response">
            <summary>
            An extension point for adding support for formatting response contents.
            </summary><value>This property will always return <see langword="null" /> because it acts as an extension point.</value><remarks>Extension methods to this property should always return <see cref="P:Nancy.NancyModuleBase.Response" /> or one of the types that can implicitly be types into a <see cref="P:Nancy.NancyModuleBase.Response" />.</remarks>
        </member>
        <member name="P:Nancy.NancyModule.ModelBinderLocator">
            <summary>
            Gets or sets the model binder locator
            </summary>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
        </member>
        <member name="P:Nancy.NancyModule.ModelValidationResult">
            <summary>
            Gets or sets the model validation result
            </summary>
            <remarks>This is automatically set by Nancy at runtime when you run validation.</remarks>
        </member>
        <member name="M:Nancy.NancyModule.AddRoute``1(System.String,System.String,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{Nancy.NancyContext,System.Boolean},System.String)">
            <summary>
            Declares a route for the module
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Name of the route</param>
            <param name="method">The HTTP method that the route will response to</param>
            <param name="path">The path that the route will respond to</param>
            <param name="action">Action that will be invoked when the route it hit</param>
            <param name="condition">A condition to determine if the route can be hit</param>
        </member>
        <member name="T:Nancy.NegotiatorExtensions">
            <summary>
            Extensions for negotioator
            </summary>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithCookie(Nancy.Responses.Negotiation.Negotiator,Nancy.Cookies.INancyCookie)">
            <summary>
            Add a cookie to the response.
            </summary>
            <param name="negotiator">The <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> instance.</param>
            <param name="cookie">The <see cref="T:Nancy.Cookies.INancyCookie"/> instance that should be added.</param>
            <returns>The modified <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> instance.</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithCookies(Nancy.Responses.Negotiation.Negotiator,System.Collections.Generic.IEnumerable{Nancy.Cookies.INancyCookie})">
            <summary>
            Add a collection of cookies to the response.
            </summary>
            <param name="negotiator">The <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> instance.</param>
            <param name="cookies">The <see cref="T:Nancy.Cookies.INancyCookie"/> instances that should be added.</param>
            <returns>The modified <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> instance.</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithHeader(Nancy.Responses.Negotiation.Negotiator,System.String,System.String)">
            <summary>
            Add a header to the response
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="header">Header name</param>
            <param name="value">Header value</param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithContentType(Nancy.Responses.Negotiation.Negotiator,System.String)">
            <summary>
            Add a content type to the response
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="contentType">Content type value</param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithHeaders(Nancy.Responses.Negotiation.Negotiator,System.Object[])">
            <summary>
            Adds headers to the response using anonymous types
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="headers">
            Array of headers - each header should be an anonymous type with two string properties
            'Header' and 'Value' to represent the header name and its value.
            </param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithHeaders(Nancy.Responses.Negotiation.Negotiator,System.Tuple{System.String,System.String}[])">
            <summary>
            Adds headers to the response using anonymous types
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="headers">
            Array of headers - each header should be a Tuple with two string elements
            for header name and header value
            </param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithFullNegotiation(Nancy.Responses.Negotiation.Negotiator)">
            <summary>
            Allows the response to be negotiated with any processors available for any content type
            </summary>
            <param name="negotiator">Negotiator object</param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithAllowedMediaRange(Nancy.Responses.Negotiation.Negotiator,Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Allows the response to be negotiated with a specific media range
            This will remove the wildcard range if it is already specified
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="mediaRange">Media range to add</param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithModel(Nancy.Responses.Negotiation.Negotiator,System.Object)">
            <summary>
            Uses the specified model as the default model for negotiation
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="model">Model object</param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithView(Nancy.Responses.Negotiation.Negotiator,System.String)">
            <summary>
            Uses the specified view for html output
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="viewName">View name</param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithMediaRangeModel(Nancy.Responses.Negotiation.Negotiator,Nancy.Responses.Negotiation.MediaRange,System.Object)">
            <summary>
            Sets the model to use for a particular media range.
            Will also add the MediaRange to the allowed list
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="range">Range to match against</param>
            <param name="model">Model object</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithMediaRangeModel(Nancy.Responses.Negotiation.Negotiator,Nancy.Responses.Negotiation.MediaRange,System.Func{System.Object})">
            <summary>
            Sets the model to use for a particular media range.
            Will also add the MediaRange to the allowed list
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="range">Range to match against</param>
            <param name="modelFactory">Model factory for returning the model object</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithMediaRangeResponse(Nancy.Responses.Negotiation.Negotiator,Nancy.Responses.Negotiation.MediaRange,Nancy.Response)">
            <summary>
            Sets the <see cref="T:Nancy.Response"/> to use for a particular media range.
            Will also add the MediaRange to the allowed list
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="range">Range to match against</param>
            <param name="response">A <see cref="T:Nancy.Response"/> object</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithMediaRangeResponse(Nancy.Responses.Negotiation.Negotiator,Nancy.Responses.Negotiation.MediaRange,System.Func{Nancy.Response})">
            <summary>
            Sets the <see cref="T:Nancy.Response"/> to use for a particular media range.
            Will also add the MediaRange to the allowed list
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="range">Range to match against</param>
            <param name="responseFactory">Factory for returning the <see cref="T:Nancy.Response"/> object</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithStatusCode(Nancy.Responses.Negotiation.Negotiator,System.Int32)">
            <summary>
            Sets the status code that should be assigned to the final response.
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="statusCode">The status code that should be used.</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithReasonPhrase(Nancy.Responses.Negotiation.Negotiator,System.String)">
            <summary>
            Sets the description of the status code that should be assigned to the final response.
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="reasonPhrase">The status code description that should be used.</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithStatusCode(Nancy.Responses.Negotiation.Negotiator,Nancy.HttpStatusCode)">
            <summary>
            Sets the status code that should be assigned to the final response.
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="statusCode">The status code that should be used.</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="T:Nancy.NotFoundResponse">
            <summary>
            Not Found response
            </summary>
            <seealso cref="T:Nancy.Response" />
        </member>
        <member name="M:Nancy.NotFoundResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.NotFoundResponse"/> class.
            </summary>
        </member>
        <member name="T:Nancy.Owin.DelegateExtensions">
            <summary>
            OWIN extensions for the delegate-based approach.
            </summary>
        </member>
        <member name="M:Nancy.Owin.DelegateExtensions.UseNancy(System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}},System.Action{Nancy.Owin.NancyOptions})">
            <summary>
            Adds Nancy to the OWIN pipeline.
            </summary>
            <param name="builder">The application builder delegate.</param>
            <param name="action">A configuration builder action.</param>
            <returns>The application builder delegate.</returns>
        </member>
        <member name="M:Nancy.Owin.DelegateExtensions.UseNancy(System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}},Nancy.Owin.NancyOptions)">
            <summary>
            Adds Nancy to the OWIN pipeline.
            </summary>
            <param name="builder">The application builder delegate.</param>
            <param name="options">The Nancy options.</param>
            <returns>The application builder delegate.</returns>
        </member>
        <member name="T:Nancy.Owin.NancyContextExtensions">
            <summary>
            OWIN extensions for the NancyContext.
            </summary>
        </member>
        <member name="M:Nancy.Owin.NancyContextExtensions.GetOwinEnvironment(Nancy.NancyContext)">
            <summary>
            Gets the OWIN environment dictionary.
            </summary>
            <param name="context">The Nancy context.</param>
            <returns>The OWIN environment dictionary.</returns>
        </member>
        <member name="T:Nancy.Owin.NancyMiddleware">
            <summary>
            Nancy middleware for OWIN.
            </summary>
        </member>
        <member name="F:Nancy.Owin.NancyMiddleware.RequestEnvironmentKey">
            <summary>
            The request environment key
            </summary>
        </member>
        <member name="M:Nancy.Owin.NancyMiddleware.UseNancy(System.Action{Nancy.Owin.NancyOptions})">
            <summary>
            Use Nancy in an OWIN pipeline
            </summary>
            <param name="configuration">A delegate to configure the <see cref="T:Nancy.Owin.NancyOptions"/>.</param>
            <returns>An OWIN middleware delegate.</returns>
        </member>
        <member name="M:Nancy.Owin.NancyMiddleware.UseNancy(Nancy.Owin.NancyOptions)">
            <summary>
            Use Nancy in an OWIN pipeline
            </summary>
            <param name="options">An <see cref="T:Nancy.Owin.NancyOptions"/> to configure the Nancy middleware</param>
            <returns>An OWIN middleware delegate.</returns>
        </member>
        <member name="M:Nancy.Owin.NancyMiddleware.RequestComplete(Nancy.NancyContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{Nancy.NancyContext,System.Boolean},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task})">
            <summary>
            Gets a delegate to handle converting a nancy response
            to the format required by OWIN and signals that the we are
            now complete.
            </summary>
            <param name="context">The Nancy Context.</param>
            <param name="environment">OWIN environment.</param>
            <param name="next">The next stage in the OWIN pipeline.</param>
            <param name="performPassThrough">A predicate that will allow the caller to determine if the request passes through to the 
            next stage in the owin pipeline.</param>
            <returns>Delegate</returns>
        </member>
        <member name="M:Nancy.Owin.NancyMiddleware.CreateUrl(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates the Nancy URL
            </summary>
            <param name="owinRequestHost">OWIN Hostname</param>
            <param name="owinRequestScheme">OWIN Scheme</param>
            <param name="owinRequestPathBase">OWIN Base path</param>
            <param name="owinRequestPath">OWIN Path</param>
            <param name="owinRequestQueryString">OWIN Querystring</param>
            <returns></returns>
        </member>
        <member name="M:Nancy.Owin.NancyMiddleware.StoreEnvironment(System.Collections.Generic.IDictionary{System.String,System.Object},System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets a delegate to store the OWIN environment and flow the user into the NancyContext
            </summary>
            <param name="environment">The OWIN environment.</param>
            <param name="user">The user as a ClaimsPrincipal.</param>
            <returns>Delegate</returns>
        </member>
        <member name="T:Nancy.Owin.NancyOptions">
            <summary>
            Options for hosting Nancy with OWIN.
            </summary>
        </member>
        <member name="P:Nancy.Owin.NancyOptions.Bootstrapper">
            <summary>
            Gets or sets the bootstrapper. If none is set, NancyBootstrapperLocator.Bootstrapper is used.
            </summary>
        </member>
        <member name="P:Nancy.Owin.NancyOptions.PerformPassThrough">
            <summary>
            Gets or sets the delegate that determines if NancyMiddleware performs pass through.
            </summary>
        </member>
        <member name="P:Nancy.Owin.NancyOptions.EnableClientCertificates">
            <summary>
            Gets or sets a value indicating whether to request a client certificate or not.
            Defaults to false.
            </summary>
        </member>
        <member name="T:Nancy.Owin.NancyOptionsExtensions">
            <summary>
            Extensions for the NancyOptions class.
            </summary>
        </member>
        <member name="M:Nancy.Owin.NancyOptionsExtensions.PassThroughWhenStatusCodesAre(Nancy.Owin.NancyOptions,Nancy.HttpStatusCode[])">
            <summary>
            Tells the NancyMiddleware to pass through when
            response has one of the given status codes.
            </summary>
            <param name="nancyOptions">The Nancy options.</param>
            <param name="httpStatusCode">The HTTP status code.</param>
        </member>
        <member name="T:Nancy.PipelineItem`1">
            <summary>
            Defines a pipeline item
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
        </member>
        <member name="P:Nancy.PipelineItem`1.Name">
            <summary>
            Gets or sets the pipeline item name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Nancy.PipelineItem`1.Delegate">
            <summary>
            Gets or sets the delegate.
            </summary>
            <value>
            The delegate.
            </value>
        </member>
        <member name="M:Nancy.PipelineItem`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.PipelineItem`1"/> class, with
            the provided <paramref name="name"/> and <paramref name="delegate"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="delegate">The delegate.</param>
        </member>
        <member name="M:Nancy.PipelineItem`1.op_Implicit(`0)~Nancy.PipelineItem{`0}">
            <summary>
            Performs an implicit conversion from <typeparamref name="TDelegate"/> cref="TDelegate"/> to <see cref="T:Nancy.PipelineItem`1"/>.
            </summary>
            <param name="action">The action.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.PipelineItem`1.op_Implicit(Nancy.PipelineItem{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.PipelineItem`1"/> to <typeparamref name="TDelegate"/>.
            </summary>
            <param name="pipelineItem">The pipeline item.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Nancy.Request">
            <summary>
            Encapsulates HTTP-request information to an Nancy application.
            </summary>
        </member>
        <member name="M:Nancy.Request.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Request"/> class, with
            the provided <paramref name="method"/>, <paramref name="path"/> and <paramref name="scheme"/>.
            </summary>
            <param name="method">The HTTP data transfer method used by the client.</param>
            <param name="path">The path of the requested resource, relative to the "Nancy root". This should not include the scheme, host name, or query portion of the URI.</param>
            <param name="scheme">The HTTP protocol that was used by the client.</param>
        </member>
        <member name="M:Nancy.Request.#ctor(System.String,Nancy.Url,System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},System.String,System.Security.Cryptography.X509Certificates.X509Certificate,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Request"/> class, with
            the provided <paramref name="method"/>, <paramref name="url"/>, <paramref name="headers"/>, 
            <paramref name="body"/>, <paramref name="ip"/>, <paramref name="certificate"/> and <paramref name="protocolVersion"/>.
            </summary>
            <param name="method">The HTTP data transfer method used by the client.</param>
            <param name="url">The <see cref="P:Nancy.Request.Url"/> of the requested resource</param>
            <param name="headers">The headers that was passed in by the client.</param>
            <param name="body">The <see cref="T:System.IO.Stream"/> that represents the incoming HTTP body.</param>
            <param name="ip">The client's IP address</param>
            <param name="certificate">The client's certificate when present.</param>
            <param name="protocolVersion">The HTTP protocol version.</param>
        </member>
        <member name="P:Nancy.Request.ClientCertificate">
            <summary>
            Gets the certificate sent by the client.
            </summary>
        </member>
        <member name="P:Nancy.Request.ProtocolVersion">
            <summary>
            Gets the HTTP protocol version.
            </summary>
        </member>
        <member name="P:Nancy.Request.UserHostAddress">
            <summary>
            Gets the IP address of the client
            </summary>
        </member>
        <member name="P:Nancy.Request.Method">
            <summary>
            Gets or sets the HTTP data transfer method used by the client.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Nancy.Request.Url">
            <summary>
            Gets the url
            </summary>
        </member>
        <member name="P:Nancy.Request.Path">
            <summary>
            Gets the request path, relative to the base path.
            Used for route matching etc.
            </summary>
        </member>
        <member name="P:Nancy.Request.Query">
            <summary>
            Gets the query string data of the requested resource.
            </summary>
            <value>A <see cref="T:Nancy.DynamicDictionary"/>instance, containing the key/value pairs of query string data.</value>
        </member>
        <member name="P:Nancy.Request.Body">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> that can be used to read the incoming HTTP body
            </summary>
            <value>A <see cref="T:System.IO.Stream"/> object representing the incoming HTTP body.</value>
        </member>
        <member name="P:Nancy.Request.Cookies">
            <summary>
            Gets the request cookies.
            </summary>
        </member>
        <member name="P:Nancy.Request.Session">
            <summary>
            Gets the current session.
            </summary>
        </member>
        <member name="M:Nancy.Request.GetCookieData">
            <summary>
            Gets the cookie data from the request header if it exists
            </summary>
            <returns>Cookies dictionary</returns>
        </member>
        <member name="P:Nancy.Request.Files">
            <summary>
            Gets a collection of files sent by the client-
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing an <see cref="T:Nancy.HttpFile"/> instance for each uploaded file.</value>
        </member>
        <member name="P:Nancy.Request.Form">
            <summary>
            Gets the form data of the request.
            </summary>
            <value>A <see cref="T:Nancy.DynamicDictionary"/>instance, containing the key/value pairs of form data.</value>
            <remarks>Currently Nancy will only parse form data sent using the application/x-www-url-encoded mime-type.</remarks>
        </member>
        <member name="P:Nancy.Request.Headers">
            <summary>
            Gets the HTTP headers sent by the client.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the name and values of the headers.</value>
            <remarks>The values are stored in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of string to be compliant with multi-value headers.</remarks>
        </member>
        <member name="M:Nancy.Request.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Nancy.RequestExecutionException">
            <summary>
            Exception that is thrown when an unhandled exception occurred during
            the execution of the current request.
            </summary>
        </member>
        <member name="M:Nancy.RequestExecutionException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.RequestExecutionException"/>, with
            the specified <paramref name="innerException"/>.
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="T:Nancy.RequestHeaders">
            <summary>
            Provides strongly-typed access to HTTP request headers.
            </summary>
        </member>
        <member name="M:Nancy.RequestHeaders.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.RequestHeaders"/> class.
            </summary>
            <param name="headers">The headers.</param>
        </member>
        <member name="P:Nancy.RequestHeaders.Accept">
            <summary>
            Content-types that are acceptable.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.AcceptCharset">
            <summary>
            Character sets that are acceptable.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.AcceptEncoding">
            <summary>
            Acceptable encodings.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.AcceptLanguage">
            <summary>
            Acceptable languages for response.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Authorization">
            <summary>
            Authorization header value for request.
            </summary>
            <value>A <see cref="T:System.String"/> containing the header value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.CacheControl">
            <summary>
            Used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Cookie">
            <summary>
            Contains name/value pairs of information stored for that URL.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains <see cref="T:Nancy.Cookies.INancyCookie"/> instances if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Connection">
            <summary>
            What type of connection the user-agent would prefer.
            </summary>
            <value>A <see cref="T:System.String"/> containing the header value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.ContentLength">
            <summary>
            The length of the request body in octets (8-bit bytes).
            </summary>
            <value>The length of the contents if it is available; otherwise 0.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.ContentType">
            <summary>
            The mime type of the body of the request (used with POST and PUT requests).
            </summary>
            <value>A <see cref="T:Nancy.Responses.Negotiation.MediaRange"/> containing the header value if it is available; otherwise <see langword="null"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Date">
            <summary>
            The date and time that the message was sent.
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance that specifies when the message was sent. If not available then <see langword="null"/> will be returned.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Host">
            <summary>
            The domain name of the server (for virtual hosting), mandatory since HTTP/1.1
            </summary>
            <value>A <see cref="T:System.String"/> containing the header value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.IfMatch">
            <summary>
            Only perform the action if the client supplied entity matches the same entity on the server. This is mainly for methods like PUT to only update a resource if it has not been modified since the user last updated it.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.IfModifiedSince">
            <summary>
            Allows a 304 Not Modified to be returned if content is unchanged
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance that specifies when the requested resource must have been changed since. If not available then <see langword="null"/> will be returned.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.IfNoneMatch">
            <summary>
            Allows a 304 Not Modified to be returned if content is unchanged
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.IfRange">
            <summary>
            If the entity is unchanged, send me the part(s) that I am missing; otherwise, send me the entire new entity.
            </summary>
            <value>A <see cref="T:System.String"/> containing the header value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.IfUnmodifiedSince">
            <summary>
            Only send the response if the entity has not been modified since a specific time.
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance that specifies when the requested resource may not have been changed since. If not available then <see langword="null"/> will be returned.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Keys">
            <summary>
            Gets the names of the available request headers.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the names of the headers.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.MaxForwards">
            <summary>
            Limit the number of times the message can be forwarded through proxies or gateways.
            </summary>
            <value>The number of the maximum allowed number of forwards if it is available; otherwise 0.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Referrer">
            <summary>
            This is the address of the previous web page from which a link to the currently requested page was followed.
            </summary>
            <value>A <see cref="T:System.String"/> containing the header value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.UserAgent">
            <summary>
            The user agent string of the user agent
            </summary>
            <value>A <see cref="T:System.String"/> containing the header value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Values">
            <summary>
            Gets all the header values.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains all the header values.</value>
        </member>
        <member name="M:Nancy.RequestHeaders.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Nancy.RequestHeaders.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Nancy.RequestHeaders.Item(System.String)">
            <summary>
            Gets the values for the header identified by the <paramref name="name"/> parameter.
            </summary>
            <param name="name">The name of the header to return the values for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the values for the header. If the header is not defined then <see cref="M:System.Linq.Enumerable.Empty``1"/> is returned.</returns>
        </member>
        <member name="T:Nancy.ResourceAssemblyProvider">
            <summary>
            Default set of assemblies that should be scanned for items (views, text, content etc)
            embedded as resources.
            </summary>
            <remarks>The default convention will scan all assemblies that references another assemblies that has a name that starts with Nancy*</remarks>
        </member>
        <member name="M:Nancy.ResourceAssemblyProvider.#ctor(Nancy.IAssemblyCatalog)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ResourceAssemblyProvider"/>
            </summary>
            <param name="assemblyCatalog">An <see cref="T:Nancy.IAssemblyCatalog"/> instance.</param>
        </member>
        <member name="M:Nancy.ResourceAssemblyProvider.GetAssembliesToScan">
            <summary>
            Gets a list of assemblies that should be scanned for views.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Reflection.Assembly"/> instances.</returns>
        </member>
        <member name="T:Nancy.Response">
            <summary>
            Encapsulates HTTP-response information from an Nancy operation.
            </summary>
        </member>
        <member name="F:Nancy.Response.NoBody">
            <summary>
            Null object representing no body
            </summary>
        </member>
        <member name="M:Nancy.Response.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Response"/> class.
            </summary>
        </member>
        <member name="P:Nancy.Response.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>The type of the content.</value>
            <remarks>The default value is <c>text/html</c>.</remarks>
        </member>
        <member name="P:Nancy.Response.Contents">
            <summary>
            Gets the delegate that will render contents to the response stream.
            </summary>
            <value>An <see cref="T:System.Action`1"/> delegate, containing the code that will render contents to the response stream.</value>
            <remarks>The host of Nancy will pass in the output stream after the response has been handed back to it by Nancy.</remarks>
        </member>
        <member name="P:Nancy.Response.Headers">
            <summary>
            Gets the collection of HTTP response headers that should be sent back to the client.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance, containing the key/value pair of headers.</value>
        </member>
        <member name="P:Nancy.Response.StatusCode">
            <summary>
            Gets or sets the HTTP status code that should be sent back to the client.
            </summary>
            <value>A <see cref="T:Nancy.HttpStatusCode"/> value.</value>
        </member>
        <member name="P:Nancy.Response.ReasonPhrase">
            <summary>
            Gets or sets a text description of the HTTP status code returned to the client.
            </summary>
            <value>The HTTP status code description.</value>
        </member>
        <member name="P:Nancy.Response.Cookies">
            <summary>
            Gets the <see cref="T:Nancy.Cookies.INancyCookie"/> instances that are associated with the response.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.IList`1"/> instance, containing <see cref="T:Nancy.Cookies.INancyCookie"/> instances.</value>
        </member>
        <member name="M:Nancy.Response.PreExecute(Nancy.NancyContext)">
            <summary>
            Executes at the end of the nancy execution pipeline and before control is passed back to the hosting.
            Can be used to pre-render/validate views while still inside the main pipeline/error handling.
            </summary>
            <param name="context">Nancy context</param>
            <returns>Task for completion/erroring</returns>
        </member>
        <member name="M:Nancy.Response.op_Implicit(Nancy.HttpStatusCode)~Nancy.Response">
            <summary>
            Implicitly cast an <see cref="T:Nancy.HttpStatusCode"/> value to a <see cref="T:Nancy.Response"/> instance, with the <see cref="P:Nancy.Response.StatusCode"/>
            set to the value of the <see cref="T:Nancy.HttpStatusCode"/>.
            </summary>
            <param name="statusCode">The <see cref="T:Nancy.HttpStatusCode"/> value that is being cast from.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Response.op_Implicit(System.Int32)~Nancy.Response">
            <summary>
            Implicitly cast an int value to a <see cref="T:Nancy.Response"/> instance, with the <see cref="P:Nancy.Response.StatusCode"/>
            set to the value of the int.
            </summary>
            <param name="statusCode">The int value that is being cast from.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Response.op_Implicit(System.String)~Nancy.Response">
            <summary>
            Implicitly cast an string instance to a <see cref="T:Nancy.Response"/> instance, with the <see cref="P:Nancy.Response.Contents"/>
            set to the value of the string.
            </summary>
            <param name="contents">The string that is being cast from.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Response.op_Implicit(System.Action{System.IO.Stream})~Nancy.Response">
            <summary>
            Implicitly cast an <see cref="T:System.Action`1"/>, where T is a <see cref="T:System.IO.Stream"/>, instance to
            a <see cref="T:Nancy.Response"/> instance, with the <see cref="P:Nancy.Response.Contents"/> set to the value of the action.
            </summary>
            <param name="streamFactory">The <see cref="T:System.Action`1"/> instance that is being cast from.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Response.op_Implicit(Nancy.DynamicDictionaryValue)~Nancy.Response">
            <summary>
            Implicitly cast a <see cref="T:Nancy.DynamicDictionaryValue"/> instance to a <see cref="T:Nancy.Response"/> instance,
            with the <see cref="P:Nancy.Response.Contents"/> set to the value of the <see cref="T:Nancy.DynamicDictionaryValue"/>.
            </summary>
            <param name="value">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance that is being cast from.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Response.GetStringContents(System.String)">
            <summary>
            Converts a string content value to a response action.
            </summary>
            <param name="contents">The string containing the content.</param>
            <returns>A response action that will write the content of the string to the response stream.</returns>
        </member>
        <member name="M:Nancy.Response.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>This method can be overridden in sub-classes to dispose of response specific resources.</remarks>
        </member>
        <member name="T:Nancy.ResponseExtensions">
            <summary>
            Containing extensions for the <see cref="T:Nancy.Response"/> object.
            </summary>
        </member>
        <member name="M:Nancy.ResponseExtensions.AsAttachment(Nancy.Response,System.String,System.String)">
            <summary>
            Force the response to be downloaded as an attachment
            </summary>
            <param name="response">Response object</param>
            <param name="fileName">Filename for the download</param>
            <param name="contentType">Optional content type</param>
            <returns>Modified Response object</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithCookie(Nancy.Response,System.String,System.String)">
            <summary>
            Adds a <see cref="T:Nancy.Cookies.INancyCookie"/> to the response.
            </summary>
            <param name="response">Response object</param>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <returns>The <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithCookie(Nancy.Response,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Adds a <see cref="T:Nancy.Cookies.INancyCookie"/> to the response.
            </summary>
            <param name="response">Response object</param>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="expires">The expiration date of the cookie. Can be <see langword="null" /> if it should expire at the end of the session.</param>
            <returns>The <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithCookie(Nancy.Response,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Adds a <see cref="T:Nancy.Cookies.INancyCookie"/> to the response.
            </summary>
            <param name="response">Response object</param>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="expires">The expiration date of the cookie. Can be <see langword="null" /> if it should expire at the end of the session.</param>
            <param name="domain">The domain of the cookie.</param>
            <param name="path">The path of the cookie.</param>
            <returns>The <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithCookie(Nancy.Response,Nancy.Cookies.INancyCookie)">
            <summary>
            Adds a <see cref="T:Nancy.Cookies.INancyCookie"/> to the response.
            </summary>
            <param name="response">Response object</param>
            <param name="nancyCookie">A <see cref="T:Nancy.Cookies.INancyCookie"/> instance.</param>
            <returns></returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithHeader(Nancy.Response,System.String,System.String)">
            <summary>
            Add a header to the response
            </summary>
            <param name="response">Response object</param>
            <param name="header">Header name</param>
            <param name="value">Header value</param>
            <returns>Modified response</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithHeaders(Nancy.Response,System.Object[])">
            <summary>
            Adds headers to the response using anonymous types
            </summary>
            <param name="response">Response object</param>
            <param name="headers">
            Array of headers - each header should be an anonymous type with two string properties
            'Header' and 'Value' to represent the header name and its value.
            </param>
            <returns>Modified response</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithHeaders(Nancy.Response,System.Tuple{System.String,System.String}[])">
            <summary>
            Adds headers to the response using anonymous types
            </summary>
            <param name="response">Response object</param>
            <param name="headers">
            Array of headers - each header should be a Tuple with two string elements
            for header name and header value
            </param>
            <returns>Modified response</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithContentType(Nancy.Response,System.String)">
            <summary>
            Sets the content type of the response
            </summary>
            <param name="response">Response object</param>
            <param name="contentType">The type of the content</param>
            <returns>Modified response</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithStatusCode(Nancy.Response,Nancy.HttpStatusCode)">
            <summary>
            Sets the status code of the response
            </summary>
            <param name="response">Response object</param>
            <param name="statusCode">The http status code</param>
            <returns>Modified response</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithStatusCode(Nancy.Response,System.Int32)">
            <summary>
            Sets the status code of the response
            </summary>
            <param name="response">Response object</param>
            <param name="statusCode">The http status code</param>
            <returns>Modified response</returns>
        </member>
        <member name="T:Nancy.Responses.DefaultJsonSerializer">
            <summary>
            Default <see cref="T:Nancy.ISerializer"/> implementation for JSON serialization.
            </summary>
        </member>
        <member name="M:Nancy.Responses.DefaultJsonSerializer.#ctor(Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.DefaultJsonSerializer"/> class,
            with the provided <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="M:Nancy.Responses.DefaultJsonSerializer.CanSerialize(Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Whether the serializer can serialize the content type
            </summary>
            <param name="mediaRange">Content type to serialise</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="P:Nancy.Responses.DefaultJsonSerializer.Extensions">
            <summary>
            Gets the list of extensions that the serializer can handle.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of extensions if any are available, otherwise an empty enumerable.</value>
        </member>
        <member name="M:Nancy.Responses.DefaultJsonSerializer.Serialize``1(Nancy.Responses.Negotiation.MediaRange,``0,System.IO.Stream)">
            <summary>
            Serialize the given model with the given contentType
            </summary>
            <param name="mediaRange">Content type to serialize into</param>
            <param name="model">Model to serialize</param>
            <param name="outputStream">Stream to serialize to</param>
            <returns>Serialised object</returns>
        </member>
        <member name="T:Nancy.Responses.DefaultXmlSerializer">
            <summary>
            Default <see cref="T:Nancy.ISerializer"/> implementation for XML serialization.
            </summary>
        </member>
        <member name="M:Nancy.Responses.DefaultXmlSerializer.#ctor(Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.DefaultXmlSerializer"/> class,
            with the provided <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="M:Nancy.Responses.DefaultXmlSerializer.CanSerialize(Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Whether the serializer can serialize the content type
            </summary>
            <param name="mediaRange">Content type to serialise</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="P:Nancy.Responses.DefaultXmlSerializer.Extensions">
            <summary>
            Gets the list of extensions that the serializer can handle.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of extensions if any are available, otherwise an empty enumerable.</value>
        </member>
        <member name="M:Nancy.Responses.DefaultXmlSerializer.Serialize``1(Nancy.Responses.Negotiation.MediaRange,``0,System.IO.Stream)">
            <summary>
            Serialize the given model with the given contentType
            </summary>
            <param name="mediaRange">Content type to serialize into</param>
            <param name="model">Model to serialize</param>
            <param name="outputStream">Output stream to serialize to</param>
            <returns>Serialised object</returns>
        </member>
        <member name="T:Nancy.Responses.EmbeddedFileResponse">
            <summary>
            Represent an HTML response with embeded file content.
            </summary>
            <seealso cref="T:Nancy.Response" />
        </member>
        <member name="M:Nancy.Responses.EmbeddedFileResponse.#ctor(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.EmbeddedFileResponse"/> class, with
            the provided <paramref name="assembly"/>, <paramref name="resourcePath"/> and <paramref name="name"/>.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="resourcePath">The resource path.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:Nancy.Responses.GenericFileResponse">
            <summary>
            A response representing a file.
            </summary>
            <remarks>If the response contains an invalid file (not found, empty name, missing extension and so on) the status code of the response will be set to <see cref="F:Nancy.HttpStatusCode.NotFound"/>.</remarks>
        </member>
        <member name="F:Nancy.Responses.GenericFileResponse.BufferSize">
            <summary>
             Size of buffer for transmitting file. Default size 4 Mb
            </summary>
        </member>
        <member name="M:Nancy.Responses.GenericFileResponse.#ctor(System.String,Nancy.NancyContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.GenericFileResponse"/> for the file specified
            by the <paramref name="filePath"/> parameter and <paramref name="context"/>.
            </summary>
            <param name="filePath">The name of the file, including path relative to the root of the application, that should be returned.</param>
            <remarks>The <see cref="M:Nancy.MimeTypes.GetMimeType(System.String)"/> method will be used to determine the mimetype of the file and will be used as the content-type of the response. If no match if found the content-type will be set to application/octet-stream.</remarks>
            <param name="context">Current context</param>
        </member>
        <member name="M:Nancy.Responses.GenericFileResponse.#ctor(System.String,System.String,Nancy.NancyContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.GenericFileResponse"/> for the file specified
            by the <paramref name="filePath"/> parameter, the content-type specified by the <paramref name="contentType"/> parameter 
            and <paramref name="context"/>.
            </summary>
            <param name="filePath">The name of the file, including path relative to the root of the application, that should be returned.</param>
            <param name="contentType">The content-type of the response.</param>
            <param name="context">Current context</param>
        </member>
        <member name="P:Nancy.Responses.GenericFileResponse.Filename">
            <summary>
            Gets the filename of the file response
            </summary>
            <value>A string containing the name of the file.</value>
        </member>
        <member name="T:Nancy.Responses.HtmlResponse">
            <summary>
            Represents a HTML (text/html) response
            </summary>
        </member>
        <member name="M:Nancy.Responses.HtmlResponse.#ctor(Nancy.HttpStatusCode,System.Action{System.IO.Stream},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Nancy.Cookies.INancyCookie})">
            <summary>
            Creates a new instance of the  <see cref="T:Nancy.Responses.HtmlResponse"/> class, with
            the provided <paramref name="statusCode"/>, <paramref name="contents"/>,
            <paramref name="headers"/> and <paramref name="cookies"/>
            </summary>
            <param name="statusCode">Status code - defaults to OK</param>
            <param name="contents">Response body delegate - defaults to empty if null</param>
            <param name="headers">Headers if required</param>
            <param name="cookies">Cookies if required</param>
        </member>
        <member name="T:Nancy.Responses.JsonResponse`1">
            <summary>
            Represents a JSON response of the type <typeparamref name="TModel"/>.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="M:Nancy.Responses.JsonResponse`1.#ctor(`0,Nancy.ISerializer,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.JsonResponse`1"/> class,
            with the provided <paramref name="model"/>, <paramref name="serializer"/>
            and <paramref name="environment"/>.
            </summary>
            <param name="model">The model that should be returned as JSON.</param>
            <param name="serializer">The <see cref="T:Nancy.ISerializer"/> to use for the serialization.</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="T:Nancy.Responses.JsonResponse">
            <summary>
            Represents a JSON response
            </summary>
        </member>
        <member name="M:Nancy.Responses.JsonResponse.#ctor(System.Object,Nancy.ISerializer,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.JsonResponse`1"/> class,
            with the provided <paramref name="model"/>, <paramref name="serializer"/>
            and <paramref name="environment"/>.
            </summary>
            <param name="model">The model that should be returned as JSON.</param>
            <param name="serializer">The <see cref="T:Nancy.ISerializer"/> to use for the serialization.</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="T:Nancy.Responses.MaterialisingResponse">
            <summary>
            Takes an existing response and materialises the body.
            Can be used as a wrapper to force execution of the deferred body for
            error checking etc.
            Copies the existing response into memory, so use with caution.
            </summary>
        </member>
        <member name="M:Nancy.Responses.MaterialisingResponse.PreExecute(Nancy.NancyContext)">
            <summary>
            Executes at the end of the nancy execution pipeline and before control is passed back to the hosting.
            Can be used to pre-render/validate views while still inside the main pipeline/error handling.
            </summary>
            <param name="context">Nancy context</param>
            <returns>
            Task for completion/erroring
            </returns>
        </member>
        <member name="M:Nancy.Responses.MaterialisingResponse.#ctor(Nancy.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.MaterialisingResponse"/> class, with
            the provided <paramref name="sourceResponse"/>.
            </summary>
            <param name="sourceResponse">The source response.</param>
        </member>
        <member name="T:Nancy.Responses.NegotiatedResponse">
            <summary>
            Response that indicates that the response format should be negotiated between the client and the server.
            </summary>
        </member>
        <member name="M:Nancy.Responses.NegotiatedResponse.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.NegotiatedResponse"/> response for the
            provided <paramref name="value"/>.
            </summary>
            <param name="value">The response value that should be negotiated.</param>
        </member>
        <member name="P:Nancy.Responses.NegotiatedResponse.Value">
            <summary>
            Gets or sets the value that should be negotiated.
            </summary>
        </member>
        <member name="T:Nancy.Responses.Negotiation.DefaultResponseNegotiator">
            <summary>
            The default implementation for a response negotiator.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.#ctor(System.Collections.Generic.IEnumerable{Nancy.Responses.Negotiation.IResponseProcessor},Nancy.Conventions.AcceptHeaderCoercionConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.DefaultResponseNegotiator"/> class.
            </summary>
            <param name="processors">The response processors.</param>
            <param name="coercionConventions">The Accept header coercion conventions.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.NegotiateResponse(System.Object,Nancy.NancyContext)">
            <summary>
            Negotiates the response based on the given result and context.
            </summary>
            <param name="routeResult">The route result.</param>
            <param name="context">The context.</param>
            <returns>A <see cref="T:Nancy.Response" />.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.TryCastResultToResponse(System.Object,Nancy.Response@)">
            <summary>
            Tries to cast the dynamic result to a <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="routeResult">The result.</param>
            <param name="response">The response.</param>
            <returns><c>true</c> if the result is a <see cref="T:Nancy.Response"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.GetNegotiationContext(System.Object,Nancy.NancyContext)">
            <summary>
            Gets a <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> based on the given result and context.
            </summary>
            <param name="routeResult">The route result.</param>
            <param name="context">The context.</param>
            <returns>A <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/>.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.GetCoercedAcceptHeaders(Nancy.NancyContext)">
            <summary>
            Gets the coerced accept headers based on the <see cref="T:Nancy.Conventions.AcceptHeaderCoercionConventions"/>.
            </summary>
            <param name="context">The context.</param>
            <returns>IEnumerable{Tuple{System.String, System.Decimal}}.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.GetCompatibleProcessorsByHeader(System.String,System.Object,Nancy.NancyContext)">
            <summary>
            Gets compatible response processors by header.
            </summary>
            <param name="acceptHeader">The accept header.</param>
            <param name="model">The model.</param>
            <param name="context">The context.</param>
            <returns>IEnumerable{Tuple{IResponseProcessor, ProcessorMatch}}.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.CreateResponse(System.Collections.Generic.IList{Nancy.Responses.Negotiation.DefaultResponseNegotiator.CompatibleHeader},Nancy.Responses.Negotiation.NegotiationContext,Nancy.NancyContext)">
            <summary>
            Creates a response from the compatible headers.
            </summary>
            <param name="compatibleHeaders">The compatible headers.</param>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="context">The context.</param>
            <returns>A <see cref="T:Nancy.Response"/>.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.NegotiateResponse(System.Collections.Generic.IEnumerable{Nancy.Responses.Negotiation.DefaultResponseNegotiator.CompatibleHeader},Nancy.Responses.Negotiation.NegotiationContext,Nancy.NancyContext)">
            <summary>
            Prioritizes the response processors and tries to negotiate a response.
            </summary>
            <param name="compatibleHeaders">The compatible headers.</param>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="context">The context.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.AddLinkHeader(System.Collections.Generic.IEnumerable{Nancy.Responses.Negotiation.DefaultResponseNegotiator.CompatibleHeader},Nancy.Response,Nancy.Url)">
            <summary>
            Adds a link header to the <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="compatibleHeaders">The compatible headers.</param>
            <param name="response">The response.</param>
            <param name="requestUrl">The request URL.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.GetLinkProcessors(System.Collections.Generic.IEnumerable{Nancy.Responses.Negotiation.DefaultResponseNegotiator.CompatibleHeader},System.String)">
            <summary>
            Gets the link processors based on the compatible headers and content-type.
            </summary>
            <param name="compatibleHeaders">The compatible headers.</param>
            <param name="contentType">The content-type of the response.</param>
            <returns>Dictionary{System.String, MediaRange}.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.CreateLinkHeader(Nancy.Url,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Nancy.Responses.Negotiation.MediaRange}},System.String)">
            <summary>
            Creates the link header with the different media ranges.
            </summary>
            <param name="requestUrl">The request URL.</param>
            <param name="linkProcessors">The link processors.</param>
            <param name="existingLinkHeader">The existing Link HTTP Header.</param>
            <returns>The link header.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.AddContentTypeHeader(Nancy.Responses.Negotiation.NegotiationContext,Nancy.Response)">
            <summary>
            Adds the content type header from the <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> to the <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.AddNegotiatedHeaders(Nancy.Responses.Negotiation.NegotiationContext,Nancy.Response)">
            <summary>
            Adds the negotiated headers from the <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> to the <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.SetStatusCode(Nancy.Responses.Negotiation.NegotiationContext,Nancy.Response)">
            <summary>
            Sets the status code from the <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> on the <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.SetReasonPhrase(Nancy.Responses.Negotiation.NegotiationContext,Nancy.Response)">
            <summary>
            Sets the reason phrase from the <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> on the <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.AddCookies(Nancy.Responses.Negotiation.NegotiationContext,Nancy.Response)">
            <summary>
            Adds the cookies from the <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> to the <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="response">The response.</param>
        </member>
        <member name="T:Nancy.Responses.Negotiation.IResponseNegotiator">
            <summary>
            Creates a response from a given result and context.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.IResponseNegotiator.NegotiateResponse(System.Object,Nancy.NancyContext)">
            <summary>
            Negotiates the response based on the given result and context.
            </summary>
            <param name="routeResult">The route result.</param>
            <param name="context">The context.</param>
            <returns>A <see cref="T:Nancy.Response"/>.</returns>
        </member>
        <member name="T:Nancy.Responses.Negotiation.IResponseProcessor">
            <summary>
            Content negotiation response processor
            </summary>
        </member>
        <member name="P:Nancy.Responses.Negotiation.IResponseProcessor.ExtensionMappings">
            <summary>
            Gets a set of mappings that map a given extension (such as .json)
            to a media range that can be sent to the client in a vary header.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.IResponseProcessor.CanProcess(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Determines whether the processor can handle a given content type and model.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Responses.Negotiation.ProcessorMatch"/> result that determines the priority of the processor.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.IResponseProcessor.Process(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Process the response.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="T:Nancy.Responses.Negotiation.JsonProcessor">
            <summary>
            Processes the model for json media types and extension.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.JsonProcessor.#ctor(System.Collections.Generic.IEnumerable{Nancy.ISerializer},Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.JsonProcessor"/> class,
            with the provided <paramref name="serializers"/>.
            </summary>
            <param name="serializers">The serializes that the processor will use to process the request.</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="P:Nancy.Responses.Negotiation.JsonProcessor.ExtensionMappings">
            <summary>
            Gets a set of mappings that map a given extension (such as .json)
            to a media range that can be sent to the client in a vary header.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.JsonProcessor.CanProcess(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Determines whether the processor can handle a given content type and model
            </summary>
            <param name="requestedMediaRange">Content type requested by the client</param>
            <param name="model">The model for the given media range</param>
            <param name="context">The nancy context</param>
            <returns>A ProcessorMatch result that determines the priority of the processor</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.JsonProcessor.Process(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Process the response
            </summary>
            <param name="requestedMediaRange">Content type requested by the client</param>
            <param name="model">The model for the given media range</param>
            <param name="context">The nancy context</param>
            <returns>A response</returns>
        </member>
        <member name="T:Nancy.Responses.Negotiation.MatchResult">
            <summary>
            Represents whether a processor has matched/can handle processing the response.
            Values are of increasing priority.
            </summary>
        </member>
        <member name="F:Nancy.Responses.Negotiation.MatchResult.NoMatch">
            <summary>
            No match, nothing to see here, move along
            </summary>
        </member>
        <member name="F:Nancy.Responses.Negotiation.MatchResult.DontCare">
            <summary>
            Will accept anything
            </summary>
        </member>
        <member name="F:Nancy.Responses.Negotiation.MatchResult.NonExactMatch">
            <summary>
            Matched, but in a non-specific way such as a wildcard match or fallback
            </summary>
        </member>
        <member name="F:Nancy.Responses.Negotiation.MatchResult.ExactMatch">
            <summary>
            Exact specific match
            </summary>
        </member>
        <member name="T:Nancy.Responses.Negotiation.MediaRange">
            <summary>
            Represents a media range from an accept header
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRange.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.MediaRange"/> class, with
            the provided <paramref name="contentType"/>.
            </summary>
            <param name="contentType">string representation of a media range</param>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRange.Type">
            <summary>
            Media range type
            </summary>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRange.Subtype">
            <summary>
            Media range subtype
            </summary>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRange.Parameters">
            <summary>
            Media range parameters
            </summary>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRange.IsWildcard">
            <summary>
            Gets a value indicating if the media range is the */* wildcard
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRange.Matches(Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Whether or not a media range matches another, taking into account wildcards
            </summary>
            <param name="other">Other media range</param>
            <returns>True if matching, false if not</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRange.MatchesWithParameters(Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Whether or not a media range matches another, taking into account wildcards and parameters
            </summary>
            <param name="other">Other media range</param>
            <returns>True if matching, false if not</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRange.op_Implicit(System.String)~Nancy.Responses.Negotiation.MediaRange">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Nancy.Responses.Negotiation.MediaRange"/>.
            </summary>
            <param name="contentType">Type of the content.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRange.op_Implicit(Nancy.Responses.Negotiation.MediaRange)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.Responses.Negotiation.MediaRange"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="mediaRange">The media range.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRange.Equals(Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRange.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Nancy.Responses.Negotiation.MediaRangeParameters">
            <summary>
            Provides strongly-typed access to media range parameters.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.MediaRangeParameters"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.MediaRangeParameters"/> class, with
            the provided <paramref name="parameters"/>.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRangeParameters.Keys">
            <summary>
            Gets the names of the available parameters.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the names of the parameters.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRangeParameters.Values">
            <summary>
            Gets all the parameters values.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains all the parameters values.</value>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.Matches(Nancy.Responses.Negotiation.MediaRangeParameters)">
            <summary>
            Whether or not a set of media range parameters matches another, regardless of order
            </summary>
            <param name="other">Other media range parameters</param>
            <returns>True if matching, false if not</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRangeParameters.Item(System.String)">
            <summary>
            Gets the value for the parameter identified by the <paramref name="name"/> parameter.
            </summary>
            <param name="name">The name of the parameter to return the value for.</param>
            <returns>The value for the parameter. If the parameter is not defined then null is returned.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.op_Implicit(Nancy.Responses.Negotiation.MediaRangeParameters)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.Responses.Negotiation.MediaRangeParameters"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="mediaRangeParameters">The media range parameters.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.FromString(System.String)">
            <summary>
            Creates a MediaRangeParameters collection from a "a=1,b=2" string
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Nancy.Responses.Negotiation.MediaType">
            <summary>
            Represents a media type or subtype in a <see cref="T:Nancy.Responses.Negotiation.MediaRange"/>.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.MediaType"/> class, with
            the provided <paramref name="type"/>.
            </summary>
            <param name="type">the media type part</param>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaType.IsWildcard">
            <summary>
            Gets a value indicating whether the media type is a wildcard or not
            </summary>
            <value><see langword="true" /> if the media type is a wildcard, otherwise <see langword="false" />.</value>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaType.Matches(Nancy.Responses.Negotiation.MediaType)">
            <summary>
            Matched the media type with another media type.
            </summary>
            <param name="other">The media type that should be matched against.</param>
            <returns><see langword="true" /> if the media types match, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaType.op_Implicit(System.String)~Nancy.Responses.Negotiation.MediaType">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Nancy.Responses.Negotiation.MediaType"/>.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaType.op_Implicit(Nancy.Responses.Negotiation.MediaType)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Nancy.Responses.Negotiation.MediaType"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="inputMediaType">Type of the input media.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaType.ToString">
            <summary>
            Returns the type as a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Nancy.Responses.Negotiation.NegotiationContext">
            <summary>
            Context for content negotiation.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.NegotiationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> class.
            </summary>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.Cookies">
            <summary>
            Gets or sets additional cookies to assign to the response.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Nancy.Cookies.INancyCookie"/> instances.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.DefaultModel">
            <summary>
            Gets or sets the default model that will be used if a content type specific model is not specified.
            </summary>
            <value>The default model instance.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.Headers">
            <summary>
            Gets or sets the additional response headers required.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the headers.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.MediaRangeModelMappings">
            <summary>
            Gets or sets the model mappings for media ranges.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the media range model mappings.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.ModuleName">
            <summary>
            The name of the <see cref="T:Nancy.INancyModule"/> that is locating a view.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the module.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.ModulePath">
            <summary>
            The module path of the <see cref="T:Nancy.INancyModule"/> that is locating a view.
            </summary>
            <value>A <see cref="T:System.String"/> containing the module path.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.PermissableMediaRanges">
            <summary>
            Gets or sets allowed media ranges.
            </summary>
            <value>A list of the allowed media ranges.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.StatusCode">
            <summary>
            Gets or sets the status code of the response.
            </summary>
            <value>A <see cref="T:Nancy.HttpStatusCode"/> value.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.ReasonPhrase">
            <summary>
            Gets or sets a text description of the HTTP status code returned to the client.
            </summary>
            <value>The HTTP status code description.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.ViewName">
            <summary>
            Gets or sets the view name if one is required.
            </summary>
            <value>The name of the view that should be rendered.</value>
        </member>
        <member name="M:Nancy.Responses.Negotiation.NegotiationContext.GetModelForMediaRange(Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Gets the correct model for the given media range
            </summary>
            <param name="mediaRange">The <see cref="T:Nancy.Responses.Negotiation.MediaRange"/> to get the model for.</param>
            <returns>The model for the provided <paramref name="mediaRange"/> if it has been mapped, otherwise the <see cref="P:Nancy.Responses.Negotiation.NegotiationContext.DefaultModel"/> will be returned.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.NegotiationContext.SetModule(Nancy.INancyModule)">
            <summary>
            Sets the given Nancy module.
            </summary>
            <param name="module">The Nancy module instance.</param>
            <exception cref="T:System.ArgumentNullException">module</exception>
        </member>
        <member name="T:Nancy.Responses.Negotiation.Negotiator">
            <summary>
            Request response content negotiator.
            </summary>
            <seealso cref="T:Nancy.IHideObjectMembers" />
        </member>
        <member name="M:Nancy.Responses.Negotiation.Negotiator.#ctor(Nancy.NancyContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> class,
            with the provided <paramref name="context"/>.
            </summary>
            <param name="context">The context that should be negotiated.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.Negotiator.GetAwaiter">
            <summary>
            Gets the awaiter.
            </summary>
            <returns><see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1"/></returns>
        </member>
        <member name="P:Nancy.Responses.Negotiation.Negotiator.NegotiationContext">
            <summary>
            Gets the <see cref="P:Nancy.Responses.Negotiation.Negotiator.NegotiationContext"/> used by the negotiator.
            </summary>
            <value>A <see cref="P:Nancy.Responses.Negotiation.Negotiator.NegotiationContext"/> instance.</value>
        </member>
        <member name="T:Nancy.Responses.Negotiation.ProcessorMatch">
            <summary>
            Represents whether a processor has matched / can handle a requested response
            </summary>
        </member>
        <member name="F:Nancy.Responses.Negotiation.ProcessorMatch.None">
            <summary>
            A <see cref="T:Nancy.Responses.Negotiation.ProcessorMatch"/> with both <see cref="P:Nancy.Responses.Negotiation.ProcessorMatch.ModelResult"/> and <see cref="P:Nancy.Responses.Negotiation.ProcessorMatch.RequestedContentTypeResult"/> set to <see cref="F:Nancy.Responses.Negotiation.MatchResult.NoMatch"/>.
            </summary>
        </member>
        <member name="P:Nancy.Responses.Negotiation.ProcessorMatch.RequestedContentTypeResult">
            <summary>
            Gets or sets the match result based on the content type
            </summary>
        </member>
        <member name="P:Nancy.Responses.Negotiation.ProcessorMatch.ModelResult">
            <summary>
            Gets or sets the match result based on the model
            </summary>
        </member>
        <member name="T:Nancy.Responses.Negotiation.ResponseProcessor">
            <summary>
            Processes negotiated responses of model type <see cref="T:Nancy.Response"/>.
            </summary>
        </member>
        <member name="P:Nancy.Responses.Negotiation.ResponseProcessor.ExtensionMappings">
            <summary>
            Gets a set of mappings that map a given extension (such as .json)
            to a media range that can be sent to the client in a vary header.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.ResponseProcessor.CanProcess(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Determines whether the processor can handle a given content type and model.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Responses.Negotiation.ProcessorMatch"/> result that determines the priority of the processor.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.ResponseProcessor.Process(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Process the response.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="T:Nancy.Responses.Negotiation.ViewProcessor">
            <summary>
            Processes the model for view requests.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.ViewProcessor.#ctor(Nancy.ViewEngines.IViewFactory,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.ViewProcessor"/> class,
            with the provided <paramref name="viewFactory"/>.
            </summary>
            <param name="viewFactory">The view factory that should be used to render views.</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="P:Nancy.Responses.Negotiation.ViewProcessor.ExtensionMappings">
            <summary>
            Gets a set of mappings that map a given extension (such as .json)
            to a media range that can be sent to the client in a vary header.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.ViewProcessor.CanProcess(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Determines whether the processor can handle a given content type and model.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Responses.Negotiation.ProcessorMatch"/> result that determines the priority of the processor.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.ViewProcessor.Process(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Process the response.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="T:Nancy.Responses.Negotiation.XmlProcessor">
            <summary>
            Processes the model for xml media types and extension.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.XmlProcessor.#ctor(System.Collections.Generic.IEnumerable{Nancy.ISerializer})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.XmlProcessor"/> class,
            with the provided <see paramref="serializers"/>.
            </summary>
            <param name="serializers">The serializes that the processor will use to process the request.</param>
        </member>
        <member name="P:Nancy.Responses.Negotiation.XmlProcessor.ExtensionMappings">
            <summary>
            Gets a set of mappings that map a given extension (such as .json)
            to a media range that can be sent to the client in a vary header.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.XmlProcessor.CanProcess(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Determines whether the processor can handle a given content type and model.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Responses.Negotiation.ProcessorMatch"/> result that determines the priority of the processor.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.XmlProcessor.Process(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Process the response.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="T:Nancy.Responses.NotAcceptableResponse">
            <summary>
            Response with status code 406 (Not Acceptable).
            </summary>
        </member>
        <member name="M:Nancy.Responses.NotAcceptableResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.NotAcceptableResponse"/> class.
            </summary>
        </member>
        <member name="T:Nancy.Responses.RedirectResponse">
            <summary>
            A response representing an HTTP redirect
            <seealso cref="M:Nancy.Extensions.ContextExtensions.ToFullPath(Nancy.NancyContext,System.String)"/>
            <seealso cref="M:Nancy.Extensions.ContextExtensions.GetRedirect(Nancy.NancyContext,System.String)"/>
            </summary>
        </member>
        <member name="M:Nancy.Responses.RedirectResponse.#ctor(System.String,Nancy.Responses.RedirectResponse.RedirectType)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.RedirectResponse"/> class, with
            the provided <paramref name="location"/> and <paramref name="type"/>.
            </summary>
            <param name="location">Location to redirect to</param>
            <param name="type">Type of redirection to perform</param>
        </member>
        <member name="T:Nancy.Responses.RedirectResponse.RedirectType">
            <summary>
            Which type of redirect
            </summary>
        </member>
        <member name="F:Nancy.Responses.RedirectResponse.RedirectType.Permanent">
            <summary>
            HTTP 301 - All future requests should be to this URL
            </summary>
        </member>
        <member name="F:Nancy.Responses.RedirectResponse.RedirectType.Temporary">
            <summary>
            HTTP 307 - Redirect this request but allow future requests to the original URL
            </summary>
        </member>
        <member name="F:Nancy.Responses.RedirectResponse.RedirectType.SeeOther">
            <summary>
            HTTP 303 - Redirect this request using an HTTP GET
            </summary>
        </member>
        <member name="T:Nancy.Responses.StreamResponse">
            <summary>
            Response that returns the contents of a stream of a given content-type.
            </summary>
        </member>
        <member name="M:Nancy.Responses.StreamResponse.#ctor(System.Func{System.IO.Stream},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.StreamResponse"/>, with
            the provided <paramref name="source"/> and <paramref name="contentType"/>.
            </summary>
            <param name="source">The value producer for the response.</param>
            <param name="contentType">The content-type of the stream contents.</param>
        </member>
        <member name="M:Nancy.Responses.StreamResponse.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Nancy.Responses.TextResponse">
            <summary>
            Represents a text (text/plain) response
            </summary>
        </member>
        <member name="M:Nancy.Responses.TextResponse.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new instance of the TextResponse class, with
            the provided <paramref name="contents"/>, <paramref name="contentType"/> and <paramref name="encoding"/>.
            </summary>
            <param name="contents">Text content - defaults to empty if null</param>
            <param name="contentType">Content Type - defaults to text/plain</param>
            <param name="encoding">String encoding - UTF8 if null</param>
        </member>
        <member name="M:Nancy.Responses.TextResponse.#ctor(Nancy.HttpStatusCode,System.String,System.Text.Encoding,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Nancy.Cookies.INancyCookie})">
            <summary>
            Creates a new instance of the TextResponse class, with
            the provided <paramref name="statusCode"/>, <paramref name="contents"/>, <paramref name="encoding"/>, 
            <paramref name="headers"/> and <paramref name="cookies"/>.
            </summary>
            <param name="statusCode">Status code - defaults to OK</param>
            <param name="contents">Text content - defaults to empty if null</param>
            <param name="encoding">String encoding - UTF8 if null</param>
            <param name="headers">Headers if required</param>
            <param name="cookies">Cookies if required</param>
        </member>
        <member name="T:Nancy.Responses.XmlResponse`1">
            <summary>
            Represents an HTTP response with XML content.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <seealso cref="T:Nancy.Response" />
        </member>
        <member name="M:Nancy.Responses.XmlResponse`1.#ctor(`0,Nancy.ISerializer,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.XmlResponse`1"/> class, with
            the provided <paramref name="model"/>, <paramref name="serializer"/> and <paramref name="environment"/>.
            </summary>
            <param name="model">The model.</param>
            <param name="serializer">The serializer.</param>
            <param name="environment">The environment.</param>
            <exception cref="T:System.InvalidOperationException">XML Serializer not set</exception>
        </member>
        <member name="T:Nancy.RouteConfiguration">
            <summary>
            Configuration for the default routing.
            </summary>
        </member>
        <member name="F:Nancy.RouteConfiguration.Default">
            <summary>
            A default instance of the <see cref="T:Nancy.ViewConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Nancy.RouteConfiguration.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.RouteConfiguration"/> class.
            </summary>
            <param name="disableMethodNotAllowedResponses">Determins is 405 responses are allowed.</param>
            <param name="explicitHeadRouting">Enabled support for explicit HEAD route declarations.</param>
        </member>
        <member name="P:Nancy.RouteConfiguration.DisableMethodNotAllowedResponses">
            <summary>
            Gets a value indicating whether or not to respond with 405 responses.
            </summary>
            <value><see langword="true"/>If 405 responses are allowed, otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:Nancy.RouteConfiguration.ExplicitHeadRouting">
            <summary>
            Gets a value indicating whether or not to route HEAD requests explicitly.
            </summary>
            <value><see langword="true"/>If explicit HEAD route requests are allowed, otherwise <see langword="false"/>.</value>
        </member>
        <member name="T:Nancy.RouteConfigurationExtensions">
            <summary>
            Contains <see cref="T:Nancy.RouteConfiguration"/> configuration extensions for <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
        </member>
        <member name="M:Nancy.RouteConfigurationExtensions.Routing(Nancy.Configuration.INancyEnvironment,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Configures <see cref="T:Nancy.RouteConfiguration"/>.
            </summary>
            <param name="environment"><see cref="T:Nancy.Configuration.INancyEnvironment"/> that should be configured.</param>
            <param name="disableMethodNotAllowedResponses"><see langword="true"/>If 405 responses are allowed, otherwise <see langword="false"/>.</param>
            <param name="explicitHeadRouting"><see langword="true"/>If explicit HEAD route requests are allowed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="T:Nancy.Routing.Constraints.AlphaRouteSegmentConstraint">
            <summary>
            Constraint for alphabetical route segments.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.AlphaRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>The constraint's name.</value>
        </member>
        <member name="M:Nancy.Routing.Constraints.AlphaRouteSegmentConstraint.TryMatch(System.String,System.String,System.String@)">
            <summary>
            Tries to match the given segment against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.BoolRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Boolean"/> route segments.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.BoolRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>The constraint's name.</value>
        </member>
        <member name="M:Nancy.Routing.Constraints.BoolRouteSegmentConstraint.TryMatch(System.String,System.String,System.Boolean@)">
            <summary>
            Tries to match the given segment against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.CustomDateTimeRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.DateTime"/> route segments with custom format.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.CustomDateTimeRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>The constraint's name.</value>
        </member>
        <member name="M:Nancy.Routing.Constraints.CustomDateTimeRouteSegmentConstraint.TryMatch(System.String,System.String[],System.DateTime@)">
            <summary>
            Tries to match the given segment and parameters against the constraint.
            </summary>
            <param name="segment">The segment to match.</param>
            <param name="parameters">The parameters to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.DateTimeRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.DateTime"/> route segments.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.DateTimeRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>The constraint's name.</value>
        </member>
        <member name="M:Nancy.Routing.Constraints.DateTimeRouteSegmentConstraint.TryMatch(System.String,System.String,System.DateTime@)">
            <summary>
            Tries to match the given segment against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.DecimalRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Decimal"/> route segments.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.DecimalRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>The constraint's name.</value>
        </member>
        <member name="M:Nancy.Routing.Constraints.DecimalRouteSegmentConstraint.TryMatch(System.String,System.String,System.Decimal@)">
            <summary>
            Tries to match the given segment against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.GuidRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Guid"/> route segments.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.GuidRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>The constraint's name.</value>
        </member>
        <member name="M:Nancy.Routing.Constraints.GuidRouteSegmentConstraint.TryMatch(System.String,System.String,System.Guid@)">
            <summary>
            Tries to match the given segment against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.IntRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Int32"/> route segments.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.IntRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>The constraint's name.</value>
        </member>
        <member name="M:Nancy.Routing.Constraints.IntRouteSegmentConstraint.TryMatch(System.String,System.String,System.Int32@)">
            <summary>
            Tries to match the given segment against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.IRouteSegmentConstraint">
            <summary>
            Defines the functionality to constrain route matching.
            </summary>
        </member>
        <member name="M:Nancy.Routing.Constraints.IRouteSegmentConstraint.Matches(System.String)">
            <summary>
            Determines whether the given constraint should be matched.
            </summary>
            <param name="constraint">The route constraint.</param>
            <returns><c>true</c> if the constraint matches, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nancy.Routing.Constraints.IRouteSegmentConstraint.GetMatch(System.String,System.String,System.String)">
            <summary>
            Matches the segment and parameter name against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> containing information about the captured parameters.</returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.LengthRouteSegmentConstraint">
            <summary>
            Constraint for route segments with a specific length.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.LengthRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>The constraint's name.</value>
        </member>
        <member name="M:Nancy.Routing.Constraints.LengthRouteSegmentConstraint.TryMatch(System.String,System.String[],System.String@)">
            <summary>
            Tries to match the given segment and parameters against the constraint.
            </summary>
            <param name="segment">The segment to match.</param>
            <param name="parameters">The parameters to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.LongRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Int64"/> route segments.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.LongRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>
            The constraint's name.
            </value>
        </member>
        <member name="M:Nancy.Routing.Constraints.LongRouteSegmentConstraint.TryMatch(System.String,System.String,System.Int64@)">
            <summary>
            Tries to match the given segment against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.MaxLengthRouteSegmentConstraint">
            <summary>
            Constraint for route segments with a maximum length.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.MaxLengthRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>
            The constraint's name.
            </value>
        </member>
        <member name="M:Nancy.Routing.Constraints.MaxLengthRouteSegmentConstraint.TryMatch(System.String,System.String[],System.String@)">
            <summary>
            Tries to match the given segment and parameters against the constraint.
            </summary>
            <param name="segment">The segment to match.</param>
            <param name="parameters">The parameters to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.MaxRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Int32"/> route segments with a maximum value.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.MaxRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>The constraint's name.</value>
        </member>
        <member name="M:Nancy.Routing.Constraints.MaxRouteSegmentConstraint.TryMatch(System.String,System.String[],System.Int32@)">
            <summary>
            Tries to match the given segment and parameters against the constraint.
            </summary>
            <param name="segment">The segment to match.</param>
            <param name="parameters">The parameters to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.MinLengthRouteSegmentConstraint">
            <summary>
            Constraint for route segments with a minimum length.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.MinLengthRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>The constraint's name.</value>
        </member>
        <member name="M:Nancy.Routing.Constraints.MinLengthRouteSegmentConstraint.TryMatch(System.String,System.String[],System.String@)">
            <summary>
            Tries to match the given segment and parameters against the constraint.
            </summary>
            <param name="segment">The segment to match.</param>
            <param name="parameters">The parameters to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.MinRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Int32"/> route segments with a minimum length.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.MinRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>
            The constraint's name.
            </value>
        </member>
        <member name="M:Nancy.Routing.Constraints.MinRouteSegmentConstraint.TryMatch(System.String,System.String[],System.Int32@)">
            <summary>
            Tries to match the given segment and parameters against the constraint.
            </summary>
            <param name="segment">The segment to match.</param>
            <param name="parameters">The parameters to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.ParameterizedRouteSegmentConstraintBase`1">
            <summary>
            Convenience class for implementing a route segment constraint that expects parameters.
            </summary>
            <typeparam name="T">The type of parameter to capture.</typeparam>
        </member>
        <member name="M:Nancy.Routing.Constraints.ParameterizedRouteSegmentConstraintBase`1.Matches(System.String)">
            <summary>
            Determines whether the given constraint matches the name of this constraint.
            </summary>
            <param name="constraint">The route constraint.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Nancy.Routing.Constraints.ParameterizedRouteSegmentConstraintBase`1.TryMatch(System.String,System.String,`0@)">
            <summary>
            Tries to match the given segment against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Nancy.Routing.Constraints.ParameterizedRouteSegmentConstraintBase`1.TryParseInt(System.String,System.Int32@)">
            <summary>
            Tries to parse an integer using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="string">The string value.</param>
            <param name="result">The resulting integer.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Nancy.Routing.Constraints.ParameterizedRouteSegmentConstraintBase`1.TryMatch(System.String,System.String[],`0@)">
            <summary>
            Tries to match the given segment and parameters against the constraint.
            </summary>
            <param name="segment">The segment to match.</param>
            <param name="parameters">The parameters to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.RangeRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Int32"/> route segments with value within a specified range.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.RangeRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>
            The constraint's name.
            </value>
        </member>
        <member name="M:Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(System.String,System.String[],System.Int32@)">
            <summary>
            Tries to match the given segment and parameters against the constraint.
            </summary>
            <param name="segment">The segment to match.</param>
            <param name="parameters">The parameters to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
              <c>true</c> if the segment and parameters matches the constraint, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.RouteSegmentConstraintBase`1">
            <summary>
            Convenience class for implementing a route segment constraint.
            </summary>
            <typeparam name="T">The type of parameter to capture.</typeparam>
        </member>
        <member name="P:Nancy.Routing.Constraints.RouteSegmentConstraintBase`1.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>The constraint's name.</value>
        </member>
        <member name="M:Nancy.Routing.Constraints.RouteSegmentConstraintBase`1.Matches(System.String)">
            <summary>
            Determines whether the given constraint matches the name of this constraint.
            </summary>
            <param name="constraint">The route constraint.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Nancy.Routing.Constraints.RouteSegmentConstraintBase`1.GetMatch(System.String,System.String,System.String)">
            <summary>
            Matches the segment and parameter name against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns>
            A <see cref="T:Nancy.Routing.Trie.SegmentMatch" /> containing information about the captured parameters 
            stating whether there is a match or not.
            </returns>
        </member>
        <member name="M:Nancy.Routing.Constraints.RouteSegmentConstraintBase`1.TryMatch(System.String,System.String,`0@)">
            <summary>
            Tries to match the given segment against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.VersionRouteSegmentConstraint">
            <summary>
            Constraint for version route segments.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Constraints.VersionRouteSegmentConstraint.Name">
            <summary>
            Gets the name of the constraint.
            </summary>
            <value>The constraint's name.</value>
        </member>
        <member name="M:Nancy.Routing.Constraints.VersionRouteSegmentConstraint.TryMatch(System.String,System.String,System.Version@)">
            <summary>
            Tries to match the given segment against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns>
            <see langword="true"/> if the segment matches the constraint, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Nancy.Routing.DefaultNancyModuleBuilder">
            <summary>
            Default implementation for building a full configured <see cref="T:Nancy.INancyModule"/> instance.
            </summary>
        </member>
        <member name="M:Nancy.Routing.DefaultNancyModuleBuilder.#ctor(Nancy.ViewEngines.IViewFactory,Nancy.IResponseFormatterFactory,Nancy.ModelBinding.IModelBinderLocator,Nancy.Validation.IModelValidatorLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.DefaultNancyModuleBuilder"/> class.
            </summary>
            <param name="viewFactory">The <see cref="T:Nancy.ViewEngines.IViewFactory"/> instance that should be assigned to the module.</param>
            <param name="responseFormatterFactory">An <see cref="T:Nancy.IResponseFormatterFactory"/> instance that should be used to create a response formatter for the module.</param>
            <param name="modelBinderLocator">A <see cref="T:Nancy.ModelBinding.IModelBinderLocator"/> instance that should be assigned to the module.</param>
            <param name="validatorLocator">A <see cref="T:Nancy.Validation.IModelValidatorLocator"/> instance that should be assigned to the module.</param>
        </member>
        <member name="M:Nancy.Routing.DefaultNancyModuleBuilder.BuildModule(Nancy.INancyModule,Nancy.NancyContext)">
            <summary>
            Builds a fully configured <see cref="T:Nancy.INancyModule"/> instance, based upon the provided <paramref name="module"/>.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> that should be configured.</param>
            <param name="context">The current request context.</param>
            <returns>A fully configured <see cref="T:Nancy.INancyModule"/> instance.</returns>
        </member>
        <member name="T:Nancy.Routing.DefaultRequestDispatcher">
            <summary>
            Default implementation of a request dispatcher.
            </summary>
        </member>
        <member name="M:Nancy.Routing.DefaultRequestDispatcher.#ctor(Nancy.Routing.IRouteResolver,System.Collections.Generic.IEnumerable{Nancy.Responses.Negotiation.IResponseProcessor},Nancy.Routing.IRouteInvoker,Nancy.Responses.Negotiation.IResponseNegotiator)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.DefaultRequestDispatcher"/> class, with
            the provided <paramref name="routeResolver"/>, <paramref name="responseProcessors"/> and <paramref name="routeInvoker"/>.
            </summary>
            <param name="routeResolver"></param>
            <param name="responseProcessors"></param>
            <param name="routeInvoker"></param>
            <param name="negotiator"></param>
        </member>
        <member name="M:Nancy.Routing.DefaultRequestDispatcher.Dispatch(Nancy.NancyContext,System.Threading.CancellationToken)">
            <summary>
            Dispatches a requests.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> for the current request.</param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="T:Nancy.Routing.DefaultRouteCacheProvider">
             <summary>
             It's not safe for a module to take a dependency on the cache (cyclic dependency)
            
             We provide an IRouteCacheProvider instead - the default implementation uses
             TinyIoC'd Func based lazy factory.
             </summary>
        </member>
        <member name="F:Nancy.Routing.DefaultRouteCacheProvider.RouteCacheFactory">
            <summary>
            The route cache factory
            </summary>
        </member>
        <member name="P:Nancy.Routing.DefaultRouteCacheProvider.Name">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the provider.</value>
        </member>
        <member name="P:Nancy.Routing.DefaultRouteCacheProvider.Description">
            <summary>
            Gets the description of the provider.
            </summary>
            <value>A <see cref="T:System.String"/> containing the description of the provider.</value>
        </member>
        <member name="P:Nancy.Routing.DefaultRouteCacheProvider.DiagnosticObject">
            <summary>
            Gets the object that contains the interactive diagnostics methods.
            </summary>
            <value>An instance of the interactive diagnostics object.</value>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteCacheProvider.#ctor(System.Func{Nancy.Routing.IRouteCache})">
            <summary>
            Initializes a new instance of the DefaultRouteCacheProvider class.
            </summary>
            <param name="routeCacheFactory"></param>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteCacheProvider.GetCache">
            <summary>
            Gets an instance of the route cache.
            </summary>
            <returns>An <see cref="T:Nancy.Routing.IRouteCache"/> instance.</returns>
        </member>
        <member name="T:Nancy.Routing.DefaultRouteDescriptionProvider">
            <summary>
            Default implementation of the <see cref="T:Nancy.Routing.IRouteDescriptionProvider"/> interface. Will look for
            route descriptions in resource files. The resource files should have the same name as the module
            for which it defines routes.
            </summary>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteDescriptionProvider.GetDescription(Nancy.INancyModule,System.String)">
            <summary>
            Get the description for a route.
            </summary>
            <param name="module">The module that the route is defined in.</param>
            <param name="path">The path of the route that the description should be retrieved for.</param>
            <returns>A <see cref="T:System.String"/> containing the description of the route if it could be found, otherwise <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="T:Nancy.Routing.DefaultRouteInvoker">
            <summary>
            Default route invoker implementation.
            </summary>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteInvoker.#ctor(Nancy.Responses.Negotiation.IResponseNegotiator)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.DefaultRouteInvoker"/> class.
            </summary>
            <param name="negotiator">The response negotiator.</param>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteInvoker.Invoke(Nancy.Routing.Route,System.Threading.CancellationToken,Nancy.DynamicDictionary,Nancy.NancyContext)">
            <summary>
            Invokes the specified <paramref name="route"/> with the provided <paramref name="parameters"/>.
            </summary>
            <param name="route">The route that should be invoked.</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="parameters">The parameters that the route should be invoked with.</param>
            <param name="context">The context of the route that is being invoked.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance that represents the result of the invoked route.</returns>
        </member>
        <member name="T:Nancy.Routing.DefaultRouteResolver">
            <summary>
            Default implementation of the <see cref="T:Nancy.Routing.IRouteResolver"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteResolver.#ctor(Nancy.INancyModuleCatalog,Nancy.Routing.INancyModuleBuilder,Nancy.Routing.IRouteCache,Nancy.Routing.Trie.IRouteResolverTrie,Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.DefaultRouteResolver"/> class, using
            the provided <paramref name="catalog"/>, <paramref name="moduleBuilder"/>,
            <paramref name="routeCache"/> and <paramref name="trie"/>.
            </summary>
            <param name="catalog">An <see cref="T:Nancy.INancyModuleCatalog"/> instance.</param>
            <param name="moduleBuilder">An <see cref="T:Nancy.Routing.INancyModuleBuilder"/> instance.</param>
            <param name="routeCache">An <see cref="T:Nancy.Routing.IRouteCache"/> instance.</param>
            <param name="trie">An <see cref="T:Nancy.Routing.Trie.IRouteResolverTrie"/> instance.</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteResolver.Resolve(Nancy.NancyContext)">
            <summary>
            Gets the route, and the corresponding parameter dictionary from the URL
            </summary>
            <param name="context">Current context</param>
            <returns>A <see cref="T:Nancy.Routing.ResolveResult"/> containing the resolved route information.</returns>
        </member>
        <member name="T:Nancy.Routing.DefaultRouteSegmentExtractor">
            <summary>
            Default implementation of the <see cref="T:Nancy.Routing.IRouteSegmentExtractor"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteSegmentExtractor.Extract(System.String)">
            <summary>
            Extracts the segments from the <paramref name="path"/>;
            </summary>
            <param name="path">The path that the segments should be extracted from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, containing the extracted segments.</returns>
        </member>
        <member name="T:Nancy.Routing.INancyModuleBuilder">
            <summary>
            Defines the functionality to build a fully configured NancyModule instance.
            </summary>
        </member>
        <member name="M:Nancy.Routing.INancyModuleBuilder.BuildModule(Nancy.INancyModule,Nancy.NancyContext)">
            <summary>
            Builds a fully configured <see cref="T:Nancy.INancyModule"/> instance, based upon the provided <paramref name="module"/>.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> that should be configured.</param>
            <param name="context">The current request context.</param>
            <returns>A fully configured <see cref="T:Nancy.INancyModule"/> instance.</returns>
        </member>
        <member name="T:Nancy.Routing.IRequestDispatcher">
            <summary>
            Functionality for processing an incoming request.
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRequestDispatcher.Dispatch(Nancy.NancyContext,System.Threading.CancellationToken)">
            <summary>
            Dispatches a requests.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> for the current request.</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="T:Nancy.Routing.IRouteCache">
            <summary>
            Contains a cache of all routes registered in the system
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteCache.IsEmpty">
            <summary>
            Gets a boolean value that indicates of the cache is empty or not.
            </summary>
            <returns><see langword="true"/> if the cache is empty, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nancy.Routing.IRouteCacheProvider">
             <summary>
             It's not safe for a module to take a dependency on the cache (cyclic dependency)
            
             We provide an <see cref="T:Nancy.Routing.IRouteCacheProvider"/> instead.
            
             It is *not* safe to call GetCache() inside a NancyModule constructor, although that shouldn't be necessary anyway.
             </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteCacheProvider.GetCache">
            <summary>
            Gets an instance of the route cache.
            </summary>
            <returns>An <see cref="T:Nancy.Routing.IRouteCache"/> instance.</returns>
        </member>
        <member name="T:Nancy.Routing.IRouteDescriptionProvider">
            <summary>
            Defines the functionality for retrieving a description for a specific route.
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteDescriptionProvider.GetDescription(Nancy.INancyModule,System.String)">
            <summary>
            Get the description for a route.
            </summary>
            <param name="module">The module that the route is defined in.</param>
            <param name="path">The path of the route that the description should be retrieved for.</param>
            <returns>A <see cref="T:System.String"/> containing the description of the route if it could be found, otherwise <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="T:Nancy.Routing.IRouteInvoker">
            <summary>
            Defines the functionality for invoking a <see cref="T:Nancy.Routing.Route"/> and returning a <see cref="T:Nancy.Response"/>
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteInvoker.Invoke(Nancy.Routing.Route,System.Threading.CancellationToken,Nancy.DynamicDictionary,Nancy.NancyContext)">
            <summary>
            Invokes the specified <paramref name="route"/> with the provided <paramref name="parameters"/>.
            </summary>
            <param name="route">The route that should be invoked.</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="parameters">The parameters that the route should be invoked with.</param>
            <param name="context">The context of the route that is being invoked.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance that represents the result of the invoked route.</returns>
        </member>
        <member name="T:Nancy.Routing.IRouteMetadataProvider">
            <summary>
            Defines the functionality for retrieving metadata for routes.
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteMetadataProvider.GetMetadataType(Nancy.INancyModule,Nancy.Routing.RouteDescription)">
            <summary>
            Gets the <see cref="T:System.Type"/> of the metadata that is created by the provider.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> instance that the route is declared in.</param>
            <param name="routeDescription">A <see cref="T:Nancy.Routing.RouteDescription"/> for the route.</param>
            <returns>A <see cref="T:System.Type"/> instance, or <see langword="null" /> if nothing is found.</returns>
        </member>
        <member name="M:Nancy.Routing.IRouteMetadataProvider.GetMetadata(Nancy.INancyModule,Nancy.Routing.RouteDescription)">
            <summary>
            Gets the metadata for the provided route.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> instance that the route is declared in.</param>
            <param name="routeDescription">A <see cref="T:Nancy.Routing.RouteDescription"/> for the route.</param>
            <returns>An object representing the metadata for the given route, or <see langword="null" /> if nothing is found.</returns>
        </member>
        <member name="T:Nancy.Routing.IRouteResolver">
            <summary>
            Returns a route that matches the request
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteResolver.Resolve(Nancy.NancyContext)">
            <summary>
            Gets the route, and the corresponding parameter dictionary from the URL
            </summary>
            <param name="context">Current context</param>
            <returns>A <see cref="T:Nancy.Routing.ResolveResult"/> containing the resolved route information.</returns>
        </member>
        <member name="T:Nancy.Routing.IRouteSegmentExtractor">
            <summary>
            Defines the functionality for extracting the individual segments from a route path.
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteSegmentExtractor.Extract(System.String)">
            <summary>
            Extracts the segments from the <paramref name="path"/>;
            </summary>
            <param name="path">The path that the segments should be extracted from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, containing the extracted segments.</returns>
        </member>
        <member name="T:Nancy.Routing.MethodNotAllowedRoute">
            <summary>
            Route that is returned when the path could be matched but it was for the wrong request method.
            </summary>
            <remarks>This is equal to sending back the 405 HTTP status code.</remarks>
        </member>
        <member name="M:Nancy.Routing.MethodNotAllowedRoute.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.MethodNotAllowedRoute"/> type, for the
            specified <paramref name="path"/>, <paramref name="method"/> and <paramref name="allowedMethods"/>.
            </summary>
            <param name="path">The path of the route.</param>
            <param name="method">The HTTP method of the route.</param>
            <param name="allowedMethods">The HTTP methods that can be used to invoke the route.</param>
        </member>
        <member name="T:Nancy.Routing.NotFoundRoute">
            <summary>
            Route that is returned when the path could not be matched.
            </summary>
            <remarks>This is equal to sending back the 404 HTTP status code.</remarks>
        </member>
        <member name="M:Nancy.Routing.NotFoundRoute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.NotFoundRoute"/> type, for the
            specified <paramref name="path"/> and <paramref name="method"/>.
            </summary>
            <param name="method">The HTTP method of the route.</param>
            <param name="path">The path of the route.</param>
        </member>
        <member name="T:Nancy.Routing.OptionsRoute">
            <summary>
            Route that is returned when the path could be matched but, the method was OPTIONS and there was no user defined handler for OPTIONS.
            </summary>
        </member>
        <member name="M:Nancy.Routing.OptionsRoute.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.OptionsRoute"/> class, with
            the provided <paramref name="path"/> and <paramref name="allowedMethods"/>.
            </summary>
            <param name="path">The request path.</param>
            <param name="allowedMethods">The list of allowed methods.</param>
        </member>
        <member name="T:Nancy.Routing.ParameterSegmentInformation">
            <summary>
            Information about a segment parameter.
            </summary>
        </member>
        <member name="M:Nancy.Routing.ParameterSegmentInformation.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.ParameterSegmentInformation"/> class.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="defaultValue">The default value, if any, of the parameter.</param>
            <param name="isOptional"><see langword="true"/> if the parameter is optional, otherwise <see langword="false" />.</param>
        </member>
        <member name="P:Nancy.Routing.ParameterSegmentInformation.DefaultValue">
            <summary>
            Gets the default value for the parameter.
            </summary>
        </member>
        <member name="P:Nancy.Routing.ParameterSegmentInformation.FullSegmentName">
            <summary>
            Gets the full name of the segment.
            </summary>
            <remarks>Returns a string in one of the formats: {name}, {name?}, {name?defaultValue} depending on the kind of parameter.</remarks>
        </member>
        <member name="P:Nancy.Routing.ParameterSegmentInformation.IsOptional">
            <summary>
            Gets whether or not the parameter is optional.
            </summary>
            <value><see langword="true"/> if the parameter is optional, otherwise <see langword="false" />.</value>
        </member>
        <member name="P:Nancy.Routing.ParameterSegmentInformation.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="T:Nancy.Routing.ResolveResult">
            <summary>
            A class representing a route resolution result
            </summary>
        </member>
        <member name="P:Nancy.Routing.ResolveResult.Route">
            <summary>
            Gets or sets the route
            </summary>
        </member>
        <member name="P:Nancy.Routing.ResolveResult.Parameters">
            <summary>
            Gets or sets the captured parameters
            </summary>
        </member>
        <member name="P:Nancy.Routing.ResolveResult.Before">
            <summary>
            Gets or sets the before module pipeline
            </summary>
        </member>
        <member name="P:Nancy.Routing.ResolveResult.After">
            <summary>
            Gets or sets the after module pipeline
            </summary>
        </member>
        <member name="P:Nancy.Routing.ResolveResult.OnError">
            <summary>
            Gets or sets the on error module pipeline
            </summary>
        </member>
        <member name="M:Nancy.Routing.ResolveResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.ResolveResult"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Routing.ResolveResult.#ctor(Nancy.Routing.Route,Nancy.DynamicDictionary,Nancy.BeforePipeline,Nancy.AfterPipeline,System.Func{Nancy.NancyContext,System.Exception,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.ResolveResult"/> class, with
            the provided <paramref name="route"/>, <paramref name="parameters"/>, <paramref name="before"/>, 
            <paramref name="after"/> and <paramref name="onError"/>.
            </summary>
            <param name="route">The request route instance.</param>
            <param name="parameters">The parameters.</param>
            <param name="before">The before pipeline instance</param>
            <param name="after">The after pipeline instace.</param>
            <param name="onError">The on error interceptor instance.</param>
        </member>
        <member name="T:Nancy.Routing.Route">
            <summary>
            Defines the core functionality of a route.
            </summary>
        </member>
        <member name="M:Nancy.Routing.Route.#ctor(Nancy.Routing.RouteDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Route"/> type, with the specified <see cref="T:Nancy.Routing.RouteDescription"/>.
            </summary>
            <param name="description">An <see cref="T:Nancy.Routing.RouteDescription"/> instance.</param>
        </member>
        <member name="M:Nancy.Routing.Route.#ctor(System.String,System.String,System.String,System.Func{Nancy.NancyContext,System.Boolean},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Route`1"/> type, with the specified definition.
            </summary>
            <param name="name">Route name</param>
            <param name="method">The HTTP method that the route is declared for.</param>
            <param name="path">The path that the route is declared for.</param>
            <param name="condition">A condition that needs to be satisfied inorder for the route to be eligible for invocation.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the value returned by the route.</param>
        </member>
        <member name="P:Nancy.Routing.Route.Description">
            <summary>
            Gets the description of the route.
            </summary>
            <value>A <see cref="T:Nancy.Routing.RouteDescription"/> instance.</value>
        </member>
        <member name="M:Nancy.Routing.Route.Invoke(Nancy.DynamicDictionary,System.Threading.CancellationToken)">
            <summary>
            Invokes the route with the provided <paramref name="parameters"/>.
            </summary>
            <param name="parameters">A <see cref="T:Nancy.DynamicDictionary"/> that contains the parameters that should be passed to the route.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The value that was produced by the route.</returns>
        </member>
        <member name="T:Nancy.Routing.Route`1">
            <summary>
            Stores information about a declared route in Nancy.
            </summary>
        </member>
        <member name="M:Nancy.Routing.Route`1.#ctor(Nancy.Routing.RouteDescription,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Route`1"/> type, with the specified <see cref="T:Nancy.Routing.RouteDescription"/>.
            </summary>
            <param name="description"></param>
            <param name="action">The action that should take place when the route is invoked.</param>
        </member>
        <member name="M:Nancy.Routing.Route`1.#ctor(System.String,System.String,System.String,System.Func{Nancy.NancyContext,System.Boolean},System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Route`1"/> type, with the specified definition.
            </summary>
            <param name="name">Route name</param>
            <param name="method">The HTTP method that the route is declared for.</param>
            <param name="path">The path that the route is declared for.</param>
            <param name="condition">A condition that needs to be satisfied inorder for the route to be eligible for invocation.</param>
            <param name="action">The action that should take place when the route is invoked.</param>
        </member>
        <member name="M:Nancy.Routing.Route`1.#ctor(System.String,System.String,System.Func{Nancy.NancyContext,System.Boolean},System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Route`1"/> type, with the specified definition.
            </summary>
            <param name="method">The HTTP method that the route is declared for.</param>
            <param name="path">The path that the route is declared for.</param>
            <param name="condition">A condition that needs to be satisfied inorder for the route to be eligiable for invocation.</param>
            <param name="action">The action that should take place when the route is invoked.</param>
        </member>
        <member name="P:Nancy.Routing.Route`1.Action">
            <summary>
            Gets or sets the action that should take place when the route is invoked.
            </summary>
            <value>A <see cref="T:System.Func`2"/> that represents the action of the route.</value>
        </member>
        <member name="M:Nancy.Routing.Route`1.Invoke(Nancy.DynamicDictionary,System.Threading.CancellationToken)">
            <summary>
            Invokes the route with the provided <paramref name="parameters"/>.
            </summary>
            <param name="parameters">A <see cref="T:Nancy.DynamicDictionary"/> that contains the parameters that should be passed to the route.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A (hot) task of <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="T:Nancy.Routing.RouteCache">
            <summary>
            Caches information about all the available routes that was discovered by the bootstrapper.
            </summary>
        </member>
        <member name="M:Nancy.Routing.RouteCache.#ctor(Nancy.INancyModuleCatalog,Nancy.INancyContextFactory,Nancy.Routing.IRouteSegmentExtractor,Nancy.Routing.IRouteDescriptionProvider,Nancy.Culture.ICultureService,System.Collections.Generic.IEnumerable{Nancy.Routing.IRouteMetadataProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.RouteCache"/> class.
            </summary>
            <param name="moduleCatalog">The <see cref="T:Nancy.INancyModuleCatalog"/> that should be used by the cache.</param>
            <param name="contextFactory">The <see cref="T:Nancy.INancyContextFactory"/> that should be used to create a context instance.</param>
            <param name="routeSegmentExtractor"> </param>
            <param name="cultureService"></param>
            <param name="routeMetadataProviders"></param>
            <param name="routeDescriptionProvider"></param>
        </member>
        <member name="M:Nancy.Routing.RouteCache.IsEmpty">
            <summary>
            Gets a boolean value that indicates of the cache is empty or not.
            </summary>
            <returns><see langword="true"/> if the cache is empty, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nancy.Routing.RouteCacheExtensions">
            <summary>
            Contains extensions for the <see cref="T:Nancy.Routing.IRouteCache"/> type.
            </summary>
        </member>
        <member name="M:Nancy.Routing.RouteCacheExtensions.RetrieveMetadata``1(System.Collections.Generic.IDictionary{System.Type,System.Collections.Generic.List{System.Tuple{System.Int32,Nancy.Routing.RouteDescription}}})">
            <summary>
            Retrieves metadata for all declared routes.
            </summary>
            <typeparam name="TMetadata">The type of the metadata to retrieve.</typeparam>
            <param name="cache">The <see cref="T:Nancy.Routing.IRouteCache"/> to retrieve the metadata.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing instances of the <typeparamref name="TMetadata"/> type.</returns>
        </member>
        <member name="T:Nancy.Routing.RouteDescription">
            <summary>
            Represents the various parts of a route lambda.
            </summary>
        </member>
        <member name="M:Nancy.Routing.RouteDescription.#ctor(System.String,System.String,System.String,System.Func{Nancy.NancyContext,System.Boolean},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.RouteDescription"/> class.
            </summary>
            <param name="name">Route name</param>
            <param name="method">The request method of the route.</param>
            <param name="path">The path that the route will be invoked for.</param>
            <param name="condition">The condition that has to be fulfilled for the route to be a valid match.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the value returned by the route.</param>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Name">
            <summary>
            The name of the route
            </summary>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Condition">
            <summary>
            The condition that has to be fulfilled inorder for the route to be a valid match.
            </summary>
            <value>A function that evaluates the condition when a <see cref="T:Nancy.NancyContext"/> instance is passed in.</value>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Description">
            <summary>
            The description of what the route is for.
            </summary>
            <value>A <see cref="T:System.String"/> containing the description of the route.</value>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Metadata">
            <summary>
            Gets or sets the metadata information for a route.
            </summary>
            <value>A <see cref="T:Nancy.Routing.RouteMetadata"/> instance.</value>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Method">
            <summary>
            Gets the method of the route.
            </summary>
            <value>A <see cref="T:System.String"/> containing the method of the route.</value>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Path">
            <summary>
            Gets the path that the route will be invoked for.
            </summary>
            <value>A <see cref="T:System.String"/> containing the path of the route.</value>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Segments">
            <summary>
            Gets or set the segments, for the route, that was returned by the <see cref="T:Nancy.Routing.IRouteSegmentExtractor"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, containing the segments for the route.</value>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.ReturnType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the value returned by the route.
            </summary>
            <value>A <see cref="T:System.Type"/> instance.</value>
        </member>
        <member name="T:Nancy.Routing.RouteMetadata">
            <summary>
            Stores metadata created by <see cref="T:Nancy.Routing.IRouteMetadataProvider"/> instances.
            </summary>
        </member>
        <member name="M:Nancy.Routing.RouteMetadata.#ctor(System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Creates a new instance of the <see cref="T:Nancy.Routing.RouteMetadata"/> class.
            </summary>
            <param name="metadata">An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the metadata, organised by the type that it is stored in.</param>
        </member>
        <member name="P:Nancy.Routing.RouteMetadata.Raw">
            <summary>
            Gets the raw metadata <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.</value>
        </member>
        <member name="M:Nancy.Routing.RouteMetadata.Has``1">
            <summary>
            Gets a boolean that indicates if the specific type of metadata is stored.
            </summary>
            <typeparam name="TMetadata">The type of the metadata to check for.</typeparam>
            <returns><see langword="true"/> if metadata, of the requested type is stored, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Nancy.Routing.RouteMetadata.Retrieve``1">
            <summary>
            Retrieves metadata of the provided type.
            </summary>
            <typeparam name="TMetadata">The type of the metadata to retrieve.</typeparam>
            <returns>The metadata instance if available, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:Nancy.Routing.RouteMetadataProvider`1">
            <summary>
            Defines the functionality for retrieving metadata for routes.
            </summary>
            <typeparam name="TMetadata">The metadata type.</typeparam>
        </member>
        <member name="M:Nancy.Routing.RouteMetadataProvider`1.GetMetadataType(Nancy.INancyModule,Nancy.Routing.RouteDescription)">
            <summary>
            Gets the <see cref="T:System.Type"/> of the metadata that is created by the provider.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> instance that the route is declared in.</param>
            <param name="routeDescription">A <see cref="T:Nancy.Routing.RouteDescription"/> for the route.</param>
            <returns>A <see cref="T:System.Type"/> instance, or null if none are found.</returns>
        </member>
        <member name="M:Nancy.Routing.RouteMetadataProvider`1.GetMetadata(Nancy.INancyModule,Nancy.Routing.RouteDescription)">
            <summary>
            Gets the metadata for the provided route.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule" /> instance that the route is declared in.</param>
            <param name="routeDescription">A <see cref="T:Nancy.Routing.RouteDescription" /> for the route.</param>
            <returns>An instance of <typeparamref name="TMetadata"/>.</returns>
        </member>
        <member name="M:Nancy.Routing.RouteMetadataProvider`1.GetRouteMetadata(Nancy.INancyModule,Nancy.Routing.RouteDescription)">
            <summary>
            Gets the metadata for the provided route.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> instance that the route is declared in.</param>
            <param name="routeDescription">A <see cref="T:Nancy.Routing.RouteDescription"/> for the route.</param>
            <returns>An instance of <typeparamref name="TMetadata"/>.</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.IRouteResolverTrie">
            <summary>
            Trie structure for resolving routes
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.IRouteResolverTrie.BuildTrie(Nancy.Routing.IRouteCache)">
            <summary>
            Build the trie from the route cache
            </summary>
            <param name="cache">The route cache</param>
        </member>
        <member name="M:Nancy.Routing.Trie.IRouteResolverTrie.GetMatches(System.String,System.String,Nancy.NancyContext)">
            <summary>
            Get all matches for the given method and path
            </summary>
            <param name="method">HTTP method</param>
            <param name="path">Requested path</param>
            <param name="context">Current Nancy context</param>
            <returns>An array of <see cref="T:Nancy.Routing.Trie.MatchResult"/> elements</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.IRouteResolverTrie.GetOptions(System.String,Nancy.NancyContext)">
            <summary>
            Get all method options for the given path
            </summary>
            <param name="path">Requested path</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of strings, each representing an allowed method</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.ITrieNodeFactory">
            <summary>
            Factory for creating trie nodes from route definition segments
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.ITrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode,System.String)">
            <summary>
            Gets the correct Trie node type for the given segment
            </summary>
            <param name="parent">Parent node</param>
            <param name="segment">Segment</param>
            <returns>Corresponding TrieNode instance</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.MatchResult">
            <summary>
            Match result for a matched route
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.MatchResult.Parameters">
            <summary>
            Gets or sets the captured parameters
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.MatchResult.NoMatch">
            <summary>
            Gets the "no match" <see cref="T:Nancy.Routing.Trie.MatchResult"/>
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.MatchResult.NoMatches">
            <summary>
            Gets the "no matches" <see cref="T:Nancy.Routing.Trie.MatchResult"/> collection
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.MatchResult.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.MatchResult"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Nancy.Routing.Trie.MatchResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.MatchResult"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.MatchResult.CompareTo(Nancy.Routing.Trie.MatchResult)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:Nancy.Routing.Trie.NodeData">
            <summary>
            Represents a route that ends at a particular node.
            We store/calculate as much as we can at build time to save
            time during route matching.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.NodeData.ModuleType">
            <summary>
            Gets or sets the module type from the matching module
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.NodeData.Method">
            <summary>
            Gets or sets the route method
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.NodeData.RouteIndex">
            <summary>
            Gets or sets the index in the module routing table
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.NodeData.RouteLength">
            <summary>
            Gets or sets the number of segments in the route
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.NodeData.Score">
            <summary>
            Gets or sets the route score
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.NodeData.Condition">
            <summary>
            Gets or sets the route condition delegate
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.NodeDataExtensions">
            <summary>
            Helpers methods for NodeData
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.NodeDataExtensions.ToResult(Nancy.Routing.Trie.NodeData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts a <see cref="T:Nancy.Routing.Trie.NodeData"/> instance into a <see cref="T:Nancy.Routing.Trie.MatchResult"/>
            </summary>
            <param name="data">Node data</param>
            <param name="parameters">Captured parameters</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.MatchResult"/> instance</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.CaptureNode">
            <summary>
            A node for standard captures e.g. {foo}
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.CaptureNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNode.#ctor(Nancy.Routing.Trie.Nodes.TrieNode,System.String,Nancy.Routing.Trie.ITrieNodeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.Nodes.CaptureNode"/> class, with
            the provided <paramref name="parent"/>, <paramref name="segment"/> and <paramref name="nodeFactory"/>.
            </summary>
            <param name="parent">Parent node</param>
            <param name="segment">Segment of the route definition</param>
            <param name="nodeFactory">Factory for creating new nodes</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.CaptureNodeWithConstraint">
            <summary>
            A node for constraint captures e.g. {foo:alpha}, {foo:datetime}
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.CaptureNodeWithConstraint.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithConstraint.#ctor(Nancy.Routing.Trie.Nodes.TrieNode,System.String,Nancy.Routing.Trie.ITrieNodeFactory,System.Collections.Generic.IEnumerable{Nancy.Routing.Constraints.IRouteSegmentConstraint})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.Nodes.CaptureNodeWithConstraint"/> class, with
            the provided <paramref name="parent"/>, <paramref name="segment"/> and <paramref name="nodeFactory"/>.
            </summary>
            <param name="parent">The parent.</param>
            <param name="segment">The segment.</param>
            <param name="nodeFactory">The node factory.</param>
            <param name="routeSegmentConstraints">The route segment constraints.</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithConstraint.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.CaptureNodeWithDefaultValue">
            <summary>
            A capture node with a default value e.g. {foo?default}
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.CaptureNodeWithDefaultValue.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithDefaultValue.#ctor(Nancy.Routing.Trie.Nodes.TrieNode,System.String,Nancy.Routing.Trie.ITrieNodeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.Nodes.CaptureNodeWithDefaultValue"/> class, with
            the provided <paramref name="parent"/>, <paramref name="segment"/> and <paramref name="nodeFactory"/>.
            </summary>
            <param name="parent">The parent.</param>
            <param name="segment">The segment.</param>
            <param name="nodeFactory">The node factory.</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithDefaultValue.Add(System.String[],System.Int32,System.Int32,System.Int32,System.Type,System.Int32,Nancy.Routing.RouteDescription)">
            <summary>
            Add a new route to the trie
            Adds itself as a normal capture node, but also sets a default capture
            on the parent and adds this node's children as children of the parent
            too (so it can effectively be "skipped" during matching)
            </summary>
            <param name="segments">The segments of the route definition</param>
            <param name="currentIndex">Current index in the segments array</param>
            <param name="currentScore">Current score for this route</param>
            <param name="nodeCount">Number of nodes added for this route</param>
            <param name="moduleType">The module key the route comes from</param>
            <param name="routeIndex">The route index in the module</param>
            <param name="routeDescription">The route description</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithDefaultValue.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters">
            <summary>
            A node multiple standard captures combined with a literal e.g. {id}.png.{thing}.{otherthing}
            Captures parameters within segments that contain literals.
                i.e:
                    /{file}.{name}
                    /{file}.html
                    /{major}.{minor}.{revision}B{build}
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.#ctor(Nancy.Routing.Trie.Nodes.TrieNode,System.String,Nancy.Routing.Trie.ITrieNodeFactory,System.Collections.Generic.IEnumerable{Nancy.Routing.Constraints.IRouteSegmentConstraint})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters"/> class, with
            the provided <paramref name="parent"/>, <paramref name="segment"/>, <paramref name="nodeFactory"/> and <paramref name="routeSegmentConstraints"/>.
            </summary>
            <param name="parent">The parent node</param>
            <param name="segment">The segment to match upon</param>
            <param name="nodeFactory">The node factory.</param>
            <param name="routeSegmentConstraints">The route segment constraints.</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(System.String)">
            <summary>
            Determines whether this TrieNode should be used for the given segment.
            </summary>
            <param name="segment">The route segment</param>
            <returns>a boolean</returns>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames">
            <summary>
            Extracts the parameter name and the literals for the segment
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.GreedyCaptureNode">
            <summary>
            A greedy capture node e.g. {greedy*}
            e.g. /foo/bar/{greedy*} - this node will be hit for /foo/bar/[anything that doesn't match another route], but
            not for just /foo/bar
            e.g. /foo/{greedy*}/bar - this node will be hit for /foo/[anything that doesn't match another route]/bar
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.GreedyCaptureNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.GreedyCaptureNode.#ctor(Nancy.Routing.Trie.Nodes.TrieNode,System.String,Nancy.Routing.Trie.ITrieNodeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.Nodes.GreedyCaptureNode"/> class with
            the provided <paramref name="parent"/>, <paramref name="segment"/> and <paramref name="nodeFactory"/>.
            </summary>
            <param name="parent">Parent node</param>
            <param name="segment">Segment of the route definition</param>
            <param name="nodeFactory">Factory for creating new nodes</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.GreedyCaptureNode.GetMatches(System.String[],System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object},Nancy.NancyContext)">
            <summary>
            Gets all matches for a given requested route
            Overridden to handle greedy capturing
            </summary>
            <param name="segments">Requested route segments</param>
            <param name="currentIndex">Current index in the route segments</param>
            <param name="capturedParameters">Currently captured parameters</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.GreedyCaptureNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            Not-required or called for this node type
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.GreedyRegExCaptureNode">
            <summary>
            A greedy regular expression capture node e.g. ^(?&lt;id>\d{0,100})$
            For use on an entire route path, regular expression must be surrounded by ^( )$
            e.g. @"^(?:(?&lt;id>videos/\d{1,10})(?:/{0,1}(?&lt;slug>.*)))$"
            This will match for a Url like /videos/123/some-random-slug
            and capture 'videos/123' and 'some-random-slug'
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.GreedyRegExCaptureNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.GreedyRegExCaptureNode.#ctor(Nancy.Routing.Trie.Nodes.TrieNode,System.String,Nancy.Routing.Trie.ITrieNodeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.Nodes.GreedyRegExCaptureNode"/> class with
            the provided <paramref name="parent"/>, <paramref name="segment"/> and <paramref name="nodeFactory"/>.
            </summary>
            <param name="parent">Parent node</param>
            <param name="segment">Segment of the route definition</param>
            <param name="nodeFactory">Factory for creating new nodes</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.GreedyRegExCaptureNode.GetMatches(System.String[],System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object},Nancy.NancyContext)">
            <summary>
            Gets all matches for a given requested route
            Overridden to handle greedy capturing
            </summary>
            <param name="segments">Requested route segments</param>
            <param name="currentIndex">Current index in the route segments</param>
            <param name="capturedParameters">Currently captured parameters</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.GreedyRegExCaptureNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            Not-required or called for this node type
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.LiteralNode">
            <summary>
            Literal string node e.g. goo
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.LiteralNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.LiteralNode.#ctor(Nancy.Routing.Trie.Nodes.TrieNode,System.String,Nancy.Routing.Trie.ITrieNodeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.Nodes.LiteralNode"/> class with
            the provided <paramref name="parent"/>, <paramref name="segment"/> and <paramref name="nodeFactory"/>.
            </summary>
            <param name="parent">Parent node</param>
            <param name="segment">Segment of the route definition</param>
            <param name="nodeFactory">Factory for creating new nodes</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.LiteralNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.OptionalCaptureNode">
            <summary>
            An optional capture node e.g. {foo?}
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.OptionalCaptureNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.OptionalCaptureNode.#ctor(Nancy.Routing.Trie.Nodes.TrieNode,System.String,Nancy.Routing.Trie.ITrieNodeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.Nodes.OptionalCaptureNode"/> class with
            the provided <paramref name="parent"/>, <paramref name="segment"/> and <paramref name="nodeFactory"/>.
            </summary>
            <param name="parent">Parent node</param>
            <param name="segment">Segment of the route definition</param>
            <param name="nodeFactory">Factory for creating new nodes</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.OptionalCaptureNode.Add(System.String[],System.Int32,System.Int32,System.Int32,System.Type,System.Int32,Nancy.Routing.RouteDescription)">
            <summary>
            Add a new route to the trie
            Adds itself as a normal capture node, but also adds this node's
            children as children of the parent too
            (so it can effectively be "skipped" during matching)
            </summary>
            <param name="segments">The segments of the route definition</param>
            <param name="currentIndex">Current index in the segments array</param>
            <param name="currentScore">Current score for this route</param>
            <param name="nodeCount">Number of nodes added for this route</param>
            <param name="moduleType">The module key the route comes from</param>
            <param name="routeIndex">The route index in the module</param>
            <param name="routeDescription">The route description</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.OptionalCaptureNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.RegExNode">
            <summary>
            A regular expression capture node e.g. (?&lt;foo>\d{2,4})
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.RegExNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.RegExNode.#ctor(Nancy.Routing.Trie.Nodes.TrieNode,System.String,Nancy.Routing.Trie.ITrieNodeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.Nodes.RegExNode"/>  class with
            the provided <paramref name="parent"/>, <paramref name="segment"/> and <paramref name="nodeFactory"/>.
            </summary>
            <param name="parent">Parent node</param>
            <param name="segment">Segment of the route definition</param>
            <param name="nodeFactory">Factory for creating new nodes</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.RegExNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.RootNode">
            <summary>
            Root node of a trie
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.RootNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.RootNode.#ctor(Nancy.Routing.Trie.ITrieNodeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.Nodes.RootNode"/> class class with
            the provided <paramref name="nodeFactory"/>.
            </summary>
            <param name="nodeFactory">The node factory.</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.RootNode.GetMatches(System.String[],System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object},Nancy.NancyContext)">
            <summary>
            Gets all matches for a given requested route
            </summary>
            <param name="segments">Requested route segments</param>
            <param name="currentIndex">Current index in the route segments</param>
            <param name="capturedParameters">Currently captured parameters</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.RootNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.TrieNode">
            <summary>
            A base class representing a node in the route trie
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.TrieNode.Parent">
            <summary>
            Gets or sets the parent node
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.TrieNode.RouteDefinitionSegment">
            <summary>
            Gets or sets the segment from the route definition that this node represents
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.TrieNode.Children">
            <summary>
            Gets or sets the children of this node
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.TrieNode.NodeData">
            <summary>
            Gets or sets the node data stored at this node, which will be converted
            into the <see cref="T:Nancy.Routing.Trie.MatchResult"/> if a match is found
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.TrieNode.AdditionalParameters">
            <summary>
            Additional parameters to set that can be determined at trie build time
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.TrieNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.#ctor(Nancy.Routing.Trie.Nodes.TrieNode,System.String,Nancy.Routing.Trie.ITrieNodeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.Nodes.TrieNode"/> class
            </summary>
            <param name="parent">Parent node</param>
            <param name="segment">Segment of the route definition</param>
            <param name="nodeFactory">Factory for creating new nodes</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.Add(System.String[],System.Type,System.Int32,Nancy.Routing.RouteDescription)">
            <summary>
            Add a new route to the trie
            </summary>
            <param name="segments">The segments of the route definition</param>
            <param name="moduleType">The module key the route comes from</param>
            <param name="routeIndex">The route index in the module</param>
            <param name="routeDescription">The route description</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.Add(System.String[],System.Int32,System.Int32,System.Int32,System.Type,System.Int32,Nancy.Routing.RouteDescription)">
            <summary>
            Add a new route to the trie
            </summary>
            <param name="segments">The segments of the route definition</param>
            <param name="currentIndex">Current index in the segments array</param>
            <param name="currentScore">Current score for this route</param>
            <param name="nodeCount">Number of nodes added for this route</param>
            <param name="moduleType">The module key the route comes from</param>
            <param name="routeIndex">The route index in the module</param>
            <param name="routeDescription">The route description</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.GetMatches(System.String[],Nancy.NancyContext)">
            <summary>
            Gets all matches for a given requested route
            </summary>
            <param name="segments">Requested route segments</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.GetMatches(System.String[],System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object},Nancy.NancyContext)">
            <summary>
            Gets all matches for a given requested route
            </summary>
            <param name="segments">Requested route segments</param>
            <param name="currentIndex">Current index in the route segments</param>
            <param name="capturedParameters">Currently captured parameters</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.GetRoutes">
            <summary>
            Gets a string representation of all routes
            </summary>
            <returns>Collection of strings, each representing a route</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.BuildNodeData(System.Int32,System.Int32,System.Type,System.Int32,Nancy.Routing.RouteDescription)">
            <summary>
            Build the node data that will be used to create the <see cref="T:Nancy.Routing.Trie.MatchResult"/>
            We calculate/store as much as possible at build time to reduce match time.
            </summary>
            <param name="nodeCount">Number of nodes in the route</param>
            <param name="score">Score for the route</param>
            <param name="moduleType">The module key the route comes from</param>
            <param name="routeIndex">The route index in the module</param>
            <param name="routeDescription">The route description</param>
            <returns>A NodeData instance</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.NoMoreSegments(System.String[],System.Int32)">
            <summary>
            Returns whether we are at the end of the segments
            </summary>
            <param name="segments">Route segments</param>
            <param name="currentIndex">Current index</param>
            <returns>True if no more segments left, false otherwise</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.BuildResults(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Build the results collection from the captured parameters if
            this node is the end result
            </summary>
            <param name="capturedParameters">Currently captured parameters</param>
            <param name="localCaptures">Parameters captured by the local matching</param>
            <returns>Array of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects corresponding to each set of <see cref="P:Nancy.Routing.Trie.Nodes.TrieNode.NodeData"/> stored at this node</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.GetMatchingChildren(System.String[],System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},Nancy.NancyContext)">
            <summary>
            Gets all the matches from this node's children
            </summary>
            <param name="segments">Requested route segments</param>
            <param name="currentIndex">Current index</param>
            <param name="capturedParameters">Currently captured parameters</param>
            <param name="localCaptures">Parameters captured by the local matching</param>
            <param name="context">Current Nancy context</param>
            <returns>Collection of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.RouteResolverTrie">
            <summary>
            The default route resolution trie
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.RouteResolverTrie.#ctor(Nancy.Routing.Trie.ITrieNodeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.RouteResolverTrie"/> class.
            </summary>
            <param name="nodeFactory">The node factory.</param>
        </member>
        <member name="M:Nancy.Routing.Trie.RouteResolverTrie.BuildTrie(Nancy.Routing.IRouteCache)">
            <summary>
            Build the trie from the route cache
            </summary>
            <param name="cache">The route cache</param>
        </member>
        <member name="M:Nancy.Routing.Trie.RouteResolverTrie.GetMatches(System.String,System.String,Nancy.NancyContext)">
            <summary>
            Get all matches for the given method and path
            </summary>
            <param name="method">HTTP method</param>
            <param name="path">Requested path</param>
            <param name="context">Current Nancy context</param>
            <returns>An array of <see cref="T:Nancy.Routing.Trie.MatchResult"/> elements</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.RouteResolverTrie.GetOptions(System.String,Nancy.NancyContext)">
            <summary>
            Get all method options for the given path
            </summary>
            <param name="path">Requested path</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of strings, each representing an allowed method</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.RouteResolverTrie.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Nancy.Routing.Trie.SegmentMatch">
            <summary>
            A segment match result
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.SegmentMatch.Matches">
            <summary>
            Gets a value indicating whether the match was successful or not
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.SegmentMatch.NoMatch">
            <summary>
            Gets a <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> representing "no match"
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.SegmentMatch.CapturedParameters">
            <summary>
            Gets the captured parameters from the match, if the match was successful
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.SegmentMatch.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> class, with
            the provided <paramref name="matches"/>.
            </summary>
            <param name="matches"><see langword="true"/> if match was successful.</param>
        </member>
        <member name="T:Nancy.Routing.Trie.TrieNodeFactory">
            <summary>
            Factory for creating the correct type of TrieNode
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.TrieNodeFactory.#ctor(System.Collections.Generic.IEnumerable{Nancy.Routing.Constraints.IRouteSegmentConstraint})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.TrieNodeFactory"/> class with
            the provided <paramref name="routeSegmentConstraints"/>.
            </summary>
            <param name="routeSegmentConstraints">The route segment constraints.</param>
        </member>
        <member name="M:Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode,System.String)">
            <summary>
            Gets the correct Trie node type for the given segment
            </summary>
            <param name="parent">Parent node</param>
            <param name="segment">Segment</param>
            <returns>TrieNode instance</returns>
        </member>
        <member name="T:Nancy.Security.ClaimsPrincipalExtensions">
            <summary>
            Extension methods for working with IUserIdentity.
            </summary>
        </member>
        <member name="M:Nancy.Security.ClaimsPrincipalExtensions.IsAuthenticated(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Tests if the user is authenticated.
            </summary>
            <param name="user">User to be verified</param>
            <returns>True if the user is authenticated, false otherwise</returns>
        </member>
        <member name="M:Nancy.Security.ClaimsPrincipalExtensions.HasClaims(System.Security.Claims.ClaimsPrincipal,System.Predicate{System.Security.Claims.Claim}[])">
            <summary>
            Tests if the user has all of the required claims.
            </summary>
            <param name="user">User to be verified</param>
            <param name="requiredClaims">Claims the user needs to have</param>
            <returns>True if the user has all of the required claims, false otherwise</returns>
        </member>
        <member name="M:Nancy.Security.ClaimsPrincipalExtensions.HasAnyClaim(System.Security.Claims.ClaimsPrincipal,System.Predicate{System.Security.Claims.Claim}[])">
            <summary>
            Tests if the user has at least one of the required claims.
            </summary>
            <param name="user">User to be verified</param>
            <param name="requiredClaims">Claims the user needs to have at least one of</param>
            <returns>True if the user has at least one of the required claims, false otherwise</returns>
        </member>
        <member name="M:Nancy.Security.ClaimsPrincipalExtensions.HasValidClaims(System.Security.Claims.ClaimsPrincipal,System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Boolean})">
            <summary>
            Tests if the user has claims that satisfy the supplied validation function.
            </summary>
            <param name="user">User to be verified</param>
            <param name="isValid">Validation function to be called with the authenticated
            users claims</param>
            <returns>True if the user does pass the supplied validation function, false otherwise</returns>
        </member>
        <member name="T:Nancy.Security.Csrf">
            <summary>
            Csrf protection methods
            </summary>
        </member>
        <member name="M:Nancy.Security.Csrf.Enable(Nancy.Bootstrapper.IPipelines,Nancy.Cryptography.CryptographyConfiguration,System.Boolean)">
            <summary>
            Enables Csrf token generation.
            </summary>
            <remarks>This is disabled by default.</remarks>
            <param name="pipelines">The application pipelines.</param>
            <param name="cryptographyConfiguration">The cryptography configuration. This is <see langword="null" /> by default.</param>
            <param name="useSecureCookie">Set the CSRF cookie secure flag. This is <see langword="false"/> by default</param>
        </member>
        <member name="M:Nancy.Security.Csrf.Disable(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Disable csrf token generation
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="M:Nancy.Security.Csrf.CreateNewCsrfToken(Nancy.INancyModule,Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Creates a new csrf token for this response with an optional salt.
            Only necessary if a particular route requires a new token for each request.
            </summary>
            <param name="module">Nancy module</param>
            <param name="cryptographyConfiguration">The cryptography configuration. This is <c>null</c> by default.</param>
        </member>
        <member name="M:Nancy.Security.Csrf.GenerateTokenString(Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Creates a new csrf token with an optional salt.
            Does not store the token in context.
            </summary>
            <returns>The generated token</returns>
        </member>
        <member name="M:Nancy.Security.Csrf.ValidateCsrfToken(Nancy.INancyModule,System.Nullable{System.TimeSpan})">
            <summary>
            Validate that the incoming request has valid CSRF tokens.
            Throws <see cref="T:Nancy.Security.CsrfValidationException"/> if validation fails.
            </summary>
            <param name="module">Module object</param>
            <param name="validityPeriod">Optional validity period before it times out</param>
            <exception cref="T:Nancy.Security.CsrfValidationException">If validation fails</exception>
        </member>
        <member name="T:Nancy.Security.CsrfApplicationStartup">
            <summary>
            Wires up the CSRF (anti-forgery token) support at application startup.
            </summary>
        </member>
        <member name="M:Nancy.Security.CsrfApplicationStartup.#ctor(Nancy.Cryptography.CryptographyConfiguration,Nancy.Security.ICsrfTokenValidator)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Security.CsrfApplicationStartup"/> class, using the
            provided <paramref name="cryptographyConfiguration"/> and <paramref name="tokenValidator"/>.
            </summary>
            <param name="cryptographyConfiguration">The cryptographic configuration to use.</param>
            <param name="tokenValidator">The token validator that should be used.</param>
        </member>
        <member name="P:Nancy.Security.CsrfApplicationStartup.CryptographyConfiguration">
            <summary>
            Gets the configured crypto config
            </summary>
        </member>
        <member name="P:Nancy.Security.CsrfApplicationStartup.TokenValidator">
            <summary>
            Gets the configured token validator
            </summary>
        </member>
        <member name="M:Nancy.Security.CsrfApplicationStartup.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Perform any initialisation tasks
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.Security.CsrfToken">
            <summary>
            Represents a Csrf protection token
            </summary>
        </member>
        <member name="F:Nancy.Security.CsrfToken.DEFAULT_CSRF_KEY">
            <summary>
            The default key for the csrf cookie/form value/querystring value
            </summary>
        </member>
        <member name="P:Nancy.Security.CsrfToken.RandomBytes">
            <summary>
            Randomly generated bytes
            </summary>
        </member>
        <member name="P:Nancy.Security.CsrfToken.CreatedDate">
            <summary>
            Date and time the token was created
            </summary>
        </member>
        <member name="P:Nancy.Security.CsrfToken.Hmac">
            <summary>
            Tamper prevention hmac
            </summary>
        </member>
        <member name="M:Nancy.Security.CsrfToken.Equals(Nancy.Security.CsrfToken)">
            <summary>
            Compares two <see cref="T:Nancy.Security.CsrfToken"/> instances.
            </summary>
            <param name="other">The <see cref="T:Nancy.Security.CsrfToken"/> to compare.</param>
            <returns>
            <see langword="true"/> if two <see cref="T:Nancy.Security.CsrfToken"/> instances are equal, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Nancy.Security.CsrfToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.Security.CsrfToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.Security.CsrfToken.op_Equality(Nancy.Security.CsrfToken,Nancy.Security.CsrfToken)">
            <summary>
            Implements the operator == for <see cref="T:Nancy.Security.CsrfToken"/> instances.
            </summary>
            <param name="left">The left <see cref="T:Nancy.Security.CsrfToken"/>.</param>
            <param name="right">The right <see cref="T:Nancy.Security.CsrfToken"/>.</param>
            <returns>
            <c>true</c> if left and right <see cref="T:Nancy.Security.CsrfToken"/> instances are equal.
            </returns>
        </member>
        <member name="M:Nancy.Security.CsrfToken.op_Inequality(Nancy.Security.CsrfToken,Nancy.Security.CsrfToken)">
            <summary>
            Implements the operator != for <see cref="T:Nancy.Security.CsrfToken"/> instances.
            </summary>
            <param name="left">The left <see cref="T:Nancy.Security.CsrfToken"/>.</param>
            <param name="right">The right <see cref="T:Nancy.Security.CsrfToken"/>.</param>
            <returns>
            <c>true</c> if left and right <see cref="T:Nancy.Security.CsrfToken"/> instances are not equal.
            </returns>
        </member>
        <member name="T:Nancy.Security.CsrfTokenExtensions">
            <summary>
            Extension methods for CSRF token related tasks.
            </summary>
        </member>
        <member name="M:Nancy.Security.CsrfTokenExtensions.GetCsrfTokenBytes(Nancy.Security.CsrfToken)">
            <summary>
            Gets a byte array representation of the csrf token for generating
            hmacs
            </summary>
            <param name="token">Token</param>
            <returns>Byte array representing the token</returns>
        </member>
        <member name="M:Nancy.Security.CsrfTokenExtensions.CreateHmac(Nancy.Security.CsrfToken,Nancy.Cryptography.IHmacProvider)">
            <summary>
            Calculates and sets the Hmac property on a given token
            </summary>
            <param name="token">Token</param>
            <param name="hmacProvider">Hmac provider to use</param>
            <returns>Hmac bytes</returns>
        </member>
        <member name="M:Nancy.Security.CsrfTokenExtensions.CreateRandomBytes(Nancy.Security.CsrfToken)">
            <summary>
            Creates random bytes for the csrf token
            </summary>
            <returns>Random byte array</returns>
        </member>
        <member name="T:Nancy.Security.CsrfTokenValidationResult">
            <summary>
            Result of Csrf Token validation
            </summary>
        </member>
        <member name="F:Nancy.Security.CsrfTokenValidationResult.Ok">
            <summary>
            Validated ok
            </summary>
        </member>
        <member name="F:Nancy.Security.CsrfTokenValidationResult.TokenTamperedWith">
            <summary>
            One or both of the tokens appears to have been tampered with
            </summary>
        </member>
        <member name="F:Nancy.Security.CsrfTokenValidationResult.TokenMissing">
            <summary>
            One or both of the tokens are missing
            </summary>
        </member>
        <member name="F:Nancy.Security.CsrfTokenValidationResult.TokenMismatch">
            <summary>
            Tokens to not match
            </summary>
        </member>
        <member name="F:Nancy.Security.CsrfTokenValidationResult.TokenExpired">
            <summary>
            Token is valid, but has expired
            </summary>
        </member>
        <member name="T:Nancy.Security.CsrfValidationException">
            <summary>
            Contains the exception information about a CSRF token validation.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="P:Nancy.Security.CsrfValidationException.Result">
            <summary>
            Gets the result for the CSRF token validation.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:Nancy.Security.CsrfValidationException.#ctor(Nancy.Security.CsrfTokenValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Security.CsrfValidationException"/> class, with
            the provided <paramref name="result"/>.
            </summary>
            <param name="result">The CSRF token validation result.</param>
        </member>
        <member name="T:Nancy.Security.DefaultCsrfTokenValidator">
            <summary>
            The default implementation of the <see cref="T:Nancy.Security.ICsrfTokenValidator"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.Security.DefaultCsrfTokenValidator.#ctor(Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Security.DefaultCsrfTokenValidator"/> class,
            using the provided <paramref name="cryptoConfig"/>.
            </summary>
            <param name="cryptoConfig">The <see cref="T:Nancy.Cryptography.CryptographyConfiguration"/> that should be used.</param>
        </member>
        <member name="M:Nancy.Security.DefaultCsrfTokenValidator.Validate(Nancy.Security.CsrfToken,Nancy.Security.CsrfToken,System.Nullable{System.TimeSpan})">
            <summary>
            Validates a pair of tokens
            </summary>
            <param name="tokenOne">First token (usually from either a form post or querystring)</param>
            <param name="tokenTwo">Second token (usually from a cookie)</param>
            <param name="validityPeriod">Optional period that the tokens are valid for</param>
            <returns>Token validation result</returns>
        </member>
        <member name="M:Nancy.Security.DefaultCsrfTokenValidator.CookieTokenStillValid(Nancy.Security.CsrfToken)">
            <summary>
            Validates that a cookie token is still valid with the current configuration / keys
            </summary>
            <param name="cookieToken">Token to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="T:Nancy.Security.ICsrfTokenValidator">
            <summary>
            Validates Csrf tokens
            </summary>
        </member>
        <member name="M:Nancy.Security.ICsrfTokenValidator.Validate(Nancy.Security.CsrfToken,Nancy.Security.CsrfToken,System.Nullable{System.TimeSpan})">
            <summary>
            Validates a pair of tokens
            </summary>
            <param name="tokenOne">First token (usually from either a form post or querystring)</param>
            <param name="tokenTwo">Second token (usually from a cookie)</param>
            <param name="validityPeriod">Optional period that the tokens are valid for</param>
            <returns>Token validation result</returns>
        </member>
        <member name="M:Nancy.Security.ICsrfTokenValidator.CookieTokenStillValid(Nancy.Security.CsrfToken)">
            <summary>
            Validates that a cookie token is still valid with the current configuration / keys
            </summary>
            <param name="cookieToken">Token to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="T:Nancy.Security.ModuleSecurity">
            <summary>
            Some simple helpers give some nice authentication syntax in the modules.
            </summary>
        </member>
        <member name="M:Nancy.Security.ModuleSecurity.RequiresAuthentication(Nancy.INancyModule)">
            <summary>
            This module requires authentication
            </summary>
            <param name="module">Module to enable</param>
        </member>
        <member name="M:Nancy.Security.ModuleSecurity.RequiresClaims(Nancy.INancyModule,System.Predicate{System.Security.Claims.Claim}[])">
            <summary>
            This module requires authentication and certain claims to be present.
            </summary>
            <param name="module">Module to enable</param>
            <param name="requiredClaims">Claim(s) required</param>
        </member>
        <member name="M:Nancy.Security.ModuleSecurity.RequiresAnyClaim(Nancy.INancyModule,System.Predicate{System.Security.Claims.Claim}[])">
            <summary>
            This module requires authentication and any one of certain claims to be present.
            </summary>
            <param name="module">Module to enable</param>
            <param name="requiredClaims">Claim(s) required</param>
        </member>
        <member name="M:Nancy.Security.ModuleSecurity.RequiresHttps(Nancy.INancyModule)">
            <summary>
            This module requires https.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> that requires HTTPS.</param>
        </member>
        <member name="M:Nancy.Security.ModuleSecurity.RequiresHttps(Nancy.INancyModule,System.Boolean)">
            <summary>
            This module requires https.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> that requires HTTPS.</param>
            <param name="redirect"><see langword="true"/> if the user should be redirected to HTTPS (no port number) if the incoming request was made using HTTP, otherwise <see langword="false"/> if <see cref="F:Nancy.HttpStatusCode.Forbidden"/> should be returned.</param>
        </member>
        <member name="M:Nancy.Security.ModuleSecurity.RequiresHttps(Nancy.INancyModule,System.Boolean,System.Int32)">
            <summary>
            This module requires https.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> that requires HTTPS.</param>
            <param name="redirect"><see langword="true"/> if the user should be redirected to HTTPS if the incoming request was made using HTTP, otherwise <see langword="false"/> if <see cref="F:Nancy.HttpStatusCode.Forbidden"/> should be returned.</param>
            <param name="httpsPort">The HTTPS port number to use</param>
        </member>
        <member name="T:Nancy.Security.SecurityHooks">
            <summary>
            Hooks to be used in a request pipeline.
            </summary>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.RequiresAuthentication">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure that
            the request was made by an authenticated user.
            </summary>
            <returns>Hook that returns an Unauthorized response if not authenticated in,
            null otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.RequiresClaims(System.Predicate{System.Security.Claims.Claim}[])">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure
            that the request was made by an authenticated user having the required claims.
            </summary>
            <param name="claims">Claims the authenticated user needs to have</param>
            <returns>Hook that returns an Unauthorized response if the user is not
            authenticated or does not have the required claims, null otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.RequiresAnyClaim(System.Predicate{System.Security.Claims.Claim}[])">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure
            that the request was made by an authenticated user having at least one of
            the required claims.
            </summary>
            <param name="claims">Claims the authenticated user needs to have at least one of</param>
            <returns>Hook that returns an Unauthorized response if the user is not
            authenticated or does not have at least one of the required claims, null
            otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.RequiresValidatedClaims(System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Boolean})">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure
            that the request was made by an authenticated user whose claims satisfy the
            supplied validation function.
            </summary>
            <param name="isValid">Validation function to be called with the authenticated
            users claims</param>
            <returns>Hook that returns an Unauthorized response if the user is not
            authenticated or does not pass the supplied validation function, null
            otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.UnauthorizedIfNot(System.Func{Nancy.NancyContext,System.Boolean})">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure that
            the request satisfies a specific test.
            </summary>
            <param name="test">Test that must return true for the request to continue</param>
            <returns>Hook that returns an Unauthorized response if the test fails, null otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.ForbiddenIfNot(System.Func{Nancy.NancyContext,System.Boolean})">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure that
            the request satisfies a specific test.
            </summary>
            <param name="test">Test that must return true for the request to continue</param>
            <returns>Hook that returns an Forbidden response if the test fails, null otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.HttpStatusCodeIfNot(Nancy.HttpStatusCode,System.Func{Nancy.NancyContext,System.Boolean})">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure that
            the request satisfies a specific test.
            </summary>
            <param name="statusCode">HttpStatusCode to use for the response</param>
            <param name="test">Test that must return true for the request to continue</param>
            <returns>Hook that returns a response with a specific HttpStatusCode if the test fails, null otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.RequiresHttps(System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure that
            the resource is served over HTTPS
            </summary>
            <param name="redirect"><see langword="true"/> if the user should be redirected to HTTPS (no port number) if the incoming request was made using HTTP, otherwise <see langword="false"/> if <see cref="F:Nancy.HttpStatusCode.Forbidden"/> should be returned.</param>
            <param name="httpsPort">The HTTPS port number to use</param>
            <returns>Hook that returns a <see cref="T:Nancy.Responses.RedirectResponse"/> with the Url scheme set to HTTPS,
            or a <see cref="T:Nancy.Response"/> with a <see cref="F:Nancy.HttpStatusCode.Forbidden"/> status code if <c>redirect</c> is false or the method is not GET,
            null otherwise</returns>
        </member>
        <member name="T:Nancy.Security.SSLProxy">
            <summary>
            Allows a BeforeRequest hook to change Url to HTTPS if X-Forwarded-Proto header present
            </summary>
        </member>
        <member name="M:Nancy.Security.SSLProxy.RewriteSchemeUsingForwardedHeaders(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Checks for Forwarded or X-Forwarded-Proto header and if so makes current url scheme https
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.Session.CookieBasedSessions">
            <summary>
            Cookie based session storage
            </summary>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessions.CookieName">
            <summary>
            Gets the cookie name that the session is stored in
            </summary>
            <value>Cookie name</value>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.#ctor(Nancy.Cryptography.IEncryptionProvider,Nancy.Cryptography.IHmacProvider,Nancy.IObjectSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Session.CookieBasedSessions"/> class.
            </summary>
            <param name="encryptionProvider">The encryption provider.</param>
            <param name="hmacProvider">The hmac provider</param>
            <param name="objectSerializer">Session object serializer to use</param>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.#ctor(Nancy.Session.CookieBasedSessionsConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Session.CookieBasedSessions"/> class.
            </summary>
            <param name="configuration">Cookie based sessions configuration.</param>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.Enable(Nancy.Bootstrapper.IPipelines,Nancy.Session.CookieBasedSessionsConfiguration)">
            <summary>
            Initialise and add cookie based session hooks to the application pipeline
            </summary>
            <param name="pipelines">Application pipelines</param>
            <param name="configuration">Cookie based sessions configuration.</param>
            <returns>Formatter selector for choosing a non-default serializer</returns>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.Enable(Nancy.Bootstrapper.IPipelines,Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Initialise and add cookie based session hooks to the application pipeline
            </summary>
            <param name="pipelines">Application pipelines</param>
            <param name="cryptographyConfiguration">Cryptography configuration</param>
            <returns>Formatter selector for choosing a non-default serializer</returns>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.Enable(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Initialise and add cookie based session hooks to the application pipeline with the default encryption provider.
            </summary>
            <param name="pipelines">Application pipelines</param>
            <returns>Formatter selector for choosing a non-default serializer</returns>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.WithSerializer(Nancy.IObjectSerializer)">
            <summary>
            Using the specified serializer
            </summary>
            <param name="newSerializer">Formatter to use</param>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.Save(Nancy.Session.ISession,Nancy.Response)">
            <summary>
            Save the session into the response
            </summary>
            <param name="session">Session to save</param>
            <param name="response">Response to save into</param>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.Load(Nancy.Request)">
            <summary>
            Loads the session from the request
            </summary>
            <param name="request">Request to load from</param>
            <returns>ISession containing the load session values</returns>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.SaveSession(Nancy.NancyContext,Nancy.Session.CookieBasedSessions)">
            <summary>
            Saves the request session into the response
            </summary>
            <param name="context">Nancy context</param>
            <param name="sessionStore">Session store</param>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.LoadSession(Nancy.NancyContext,Nancy.Session.CookieBasedSessions)">
            <summary>
            Loads the request session
            </summary>
            <param name="context">Nancy context</param>
            <param name="sessionStore">Session store</param>
            <returns>Always returns null</returns>
        </member>
        <member name="T:Nancy.Session.CookieBasedSessionsConfiguration">
            <summary>
            Configuration options for cookie based sessions
            </summary>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessionsConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Session.CookieBasedSessionsConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessionsConfiguration.#ctor(Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Session.CookieBasedSessionsConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessionsConfiguration.CryptographyConfiguration">
            <summary>
            Gets or sets the cryptography configuration
            </summary>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessionsConfiguration.Serializer">
            <summary>
            Formatter for de/serializing the session objects
            </summary>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessionsConfiguration.CookieName">
            <summary>
            Cookie name for storing session information
            </summary>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessionsConfiguration.Domain">
            <summary>
            Gets or sets the domain of the session cookie
            </summary>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessionsConfiguration.Path">
            <summary>
            Gets or sets the path of the session cookie
            </summary>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessionsConfiguration.IsValid">
            <summary>
            Gets a value indicating whether the configuration is valid or not.
            </summary>
        </member>
        <member name="T:Nancy.Session.ISession">
            <summary>
            Defines the interface for a session
            </summary>
        </member>
        <member name="P:Nancy.Session.ISession.Count">
            <summary>
            The number of session values
            </summary>
            <returns>The count of sessions</returns>
        </member>
        <member name="M:Nancy.Session.ISession.DeleteAll">
            <summary>
            Deletes the session and all associated information
            </summary>
        </member>
        <member name="M:Nancy.Session.ISession.Delete(System.String)">
            <summary>
            Deletes the specific key from the session
            </summary>
        </member>
        <member name="P:Nancy.Session.ISession.Item(System.String)">
            <summary>
            Retrieves the value from the session
            </summary>
        </member>
        <member name="P:Nancy.Session.ISession.HasChanged">
            <summary>
            Gets a value indicating whether this instance has changed.
            </summary>
            <value>
            <see langword="true"/> if this instance has changed; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Nancy.Session.NullSessionProvider">
            <summary>
            Provides a dummy session instance with no functionality.
            </summary>
            <seealso cref="T:Nancy.Session.ISession" />
        </member>
        <member name="M:Nancy.Session.NullSessionProvider.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.Session.NullSessionProvider.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Nancy.Session.NullSessionProvider.Count">
            <summary>
            The number of session values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nancy.Session.NullSessionProvider.DeleteAll">
            <summary>
            Deletes the session and all associated information
            </summary>
        </member>
        <member name="M:Nancy.Session.NullSessionProvider.Delete(System.String)">
            <summary>
            Deletes the specific key from the session
            </summary>
        </member>
        <member name="P:Nancy.Session.NullSessionProvider.Item(System.String)">
            <summary>
            Retrieves the value from the session
            </summary>
        </member>
        <member name="P:Nancy.Session.NullSessionProvider.HasChanged">
            <summary>
            Gets a value indicating whether this instance has changed.
            </summary>
            <value>
            <see langword="true"/> if this instance has changed; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Nancy.Session.Session">
            <summary>
            Session implementation
            </summary>
        </member>
        <member name="M:Nancy.Session.Session.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Session.Session"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Session.Session.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Session.Session"/> class, with
            the provided <paramref name="dictionary"/>.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="P:Nancy.Session.Session.Count">
            <summary>
            Gets the number of items stored
            </summary>
        </member>
        <member name="M:Nancy.Session.Session.DeleteAll">
            <summary>
            Deletes all items
            </summary>
        </member>
        <member name="M:Nancy.Session.Session.Delete(System.String)">
            <summary>
            Delete an item with the given key
            </summary>
            <param name="key">Key to delete</param>
        </member>
        <member name="P:Nancy.Session.Session.Item(System.String)">
            <summary>
            Gets or sets values
            </summary>
            <param name="key">The key whos value to get or set</param>
            <returns>The value, or null or the key didn't exist</returns>
        </member>
        <member name="P:Nancy.Session.Session.HasChanged">
            <summary>
            Gets whether the session has changed
            </summary>
        </member>
        <member name="M:Nancy.Session.Session.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.Session.Session.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Nancy.StaticConfiguration">
            <summary>
            Static configurations.
            </summary>
        </member>
        <member name="P:Nancy.StaticConfiguration.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether or not to enable case sensitivity in query, parameters (DynamicDictionary) and model binding. Enable this to conform with RFC3986.
            </summary>
        </member>
        <member name="P:Nancy.StaticConfiguration.RequestQueryFormMultipartLimit">
            <summary>
            Gets or sets the limit on the number of query string variables, form fields,
            or multipart sections in a request.
            </summary>
        </member>
        <member name="P:Nancy.StaticConfiguration.DisableRequestStreamSwitching">
            <summary>
            Gets or sets a value indicating whether or not to disable request stream switching
            </summary>
        </member>
        <member name="P:Nancy.StaticConfiguration.AllowFileStreamUploadAsync">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Nancy.StaticConfiguration"/> allow file stream
            upload async due to mono issues before v4.  Uploads of over 80mb would result in extra padded chars to the filestream corrupting the file.
            </summary>
            <value><c>true</c> if allow file stream upload async; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Nancy.StaticContent">
            <summary>
            Registers the static contents hook in the application pipeline at startup.
            </summary>
        </member>
        <member name="M:Nancy.StaticContent.#ctor(Nancy.IRootPathProvider,Nancy.Conventions.StaticContentsConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.StaticContent"/> class, using the
            provided <paramref name="rootPathProvider"/> and <paramref name="conventions"/>.
            </summary>
            <param name="rootPathProvider">The current root path provider.</param>
            <param name="conventions">The static content conventions.</param>
        </member>
        <member name="M:Nancy.StaticContent.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Perform any initialisation tasks
            </summary>
        </member>
        <member name="M:Nancy.StaticContent.Enable(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Enable "manual" static content.
            Only use this if you want to manually configure a pipeline hook to have static
            content server, for example, after authentication.
            </summary>
            <param name="pipelines">The pipelines to hook into</param>
        </member>
        <member name="T:Nancy.StaticContentConfiguration">
            <summary>
            Static content configuration.
            </summary>
        </member>
        <member name="M:Nancy.StaticContentConfiguration.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.StaticContentConfiguration"/> class.
            </summary>
            <param name="safePaths">A set of safe paths to retrieve static content from</param>
        </member>
        <member name="P:Nancy.StaticContentConfiguration.SafePaths">
            <summary>
            Gets the safe paths to retrieve static content from.
            </summary>
            <value>Safe paths to retrieve static content from</value>
        </member>
        <member name="T:Nancy.StaticContentConfigurationExtensions">
            <summary>
            Contains <see cref="T:Nancy.StaticContentConfiguration"/> configuration extensions for <see cref="T:Nancy.Configuration.INancyEnvironment"/>.  
            </summary>
        </member>
        <member name="M:Nancy.StaticContentConfigurationExtensions.StaticContent(Nancy.Configuration.INancyEnvironment,System.String[])">
            <summary>
            Configures <see cref="T:Nancy.StaticContentConfiguration"/> 
            </summary>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> that should be configured.</param>
            <param name="safepaths">Paths that the application consider safe to return static content from</param>
        </member>
        <member name="M:Nancy.TinyIoc.TypeExtensions.GetGenericMethod(System.Type,System.Reflection.BindingFlags,System.String,System.Type[],System.Type[])">
            <summary>
            Gets a generic method from a type given the method name, binding flags, generic types and parameter types
            </summary>
            <param name="sourceType">Source type</param>
            <param name="bindingFlags">Binding flags</param>
            <param name="methodName">Name of the method</param>
            <param name="genericTypes">Generic types to use to make the method generic</param>
            <param name="parameterTypes">Method parameters</param>
            <returns>MethodInfo or null if no matches found</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:Nancy.TinyIoc.NamedParameterOverloads">
            <summary>
            Name/Value pairs for specifying "user" parameters when resolving
            </summary>
        </member>
        <member name="F:Nancy.TinyIoc.UnregisteredResolutionActions.AttemptResolve">
            <summary>
            Attempt to resolve type, even if the type isn't registered.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="F:Nancy.TinyIoc.UnregisteredResolutionActions.Fail">
            <summary>
            Fail resolution if type not explicitly registered
            </summary>
        </member>
        <member name="F:Nancy.TinyIoc.UnregisteredResolutionActions.GenericsOnly">
            <summary>
            Attempt to resolve unregistered type if requested type is generic
            and no registration exists for the specific generic parameters used.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.ResolveOptions">
            <summary>
            Resolution settings
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.ResolveOptions.Default">
            <summary>
            Gets the default options (attempt resolution of unregistered types, fail on named resolution if name not found)
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.ResolveOptions.FailNameNotFoundOnly">
            <summary>
            Preconfigured option for attempting resolution of unregistered types and failing on named resolution if name not found
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.ResolveOptions.FailUnregisteredAndNameNotFound">
            <summary>
            Preconfigured option for failing on resolving unregistered types and on named resolution if name not found
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.ResolveOptions.FailUnregisteredOnly">
            <summary>
            Preconfigured option for failing on resolving unregistered types, but attempting unnamed resolution if name not found
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.RegisterOptions">
            <summary>
            Registration options for "fluent" API
            </summary>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:TinyIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:TinyIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterOptions.WithWeakReference">
            <summary>
            Make registration hold a weak reference if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:TinyIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterOptions.WithStrongReference">
            <summary>
            Make registration hold a strong reference if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:TinyIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterOptions.ToCustomLifetimeManager(Nancy.TinyIoc.TinyIoCContainer.RegisterOptions,Nancy.TinyIoc.TinyIoCContainer.ITinyIoCObjectLifetimeProvider,System.String)">
            <summary>
            Switches to a custom lifetime manager factory if possible.
            
            Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
            </summary>
            <param name="instance">RegisterOptions instance</param>
            <param name="lifetimeProvider">Custom lifetime manager</param>
            <param name="errorString">Error string to display if switch fails</param>
            <returns>RegisterOptions</returns>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.MultiRegisterOptions">
            <summary>
            Registration options for "fluent" API when registering multiple implementations
            </summary>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.MultiRegisterOptions.#ctor(System.Collections.Generic.IEnumerable{Nancy.TinyIoc.TinyIoCContainer.RegisterOptions})">
            <summary>
            Initializes a new instance of the MultiRegisterOptions class.
            </summary>
            <param name="registerOptions">Registration options</param>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.MultiRegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:TinyIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.MultiRegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>MultiRegisterOptions</returns>
            <exception cref="!:TinyIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.MultiRegisterOptions.ToCustomLifetimeManager(Nancy.TinyIoc.TinyIoCContainer.MultiRegisterOptions,Nancy.TinyIoc.TinyIoCContainer.ITinyIoCObjectLifetimeProvider,System.String)">
            <summary>
            Switches to a custom lifetime manager factory if possible.
            
            Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
            </summary>
            <param name="instance">MultiRegisterOptions instance</param>
            <param name="lifetimeProvider">Custom lifetime manager</param>
            <param name="errorString">Error string to display if switch fails</param>
            <returns>MultiRegisterOptions</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            Types will only be registered if they pass the supplied registration predicate.
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(Nancy.TinyIoc.DuplicateImplementationActions)">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            </summary>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <exception cref="T:Nancy.TinyIoc.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(Nancy.TinyIoc.DuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            Types will only be registered if they pass the supplied registration predicate.
            </summary>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
            <exception cref="T:Nancy.TinyIoc.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="assemblies">Assemblies to process</param>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            Types will only be registered if they pass the supplied registration predicate.
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Nancy.TinyIoc.DuplicateImplementationActions)">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <exception cref="T:Nancy.TinyIoc.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Nancy.TinyIoc.DuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            Types will only be registered if they pass the supplied registration predicate.
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
            <exception cref="T:Nancy.TinyIoc.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type)">
            <summary>
            Creates/replaces a container class registration with default options.
            </summary>
            <param name="registerType">Type to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Type)">
            <summary>
            Creates/replaces a container class registration with a given implementation and default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Object)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="instance">Instance of RegisterType to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Type,System.Object)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Func{Nancy.TinyIoc.TinyIoCContainer,Nancy.TinyIoc.NamedParameterOverloads,System.Object})">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <param name="registerType">Type to register</param>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Func{Nancy.TinyIoc.TinyIoCContainer,Nancy.TinyIoc.NamedParameterOverloads,System.Object},System.String)">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <param name="registerType">Type to register</param>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <param name="name">Name of registation</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``1">
            <summary>
            Creates/replaces a container class registration with default options.
            </summary>
            <typeparam name="RegisterImplementation">Type to register</typeparam>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``1(System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <typeparam name="RegisterImplementation">Type to register</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``2">
            <summary>
            Creates/replaces a container class registration with a given implementation and default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``2(System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``1(``0)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="instance">Instance of RegisterType to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``1(``0,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``2(``1)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``2(``1,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``1(System.Func{Nancy.TinyIoc.TinyIoCContainer,Nancy.TinyIoc.NamedParameterOverloads,``0})">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``1(System.Func{Nancy.TinyIoc.TinyIoCContainer,Nancy.TinyIoc.NamedParameterOverloads,``0},System.String)">
            <summary>
            Creates/replaces a named container class registration with a user specified factory
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <param name="name">Name of registation</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterMultiple``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <typeparam name="RegisterType">Type that each implementation implements</typeparam>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterMultiple(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <param name="registrationType">Type that each implementation implements</param>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Unregister``1">
            <summary>
            Remove a container class registration.
            </summary>
            <typeparam name="RegisterType">Type to unregister</typeparam>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Unregister``1(System.String)">
            <summary>
            Remove a named container class registration.
            </summary>
            <typeparam name="RegisterType">Type to unregister</typeparam>
            <param name="name">Name of registration</param>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Unregister(System.Type)">
            <summary>
            Remove a container class registration.
            </summary>
            <param name="registerType">Type to unregister</param>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Unregister(System.Type,System.String)">
            <summary>
            Remove a named container class registration.
            </summary>
            <param name="registerType">Type to unregister</param>
            <param name="name">Name of registration</param>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type)">
            <summary>
            Attempts to resolve a type using default options.
            </summary>
            <param name="resolveType">Type to resolve</param>
            <returns>Instance of type</returns>
            <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,Nancy.TinyIoc.ResolveOptions)">
            <summary>
            Attempts to resolve a type using specified options.
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="options">Resolution options</param>
            <returns>Instance of type</returns>
            <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,System.String)">
             <summary>
             Attempts to resolve a type using default options and the supplied name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,System.String,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,System.String,Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters and name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,System.String,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1">
            <summary>
            Attempts to resolve a type using default options.
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <returns>Instance of type</returns>
            <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(Nancy.TinyIoc.ResolveOptions)">
            <summary>
            Attempts to resolve a type using specified options.
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <returns>Instance of type</returns>
            <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(System.String)">
             <summary>
             Attempts to resolve a type using default options and the supplied name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(System.String,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(System.String,Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters and name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(System.String,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type)">
             <summary>
             Attempts to predict whether a given type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,System.String)">
             <summary>
             Attempts to predict whether a given named type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,System.String,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,System.String,Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,System.String,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1">
             <summary>
             Attempts to predict whether a given type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(System.String)">
             <summary>
             Attempts to predict whether a given named type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(System.String,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(System.String,Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(System.String,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,System.Object@)">
            <summary>
            Attemps to resolve a type using the default options
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,Nancy.TinyIoc.ResolveOptions,System.Object@)">
            <summary>
            Attemps to resolve a type using the given options
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,System.String,System.Object@)">
            <summary>
            Attemps to resolve a type using the default options and given name
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,System.String,Nancy.TinyIoc.ResolveOptions,System.Object@)">
            <summary>
            Attemps to resolve a type using the given options and name
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,Nancy.TinyIoc.NamedParameterOverloads,System.Object@)">
            <summary>
            Attemps to resolve a type using the default options and supplied constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,System.String,Nancy.TinyIoc.NamedParameterOverloads,System.Object@)">
            <summary>
            Attemps to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions,System.Object@)">
            <summary>
            Attemps to resolve a type using the supplied options and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,System.String,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions,System.Object@)">
            <summary>
            Attemps to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(``0@)">
            <summary>
            Attemps to resolve a type using the default options
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(Nancy.TinyIoc.ResolveOptions,``0@)">
            <summary>
            Attemps to resolve a type using the given options
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(System.String,``0@)">
            <summary>
            Attemps to resolve a type using the default options and given name
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(System.String,Nancy.TinyIoc.ResolveOptions,``0@)">
            <summary>
            Attemps to resolve a type using the given options and name
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(Nancy.TinyIoc.NamedParameterOverloads,``0@)">
            <summary>
            Attemps to resolve a type using the default options and supplied constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(System.String,Nancy.TinyIoc.NamedParameterOverloads,``0@)">
            <summary>
            Attemps to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions,``0@)">
            <summary>
            Attemps to resolve a type using the supplied options and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(System.String,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions,``0@)">
            <summary>
            Attemps to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ResolveAll(System.Type,System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <param name="resolveType">Type to resolveAll</param>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ResolveAll(System.Type)">
            <summary>
            Returns all registrations of a type, both named and unnamed
            </summary>
            <param name="resolveType">Type to resolveAll</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ResolveAll``1(System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <typeparam name="ResolveType">Type to resolveAll</typeparam>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ResolveAll``1">
            <summary>
            Returns all registrations of a type, both named and unnamed
            </summary>
            <typeparam name="ResolveType">Type to resolveAll</typeparam>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.BuildUp(System.Object)">
            <summary>
            Attempts to resolve all public property dependencies on the given object.
            </summary>
            <param name="input">Object to "build up"</param>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.BuildUp(System.Object,Nancy.TinyIoc.ResolveOptions)">
            <summary>
            Attempts to resolve all public property dependencies on the given object using the given resolve options.
            </summary>
            <param name="input">Object to "build up"</param>
            <param name="resolveOptions">Resolve options to use</param>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.ITinyIoCObjectLifetimeProvider">
            <summary>
            Provides custom lifetime management for ASP.Net per-request lifetimes etc.
            </summary>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.GetObject">
            <summary>
            Gets the stored object if it exists, or null if not
            </summary>
            <returns>Object instance or null</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.SetObject(System.Object)">
            <summary>
            Store the object
            </summary>
            <param name="value">Object to store</param>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.ReleaseObject">
            <summary>
            Release the object
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.TinyIoCContainer.ObjectFactoryBase.AssumeConstruction">
            <summary>
            Whether to assume this factory sucessfully constructs its objects
            
            Generally set to true for delegate style factories as CanResolve cannot delve
            into the delegates they contain.
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.TinyIoCContainer.ObjectFactoryBase.CreatesType">
            <summary>
            The type the factory instantiates
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.TinyIoCContainer.ObjectFactoryBase.Constructor">
            <summary>
            Constructor to use, if specified
            </summary>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ObjectFactoryBase.GetObject(System.Type,Nancy.TinyIoc.TinyIoCContainer,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
            <summary>
            Create the type
            </summary>
            <param name="requestedType">Type user requested to be resolved</param>
            <param name="container">Container that requested the creation</param>
            <param name="parameters">Any user parameters passed</param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.MultiInstanceFactory">
            <summary>
            IObjectFactory that creates new instances of types for each resolution
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.DelegateFactory">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.WeakDelegateFactory">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            Holds the delegate using a weak reference
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.InstanceFactory">
            <summary>
            Stores an particular instance to return for a type
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.WeakInstanceFactory">
            <summary>
            Stores an particular instance to return for a type
            
            Stores the instance with a weak reference
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.SingletonFactory">
            <summary>
            A factory that lazy instantiates a type and always returns the same instance
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.CustomObjectLifetimeFactory">
            <summary>
            A factory that offloads lifetime to an external lifetime provider
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.TinyIoCContainer.Current">
            <summary>
            Lazy created Singleton instance of the container for simple scenarios
            </summary>
        </member>
        <member name="T:Nancy.TraceConfiguration">
            <summary>
            Configuration for tracing.
            </summary>
        </member>
        <member name="M:Nancy.TraceConfiguration.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.TraceConfiguration"/> class.
            </summary>
            <param name="enabled">Determines if tracing should be enabled.</param>
            <param name="displayErrorTraces">Determines if traces should be displayed in error messages.</param>
        </member>
        <member name="P:Nancy.TraceConfiguration.Enabled">
            <summary>
            Gets a value indicating whether or not to enable request tracing.
            </summary>
            <value><see langword="true"/> if tracing should be enabled, otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:Nancy.TraceConfiguration.DisplayErrorTraces">
            <summary>
            Gets a value indicating whether or not to display traces in error messages.
            </summary>
            <value><see langword="true"/> traces should be displayed in error messages, otherwise <see langword="false"/>.</value>
        </member>
        <member name="T:Nancy.TraceConfigurationExtensions">
            <summary>
            Contains <see cref="T:Nancy.TraceConfiguration"/> configuration extensions for <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
        </member>
        <member name="M:Nancy.TraceConfigurationExtensions.Tracing(Nancy.Configuration.INancyEnvironment,System.Boolean,System.Boolean)">
            <summary>
            Configures <see cref="T:Nancy.TraceConfiguration"/>.
            </summary>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> that should be configured.</param>
            <param name="enabled"><see langword="true"/> if tracing should be enabled, otherwise <see langword="false"/>.</param>
            <param name="displayErrorTraces"><see langword="true"/> traces should be displayed in error messages, otherwise <see langword="false"/>.</param>
        </member>
        <member name="T:Nancy.TypeCatalogExtensions">
            <summary>
            Contains extension methods for <see cref="T:Nancy.ITypeCatalog"/> implementations.
            </summary>
        </member>
        <member name="M:Nancy.TypeCatalogExtensions.GetTypesAssignableTo(Nancy.ITypeCatalog,System.Type)">
            <summary>
            Gets all <see cref="T:System.Type"/> instances that are assignable to <paramref name="type"/>, using <see cref="F:Nancy.TypeResolveStrategies.All"/>.
            </summary>
            <param name="typeCatalog">The <see cref="T:Nancy.ITypeCatalog"/> instance where the types should be retrieved from.</param>
            <param name="type">The <see cref="T:System.Type"/> that all returned types should be assingable to.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:System.Type"/> instances.</returns>
        </member>
        <member name="M:Nancy.TypeCatalogExtensions.GetTypesAssignableTo``1(Nancy.ITypeCatalog)">
            <summary>
            Gets all <see cref="T:System.Type"/> instances that are assignable to <typeparamref name="TType"/>, using <see cref="F:Nancy.TypeResolveStrategies.All"/>.
            </summary>
            <param name="typeCatalog">The <see cref="T:Nancy.ITypeCatalog"/> instance where the types should be retrieved from.</param>
            <typeparam name="TType">The <see cref="T:System.Type"/> that all returned types should be assingable to.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:System.Type"/> instances.</returns>
        </member>
        <member name="M:Nancy.TypeCatalogExtensions.GetTypesAssignableTo``1(Nancy.ITypeCatalog,Nancy.TypeResolveStrategy)">
            <summary>
            Gets all types that are assignable to the provided <typeparamref name="TType"/>.
            </summary>
            <param name="typeCatalog">The <see cref="T:Nancy.ITypeCatalog"/> instance where the types should be retrieved from.</param>
            <param name="strategy">A <see cref="T:Nancy.TypeResolveStrategy"/> that should be used then retrieving types.</param>
            <typeparam name="TType">The <see cref="T:System.Type"/> that returned types should be assignable to.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:System.Type"/> instances.</returns>
        </member>
        <member name="T:Nancy.TypeResolveStrategies">
            <summary>
            Default <see cref="T:Nancy.TypeResolveStrategy"/> implementations.
            </summary>
        </member>
        <member name="F:Nancy.TypeResolveStrategies.All">
            <summary>
            Resolve types from all available locations.
            </summary>
        </member>
        <member name="F:Nancy.TypeResolveStrategies.ExcludeNancy">
            <summary>
            Resolve types that are not located in the Nancy assembly.
            </summary>
        </member>
        <member name="F:Nancy.TypeResolveStrategies.ExcludeNancyNamespace">
            <summary>
            Resolve types that are not located in the Nancy namespace.
            </summary>
        </member>
        <member name="F:Nancy.TypeResolveStrategies.OnlyNancy">
            <summary>
            Resolve types that are located in the Nancy assembly.
            </summary>
        </member>
        <member name="F:Nancy.TypeResolveStrategies.OnlyNancyNamespace">
            <summary>
            Resolve types that are located in the Nancy namespace.
            </summary>
        </member>
        <member name="T:Nancy.TypeResolveStrategy">
            <summary>
            Predicate used to decide if a <see cref="T:System.Type"/> should be included when resolving types.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that is being inspected.</param>
            <value><see langword="true"/> if the type should be included in the result, otherwise <see langword="false"/>.</value>
        </member>
        <member name="T:Nancy.Url">
            <summary>
            Represents a full Url of the form scheme://hostname:port/basepath/path?query
            </summary>
            <remarks>Since this is for  internal use, and fragments are not passed to the server, fragments are not supported.</remarks>
        </member>
        <member name="M:Nancy.Url.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Url"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Url.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Url" /> class, with
            the provided <paramref name="url"/>.
            </summary>
            <param name="url">A <see cref="T:System.String" /> containing a URL.</param>
        </member>
        <member name="P:Nancy.Url.Scheme">
            <summary>
            Gets or sets the HTTP protocol used by the client.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="P:Nancy.Url.HostName">
            <summary>
            Gets the hostname of the request
            </summary>
        </member>
        <member name="P:Nancy.Url.Port">
            <summary>
            Gets the port name of the request
            </summary>
        </member>
        <member name="P:Nancy.Url.BasePath">
            <summary>
            Gets the base path of the request i.e. the "Nancy root"
            </summary>
        </member>
        <member name="P:Nancy.Url.Path">
            <summary>
            Gets the path of the request, relative to the base path
            This property drives the route matching
            </summary>
        </member>
        <member name="P:Nancy.Url.Query">
            <summary>
            Gets the querystring data of the requested resource.
            </summary>
        </member>
        <member name="P:Nancy.Url.SiteBase">
            <summary>
            Gets the domain part of the request
            </summary>
        </member>
        <member name="P:Nancy.Url.IsSecure">
            <summary>
            Gets whether the url is secure or not.
            </summary>
        </member>
        <member name="M:Nancy.Url.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Nancy.Url.Clone">
            <summary>
            Clones the url.
            </summary>
            <returns>Returns a new cloned instance of the url.</returns>
        </member>
        <member name="M:Nancy.Url.op_Implicit(Nancy.Url)~System.String">
            <summary>
            Casts the current <see cref="T:Nancy.Url"/> instance to a <see cref="T:System.String"/> instance.
            </summary>
            <param name="url">The instance that should be cast.</param>
            <returns>A <see cref="T:System.String"/> representation of the <paramref name="url"/>.</returns>
        </member>
        <member name="M:Nancy.Url.op_Implicit(System.String)~Nancy.Url">
            <summary>
            Casts the current <see cref="T:System.String"/> instance to a <see cref="T:Nancy.Url"/> instance.
            </summary>
            <param name="url">The instance that should be cast.</param>
            <returns>An <see cref="T:Nancy.Url"/> representation of the <paramref name="url"/>.</returns>
        </member>
        <member name="M:Nancy.Url.op_Implicit(Nancy.Url)~System.Uri">
            <summary>
            Casts the current <see cref="T:Nancy.Url"/> instance to a <see cref="T:System.Uri"/> instance.
            </summary>
            <param name="url">The instance that should be cast.</param>
            <returns>An <see cref="T:System.Uri"/> representation of the <paramref name="url"/>.</returns>
        </member>
        <member name="M:Nancy.Url.op_Implicit(System.Uri)~Nancy.Url">
            <summary>
            Casts a <see cref="T:System.Uri"/> instance to a <see cref="T:Nancy.Url"/> instance
            </summary>
            <param name="uri">The instance that should be cast.</param>
            <returns>An <see cref="T:Nancy.Url"/> representation of the <paramref name="uri"/>.</returns>
        </member>
        <member name="T:Nancy.Validation.CompositeValidator">
            <summary>
            A composite validator to combine other validators.
            </summary>
        </member>
        <member name="M:Nancy.Validation.CompositeValidator.#ctor(System.Collections.Generic.IEnumerable{Nancy.Validation.IModelValidator},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.CompositeValidator"/> class.
            </summary>
            <param name="validators">The validators.</param>
            <param name="modelType">The type of the model that is being validated.</param>
        </member>
        <member name="P:Nancy.Validation.CompositeValidator.Description">
            <summary>
            Gets the description of the validator.
            </summary>
        </member>
        <member name="P:Nancy.Validation.CompositeValidator.ModelType">
            <summary>
            The type of the model that is being validated by the validator.
            </summary>
        </member>
        <member name="M:Nancy.Validation.CompositeValidator.Validate(System.Object,Nancy.NancyContext)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance that should be validated.</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> of the current request.</param>
            <returns>A <see cref="T:Nancy.Validation.ModelValidationResult"/> with the result of the validation.</returns>
        </member>
        <member name="T:Nancy.Validation.DefaultValidatorLocator">
            <summary>
            The default Nancy implementation of IValidatorLocator.
            </summary>
        </member>
        <member name="M:Nancy.Validation.DefaultValidatorLocator.#ctor(System.Collections.Generic.IEnumerable{Nancy.Validation.IModelValidatorFactory})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.DefaultValidatorLocator"/> class.
            </summary>
            <param name="factories">The factories.</param>
        </member>
        <member name="M:Nancy.Validation.DefaultValidatorLocator.GetValidatorForType(System.Type)">
            <summary>
            Gets a validator for a given type.
            </summary>
            <param name="type">The type to validate.</param>
            <returns>An <see cref="T:Nancy.Validation.IModelValidator"/> instance or <see langword="null"/> if none found.</returns>
        </member>
        <member name="T:Nancy.Validation.IModelValidator">
            <summary>
            Provides a way to validate a type as well as a description to use for client-side validation.
            </summary>
        </member>
        <member name="P:Nancy.Validation.IModelValidator.Description">
            <summary>
            Gets the description of the validator.
            </summary>
        </member>
        <member name="P:Nancy.Validation.IModelValidator.ModelType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the model that is being validated by the validator.
            </summary>
        </member>
        <member name="M:Nancy.Validation.IModelValidator.Validate(System.Object,Nancy.NancyContext)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance that should be validated.</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> of the current request.</param>
            <returns>A <see cref="T:Nancy.Validation.ModelValidationResult"/> with the result of the validation.</returns>
        </member>
        <member name="T:Nancy.Validation.IModelValidatorFactory">
            <summary>
            Creates instances of IValidator.
            </summary>
        </member>
        <member name="M:Nancy.Validation.IModelValidatorFactory.Create(System.Type)">
            <summary>
            Creates a validator for the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>A validator for the given type or null if none exists.</returns>
        </member>
        <member name="T:Nancy.Validation.IModelValidatorLocator">
            <summary>
            Locates a validator for a given type.
            </summary>
        </member>
        <member name="M:Nancy.Validation.IModelValidatorLocator.GetValidatorForType(System.Type)">
            <summary>
            Gets a validator for a given type.
            </summary>
            <param name="type">The type to validate.</param>
            <returns>An <see cref="T:Nancy.Validation.IModelValidator"/> instance or <see langword="null"/> if none found.</returns>
        </member>
        <member name="T:Nancy.Validation.ModelValidationDescriptor">
            <summary>
            A description of the rules a validator provides.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationDescriptor.#ctor(System.Collections.Generic.IEnumerable{Nancy.Validation.ModelValidationRule},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationDescriptor"/> class.
            </summary>
            <param name="rules">The rules that describes the model.</param>
            <param name="modelType">The type of the model that the rules are defined for.</param>
        </member>
        <member name="M:Nancy.Validation.ModelValidationDescriptor.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Nancy.Validation.ModelValidationRule}},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationDescriptor"/> class.
            </summary>
            <param name="rules">The rules that describes the model, grouped by member name.</param>
            <param name="modelType">The type of the model that the rules are defined for.</param>
        </member>
        <member name="P:Nancy.Validation.ModelValidationDescriptor.ModelType">
            <summary>
            The type of the model that is being described.
            </summary>
        </member>
        <member name="P:Nancy.Validation.ModelValidationDescriptor.Rules">
            <summary>
            Gets the rules.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance that contains <see cref="T:Nancy.Validation.ModelValidationRule"/> instances grouped by property name.</value>
        </member>
        <member name="T:Nancy.Validation.ModelValidationError">
            <summary>
            Represents a model validation error.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationError.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationError"/> class.
            </summary>
            <param name="memberName">Name of the member that the error describes.</param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:Nancy.Validation.ModelValidationError.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationError"/> class.
            </summary>
            <param name="memberNames">The member names that the error describes.</param>
            <param name="errorMessage"></param>
        </member>
        <member name="P:Nancy.Validation.ModelValidationError.MemberNames">
            <summary>
            Gets the member names that are a part of the error.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the name of the members.</value>
        </member>
        <member name="P:Nancy.Validation.ModelValidationError.ErrorMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationError.op_Implicit(Nancy.Validation.ModelValidationError)~System.String">
            <summary>
            Implicitly cast a validation error to a string.
            </summary>
            <param name="error">The <see cref="T:Nancy.Validation.ModelValidationError"/> that should be cast.</param>
            <returns>A <see cref="T:System.String"/> containing the validation error description.</returns>
        </member>
        <member name="M:Nancy.Validation.ModelValidationError.ToString">
            <summary>
            Returns the <see cref="P:Nancy.Validation.ModelValidationError.ErrorMessage"/>.
            </summary>
            <returns>A string containing the error message.</returns>
        </member>
        <member name="T:Nancy.Validation.ModelValidationException">
            <summary>
            Exception that is thrown during problems with model validation.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationException"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationException"/> class,
            with the provided <paramref name="message"/>.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Nancy.Validation.ModelValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationException"/> class,
            with the provided <paramref name="message"/> and <paramref name="innerException"/>
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Nancy.Validation.ModelValidationResult">
            <summary>
            Represents the result of a model validation.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationResult"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationResult.#ctor(System.Collections.Generic.IEnumerable{Nancy.Validation.ModelValidationError})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationResult"/> class.
            </summary>
            <param name="errors">The <see cref="T:Nancy.Validation.ModelValidationError"/> instances that makes up the result.</param>
        </member>
        <member name="M:Nancy.Validation.ModelValidationResult.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Nancy.Validation.ModelValidationError}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationResult"/> class.
            </summary>
            <param name="errors">The <see cref="T:Nancy.Validation.ModelValidationError"/> instances that makes up the result, grouped by member name.</param>
        </member>
        <member name="P:Nancy.Validation.ModelValidationResult.Errors">
            <summary>
            Gets the errors.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance that contains <see cref="T:Nancy.Validation.ModelValidationError"/> instances grouped by property name.</value>
        </member>
        <member name="P:Nancy.Validation.ModelValidationResult.FormattedErrors">
            <summary>
            Gets a clean representation of the errors.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nancy.Validation.ModelValidationResult.IsValid">
            <summary>
            Gets a value indicating whether the validated instance is valid or not.
            </summary>
            <value><see langword="true"/> if the validated instance is valid; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:Nancy.Validation.ModelValidationRule">
            <summary>
            A description of a validation rule.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationRule.#ctor(System.String,System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationRule"/> class.
            </summary>
            <param name="ruleType">Type of the rule.</param>
            <param name="errorMessageFormatter">The error message formatter.</param>
        </member>
        <member name="M:Nancy.Validation.ModelValidationRule.#ctor(System.String,System.Func{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationRule"/> class.
            </summary>
            <param name="ruleType">Type of the rule.</param>
            <param name="errorMessageFormatter">The error message formatter.</param>
            <param name="memberNames">Name of the member.</param>
        </member>
        <member name="P:Nancy.Validation.ModelValidationRule.MemberNames">
            <summary>
            Gets the names of the members this rule validates.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the name of the member.</value>
        </member>
        <member name="P:Nancy.Validation.ModelValidationRule.RuleType">
            <summary>
            Gets the type of the rule.
            </summary>
            <value>The type of the rule.</value>
        </member>
        <member name="M:Nancy.Validation.ModelValidationRule.GetErrorMessage(System.String)">
            <summary>
            Gets the error message that this rule will provide upon error.
            </summary>
            <param name="name">The name.</param>
            <returns>The error message.</returns>
        </member>
        <member name="T:Nancy.Validation.ModuleExtensions">
            <summary>
            Extensions to <see cref="T:Nancy.INancyModule"/> for validation.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModuleExtensions.Validate``1(Nancy.INancyModule,``0)">
            <summary>
            Performs validation on the specified <paramref name="instance"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="instance"/> that is being validated.</typeparam>
            <param name="module">The module that the validation is performed from.</param>
            <param name="instance">The instance that is being validated.</param>
            <returns>A <see cref="T:Nancy.Validation.ModelValidationResult"/> instance.</returns>
        </member>
        <member name="T:Nancy.Validation.Rules.ComparisonOperator">
            <summary>
            Specifies the validation comparison operators used by the <see cref="T:Nancy.Validation.Rules.ComparisonValidationRule"/> type.
            </summary>
        </member>
        <member name="F:Nancy.Validation.Rules.ComparisonOperator.GreaterThan">
            <summary>
            A comparison for greater than.
            </summary>
        </member>
        <member name="F:Nancy.Validation.Rules.ComparisonOperator.GreaterThanOrEqual">
            <summary>
            A comparison for greater than or equal to.
            </summary>
        </member>
        <member name="F:Nancy.Validation.Rules.ComparisonOperator.LessThan">
            <summary>
            A comparison for less than.
            </summary>
        </member>
        <member name="F:Nancy.Validation.Rules.ComparisonOperator.LessThanOrEqual">
            <summary>
            A comparison for less than or equal to.
            </summary>
        </member>
        <member name="F:Nancy.Validation.Rules.ComparisonOperator.Equal">
            <summary>
            A comparison for equality.
            </summary>
        </member>
        <member name="F:Nancy.Validation.Rules.ComparisonOperator.NotEqual">
            <summary>
            A comparison for inequality.
            </summary>
        </member>
        <member name="T:Nancy.Validation.Rules.ComparisonValidationRule">
            <summary>
            Implementation of <see cref="T:Nancy.Validation.ModelValidationRule"/> for comparing two values using a
            provided <see cref="T:Nancy.Validation.Rules.ComparisonOperator"/>.
            </summary>
        </member>
        <member name="M:Nancy.Validation.Rules.ComparisonValidationRule.#ctor(System.Func{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},Nancy.Validation.Rules.ComparisonOperator,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.Rules.ComparisonValidationRule"/> class.
            </summary>
            <param name="errorMessageFormatter">The error message formatter.</param>
            <param name="memberNames">The member names.</param>
            <param name="operator">The <see cref="T:Nancy.Validation.Rules.ComparisonOperator"/> that should be used when comparing values.</param>
            <param name="value">Gets the value to compare against.</param>
        </member>
        <member name="P:Nancy.Validation.Rules.ComparisonValidationRule.Operator">
            <summary>
            The <see cref="T:Nancy.Validation.Rules.ComparisonOperator"/> that should be used when comparing values.
            </summary>
            <value>A <see cref="T:Nancy.Validation.Rules.ComparisonOperator"/> value.</value>
        </member>
        <member name="P:Nancy.Validation.Rules.ComparisonValidationRule.Value">
            <summary>
            Gets the value to compare against.
            </summary>
        </member>
        <member name="T:Nancy.Validation.Rules.NotEmptyValidationRule">
            <summary>
            Implementation of <see cref="T:Nancy.Validation.ModelValidationRule"/> for ensuring a string does not
            contain an empty value.
            </summary>
        </member>
        <member name="M:Nancy.Validation.Rules.NotEmptyValidationRule.#ctor(System.Func{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.Rules.NotEmptyValidationRule"/> class.
            </summary>
            <param name="errorMessageFormatter">The error message formatter.</param>
            <param name="memberNames">The member names.</param>
        </member>
        <member name="T:Nancy.Validation.Rules.NotNullValidationRule">
            <summary>
            Implementation of <see cref="T:Nancy.Validation.ModelValidationRule"/> for ensuring a string is not null.
            </summary>
        </member>
        <member name="M:Nancy.Validation.Rules.NotNullValidationRule.#ctor(System.Func{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.Rules.NotNullValidationRule"/> class.
            </summary>
            <param name="errorMessageFormatter">The error message formatter.</param>
            <param name="memberNames">The member names.</param>
        </member>
        <member name="T:Nancy.Validation.Rules.RegexValidationRule">
            <summary>
            Implementation of <see cref="T:Nancy.Validation.ModelValidationRule"/> for ensuring a string matches the
            pattern which is defined by a regex.
            </summary>
        </member>
        <member name="M:Nancy.Validation.Rules.RegexValidationRule.#ctor(System.Func{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.Rules.RegexValidationRule"/> class.
            </summary>
            <param name="errorMessageFormatter">The error message formatter.</param>
            <param name="memberNames">The member names.</param>
            <param name="pattern">The regex pattern that should be used to check for a match.</param>
        </member>
        <member name="P:Nancy.Validation.Rules.RegexValidationRule.Pattern">
            <summary>
            The regex pattern that should be used to check for a match.
            </summary>
        </member>
        <member name="T:Nancy.Validation.Rules.StringLengthValidationRule">
            <summary>
            Implementation of <see cref="T:Nancy.Validation.ModelValidationRule"/> for ensuring that the length of a string
            is withing the specified range.
            </summary>
        </member>
        <member name="M:Nancy.Validation.Rules.StringLengthValidationRule.#ctor(System.Func{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.Rules.StringLengthValidationRule"/> class.
            </summary>
            <param name="errorMessageFormatter">The error message formatter.</param>
            <param name="memberNames">The member names.</param>
            <param name="minLength">Minimum allowed length of the string</param>
            <param name="maxLength">Maximum allowed length of the string</param>
        </member>
        <member name="P:Nancy.Validation.Rules.StringLengthValidationRule.MinLength">
            <summary>
            Gets the length of the min.
            </summary>
            <value>The length of the min.</value>
        </member>
        <member name="P:Nancy.Validation.Rules.StringLengthValidationRule.MaxLength">
            <summary>
            Gets the length of the max.
            </summary>
            <value>The length of the max.</value>
        </member>
        <member name="T:Nancy.ViewConfiguration">
            <summary>
            Configuration for view rendering.
            </summary>
        </member>
        <member name="F:Nancy.ViewConfiguration.Default">
            <summary>
            A default instance of the <see cref="T:Nancy.ViewConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Nancy.ViewConfiguration.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewConfiguration"/> class.
            </summary>
            <param name="runtimeViewDiscovery">Determines if views can be discovered during runtime.</param>
            <param name="runtimeViewUpdates">Determines if views can be updated during runtime.</param>
        </member>
        <member name="P:Nancy.ViewConfiguration.RuntimeViewDiscovery">
            <summary>
            Gets or sets a value indicating whether or not to enable runtime view discovery
            </summary>
            <value><see langword="true"/> if views can be discovered during runtime, otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:Nancy.ViewConfiguration.RuntimeViewUpdates">
            <summary>
            Gets a value indicating whether or not to allow runtime changes of views.
            </summary>
            <value><see langword="true"/> if views can be updated during runtime, otherwise <see langword="false"/>.</value>
        </member>
        <member name="T:Nancy.ViewConfigurationExtensions">
            <summary>
            Contains <see cref="T:Nancy.ViewConfiguration"/> configuration extensions for <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
        </member>
        <member name="M:Nancy.ViewConfigurationExtensions.Views(Nancy.Configuration.INancyEnvironment,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Configures <see cref="T:Nancy.ViewConfiguration"/>.
            </summary>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> that should be configured.</param>
            <param name="runtimeViewDiscovery"><see langword="true"/> if views can be discovered during runtime, otherwise <see langword="false"/>.</param>
            <param name="runtimeViewUpdates"><see langword="true"/> if views can be updated during runtime, otherwise <see langword="false"/>.</param>
        </member>
        <member name="T:Nancy.ViewEngines.AmbiguousViewsException">
            <summary>
            Thrown when multiple <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances describe the exact same view.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.AmbiguousViewsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.AmbiguousViewsException"/> class.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.AmbiguousViewsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.AmbiguousViewsException"/> class.
            </summary>
            <param name="message">The message that should be displayed with the exception.</param>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultFileSystemReader">
            <summary>
            Default implementation for retrieving information about views that are stored on the file system.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultFileSystemReader.GetViewsWithSupportedExtensions(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets information about view that are stored in folders below the applications root path.
            </summary>
            <param name="path">The path of the folder where the views should be looked for.</param>
            <param name="supportedViewExtensions">A list of view extensions to look for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing view locations and contents readers.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultFileSystemReader.GetLastModified(System.String)">
            <summary>
            Gets the last modified time for the file specified
            </summary>
            <param name="filename">Filename</param>
            <returns>Time the file was last modified</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultFileSystemReader.GetViewsWithSupportedExtensions(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets information about specific views that are stored in folders below the applications root path.
            </summary>
            <param name="path">The path of the folder where the views should be looked for.</param>
            <param name="viewName">Name of the view to search for</param>
            <param name="supportedViewExtensions">A list of view extensions to look for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing view locations and contents readers.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultRenderContext">
            <summary>
            Default render context implementation.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContext.#ctor(Nancy.ViewEngines.IViewResolver,Nancy.ViewEngines.IViewCache,Nancy.Localization.ITextResource,Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.DefaultRenderContext"/> class.
            </summary>
            <param name="viewResolver"></param>
            <param name="viewCache"></param>
            <param name="textResource"></param>
            <param name="viewLocationContext"></param>
        </member>
        <member name="P:Nancy.ViewEngines.DefaultRenderContext.Context">
            <summary>
            Gets the context of the current request.
            </summary>
            <value>A <see cref="T:Nancy.NancyContext"/> instance.</value>
        </member>
        <member name="P:Nancy.ViewEngines.DefaultRenderContext.ViewCache">
            <summary>
            Gets the view cache that is used by Nancy.
            </summary>
            <value>An <see cref="T:Nancy.ViewEngines.IViewCache"/> instance.</value>
        </member>
        <member name="P:Nancy.ViewEngines.DefaultRenderContext.TextResource">
            <summary>
            Gets the text resource for localisation
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.DefaultRenderContext.TextResourceFinder">
            <summary>
            Gets the text resource finder for localisation
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContext.ParsePath(System.String)">
            <summary>
            Parses a path and returns an absolute url path, taking into account
            base directory etc.
            </summary>
            <param name="input">Input url such as ~/styles/main.css</param>
            <returns>Parsed absolute url path</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContext.HtmlEncode(System.String)">
            <summary>
            HTML encodes a string.
            </summary>
            <param name="input">The string that should be HTML encoded.</param>
            <returns>A HTML encoded <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContext.LocateView(System.String,System.Object)">
            <summary>
            Locates a view that matches the provided <paramref name="viewName"/> and <paramref name="model"/>.
            </summary>
            <param name="viewName">The name of the view that should be located.</param>
            <param name="model">The model that should be used when locating the view.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be located; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContext.GetCsrfToken">
            <summary>
            Generates a Csrf token.
            The token should be stored in a cookie and the form as a hidden field.
            In both cases the name should be the key of the returned key value pair.
            </summary>
            <returns>A tuple containing the name (cookie name and form/querystring name) and value</returns>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultRenderContextFactory">
            <summary>
            Default render context factory implementation.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContextFactory.#ctor(Nancy.ViewEngines.IViewCache,Nancy.ViewEngines.IViewResolver,Nancy.Localization.ITextResource)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.DefaultRenderContextFactory"/> class.
            </summary>
            <param name="viewCache">The view cache that should be used by the created render context.</param>
            <param name="viewResolver">The view resolver that should be used by the created render context.</param>
            <param name="textResource">The <see cref="T:Nancy.Localization.ITextResource"/> that should be used by the engine.</param>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContextFactory.GetRenderContext(Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Gets a <see cref="T:Nancy.ViewEngines.IRenderContext"/> for the specified <see cref="T:Nancy.ViewEngines.ViewLocationContext"/>.
            </summary>
            <param name="viewLocationContext">The <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> for which the context should be created.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.IRenderContext"/> instance.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultResourceReader">
            <summary>
            Default implementation for extracting view information form an assembly.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultResourceReader.GetResourceStreamMatches(System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets information about the resources that are embedded in the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to retrieve view information from.</param>
            <param name="supportedViewEngineExtensions">A list of view extensions to look for.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of resource locations and content readers.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultViewCache">
            <summary>
            Default implementation of <see cref="T:Nancy.ViewEngines.IViewCache"/>.
            </summary>
            <remarks>Supports expiring content if it is stale, through the <see cref="P:Nancy.ViewConfiguration.RuntimeViewUpdates"/> setting.</remarks>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewCache.#ctor(Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.DefaultViewCache"/> class.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewCache.GetOrAdd``1(Nancy.ViewEngines.ViewLocationResult,System.Func{Nancy.ViewEngines.ViewLocationResult,``0})">
            <summary>
            Gets or adds a view from the cache.
            </summary>
            <typeparam name="TCompiledView">The type of the cached view instance.</typeparam>
            <param name="viewLocationResult">A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance that describes the view that is being added or retrieved from the cache.</param>
            <param name="valueFactory">A function that produces the value that should be added to the cache in case it does not already exist.</param>
            <returns>An instance of the type specified by the <typeparamref name="TCompiledView"/> type.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultViewFactory">
            <summary>
            The default implementation for how views are resolved and rendered by Nancy.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewFactory.#ctor(Nancy.ViewEngines.IViewResolver,System.Collections.Generic.IEnumerable{Nancy.ViewEngines.IViewEngine},Nancy.ViewEngines.IRenderContextFactory,Nancy.Conventions.ViewLocationConventions,Nancy.IRootPathProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.DefaultViewFactory"/> class.
            </summary>
            <param name="viewResolver">An <see cref="T:Nancy.ViewEngines.IViewResolver"/> instance that should be used to resolve the location of a view.</param>
            <param name="viewEngines">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the <see cref="T:Nancy.ViewEngines.IViewEngine"/> instances that should be able to be used to render a view</param>
            <param name="renderContextFactory">A <see cref="T:Nancy.ViewEngines.IRenderContextFactory"/> instance that should be used to create an <see cref="T:Nancy.ViewEngines.IRenderContext"/> when a view is rendered.</param>
            <param name="conventions">An <see cref="T:Nancy.Conventions.ViewLocationConventions"/> instance that should be used to resolve all possible view locations </param>
            <param name="rootPathProvider">An <see cref="T:Nancy.IRootPathProvider"/> instance.</param>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewFactory.RenderView(System.String,System.Object,Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Renders the view with the name and model defined by the <paramref name="viewName"/> and <paramref name="model"/> parameters.
            </summary>
            <param name="viewName">The name of the view to render.</param>
            <param name="model">The model that should be passed into the view.</param>
            <param name="viewLocationContext">A <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> instance, containing information about the context for which the view is being rendered.</param>
            <returns>A delegate that can be invoked with the <see cref="T:System.IO.Stream"/> that the view should be rendered to.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultViewLocator">
            <summary>
            The default implementation of <see cref="T:Nancy.ViewEngines.IViewLocator"/>.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewLocator.#ctor(Nancy.ViewEngines.IViewLocationProvider,System.Collections.Generic.IEnumerable{Nancy.ViewEngines.IViewEngine},Nancy.Configuration.INancyEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.DefaultViewLocator"/> class.
            </summary>
            <param name="viewLocationProvider">An <see cref="T:Nancy.ViewEngines.IViewLocationProvider"/> instance.</param>
            <param name="viewEngines">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Nancy.ViewEngines.IViewEngine"/> instances.</param>
            <param name="environment">An <see cref="T:Nancy.Configuration.INancyEnvironment"/> instance.</param>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewLocator.LocateView(System.String,Nancy.NancyContext)">
            <summary>
            Gets the location of the view defined by the <paramref name="viewName"/> parameter.
            </summary>
            <param name="viewName">Name of the view to locate.</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance for the current request.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be located; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewLocator.GetAllCurrentlyDiscoveredViews">
            <summary>
            Gets all the views that are currently discovered
            Note: this is *not* the recommended way to deal with the view locator
            as it doesn't allow for runtime discovery of views with the
            <see cref="T:Nancy.ViewConfiguration"/>.
            </summary>
            <returns>A collection of <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances</returns>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultViewResolver">
            <summary>
            Default implementation on how views are resolved by Nancy.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewResolver.#ctor(Nancy.ViewEngines.IViewLocator,Nancy.Conventions.ViewLocationConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.DefaultViewResolver"/> class.
            </summary>
            <param name="viewLocator">The view locator that should be used to locate views.</param>
            <param name="conventions">The conventions that the view resolver should use to figure out where to look for views.</param>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewResolver.GetViewLocation(System.String,System.Object,Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Locates a view based on the provided information.
            </summary>
            <param name="viewName">The name of the view to locate.</param>
            <param name="model">The model that will be used with the view.</param>
            <param name="viewLocationContext">A <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> instance, containing information about the context for which the view is being located.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be found, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.Extensions">
            <summary>
            Contains miscellaneous extension methods.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.Extensions.IsAnonymousType(System.Object)">
            <summary>
            Checks if the evaluated instance is an anonymous
            </summary>
            <param name="source">The object instance to check.</param>
            <returns><see langword="true"/> if the object is an anonymous type; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.Extensions.IsAnonymousType(System.Type)">
            <summary>
            Determines whether the given type is anonymous or not.
            </summary>
            <param name="type">The type.</param>
            <returns><see langword="true"/> if type is anonymous, <see langword="false"/> otherwise</returns>
        </member>
        <member name="T:Nancy.ViewEngines.FileSystemViewLocationProvider">
            <summary>
            Contains the functionality for locating a view that is located on the file system.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationProvider.#ctor(Nancy.IRootPathProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.FileSystemViewLocationProvider"/> class, with
            the provided <paramref name="rootPathProvider"/>.
            </summary>
            <param name="rootPathProvider">A <see cref="T:Nancy.IRootPathProvider"/> instance.</param>
            <remarks>Creating an instance using this constructor will result in the <see cref="T:Nancy.ViewEngines.DefaultFileSystemReader"/> being used internally.</remarks>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationProvider.#ctor(Nancy.IRootPathProvider,Nancy.ViewEngines.IFileSystemReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.FileSystemViewLocationProvider"/> class, with
            the provided <paramref name="rootPathProvider"/> and <paramref name="fileSystemReader"/>.
            </summary>
            <param name="rootPathProvider">A <see cref="T:Nancy.IRootPathProvider"/> instance.</param>
            <param name="fileSystemReader">An <see cref="T:Nancy.ViewEngines.IFileSystemReader"/> instance that should be used when retrieving view information from the file system.</param>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationProvider.GetLocatedViews(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns an <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance for all the views that could be located by the provider.
            </summary>
            <param name="supportedViewExtensions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances for the located views.</returns>
            <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationProvider.GetLocatedViews(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Returns an <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance for all the views matching the viewName that could be located by the provider.
            </summary>
            <param name="supportedViewExtensions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
            <param name="location">Location of the view</param>
            <param name="viewName">The name of the view to try and find</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances for the located views.</returns>
            <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
        </member>
        <member name="T:Nancy.ViewEngines.FileSystemViewLocationResult">
            <summary>
            View location result for file system based views.
            Supports detecting if the contents have changed since it
            was last read.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationResult.#ctor(System.String,System.String,System.String,System.Func{System.IO.TextReader},System.String,Nancy.ViewEngines.IFileSystemReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> class.
            </summary>
            <param name="location">The location of where the view was found.</param>
            <param name="name">The name of the view.</param>
            <param name="extension">The file extension of the located view.</param>
            <param name="contents">A <see cref="T:System.IO.TextReader"/> that can be used to read the contents of the located view.</param>
            <param name="fullFilename">Full filename of the file</param>
            <param name="fileSystem">An <see cref="T:Nancy.ViewEngines.IFileSystemReader"/> instance that should be used when retrieving view information from the file system.</param>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationResult.IsStale">
            <summary>
            Gets a value indicating whether the current item is stale
            </summary>
            <returns>True if stale, false otherwise</returns>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationResult.GetContents">
            <summary>
            Wraps the real contents delegate to set the last modified date first
            </summary>
            <returns>TextReader to read the file</returns>
        </member>
        <member name="T:Nancy.ViewEngines.IFileSystemReader">
            <summary>
            Defines the functionality for retrieving information about views that are stored on the file system.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IFileSystemReader.GetViewsWithSupportedExtensions(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets information about view that are stored in folders below the applications root path.
            </summary>
            <param name="path">The path of the folder where the views should be looked for.</param>
            <param name="supportedViewExtensions">A list of view extensions to look for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing view locations and contents readers.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.IFileSystemReader.GetLastModified(System.String)">
            <summary>
            Gets the last modified time for the file specified
            </summary>
            <param name="filename">Filename</param>
            <returns>Time the file was last modified</returns>
        </member>
        <member name="M:Nancy.ViewEngines.IFileSystemReader.GetViewsWithSupportedExtensions(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets information about specific views that are stored in folders below the applications root path.
            </summary>
            <param name="path">The path of the folder where the views should be looked for.</param>
            <param name="viewName">Name of the view to search for</param>
            <param name="supportedViewExtensions">A list of view extensions to look for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing view locations and contents readers.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.IRenderContext">
            <summary>
            Defines the functionality of the context that is passed into a view engine when the view is requested to be rendered.
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.IRenderContext.Context">
            <summary>
            Gets the context of the current request.
            </summary>
            <value>A <see cref="T:Nancy.NancyContext"/> instance.</value>
        </member>
        <member name="P:Nancy.ViewEngines.IRenderContext.ViewCache">
            <summary>
            Gets the view cache that is used by Nancy.
            </summary>
            <value>An <see cref="T:Nancy.ViewEngines.IViewCache"/> instance.</value>
        </member>
        <member name="P:Nancy.ViewEngines.IRenderContext.TextResource">
            <summary>
            Gets the text resource for localisation
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.IRenderContext.TextResourceFinder">
            <summary>
            Gets the text resource finder for localisation
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IRenderContext.ParsePath(System.String)">
            <summary>
            Parses a path and returns an absolute url path, taking into account
            base directory etc.
            </summary>
            <param name="input">Input url such as ~/styles/main.css</param>
            <returns>Parsed absolute url path</returns>
        </member>
        <member name="M:Nancy.ViewEngines.IRenderContext.HtmlEncode(System.String)">
            <summary>
            HTML encodes a string.
            </summary>
            <param name="input">The string that should be HTML encoded.</param>
            <returns>A HTML encoded <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.IRenderContext.LocateView(System.String,System.Object)">
            <summary>
            Locates a view that matches the provided <paramref name="viewName"/> and <paramref name="model"/>.
            </summary>
            <param name="viewName">The name of the view that should be located.</param>
            <param name="model">The model that should be used when locating the view.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be located; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.IRenderContext.GetCsrfToken">
            <summary>
            Gets the current Csrf token.
            The token should be stored in a cookie and the form as a hidden field.
            In both cases the name should be the key of the returned key value pair.
            </summary>
            <returns>A tuple containing the name (cookie name and form/querystring name) and value</returns>
        </member>
        <member name="T:Nancy.ViewEngines.IRenderContextFactory">
            <summary>
            Defines the functionality required to manufacture <see cref="T:Nancy.ViewEngines.IRenderContext"/> instances.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IRenderContextFactory.GetRenderContext(Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Gets a <see cref="T:Nancy.ViewEngines.IRenderContext"/> for the specified <see cref="T:Nancy.ViewEngines.ViewLocationContext"/>.
            </summary>
            <param name="viewLocationContext">The <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> for which the context should be created.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.IRenderContext"/> instance.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.IResourceReader">
            <summary>
            Defines the functionality of a reader that extracts embedded views from an assembly.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IResourceReader.GetResourceStreamMatches(System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets information about the resources that are embedded in the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to retrieve view information from.</param>
            <param name="supportedViewEngineExtensions">A list of view extensions to look for.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of resource locations and content readers.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.IViewCache">
            <summary>
            Defines the functionality of a Nancy view cache.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IViewCache.GetOrAdd``1(Nancy.ViewEngines.ViewLocationResult,System.Func{Nancy.ViewEngines.ViewLocationResult,``0})">
            <summary>
            Gets or adds a view from the cache.
            </summary>
            <typeparam name="TCompiledView">The type of the cached view instance.</typeparam>
            <param name="viewLocationResult">A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance that describes the view that is being added or retrieved from the cache.</param>
            <param name="valueFactory">A function that produces the value that should be added to the cache in case it does not already exist.</param>
            <returns>An instance of the type specified by the <typeparamref name="TCompiledView"/> type.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.IViewEngine">
            <summary>
            Defines the functionality that a view engine must support to be integrated into Nancy.
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.IViewEngine.Extensions">
            <summary>
            Gets the extensions file extensions that are supported by the view engine.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the extensions.</value>
            <remarks>The extensions should not have a leading dot in the name.</remarks>
        </member>
        <member name="M:Nancy.ViewEngines.IViewEngine.Initialize(Nancy.ViewEngines.ViewEngineStartupContext)">
            <summary>
            Initialise the view engine (if necessary)
            </summary>
            <param name="viewEngineStartupContext">Startup context</param>
        </member>
        <member name="M:Nancy.ViewEngines.IViewEngine.RenderView(Nancy.ViewEngines.ViewLocationResult,System.Object,Nancy.ViewEngines.IRenderContext)">
            <summary>
            Renders the view.
            </summary>
            <param name="viewLocationResult">A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance, containing information on how to get the view template.</param>
            <param name="model">The model that should be passed into the view</param>
            <param name="renderContext"></param>
            <returns>A response</returns>
        </member>
        <member name="T:Nancy.ViewEngines.IViewFactory">
            <summary>
            Defines the functionality used by a <see cref="T:Nancy.INancyModule"/> to render a view to the response.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IViewFactory.RenderView(System.String,System.Object,Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Renders the view with the name and model defined by the <paramref name="viewName"/> and <paramref name="model"/> parameters.
            </summary>
            <param name="viewName">The name of the view to render.</param>
            <param name="model">The module path of the module that is rendering the view.</param>
            <param name="viewLocationContext">A <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> instance, containing information about the context for which the view is being rendered.</param>
            <returns>A response.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.IViewLocationProvider">
            <summary>
            Defines the functionality used by Nancy to located a view.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IViewLocationProvider.GetLocatedViews(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns an <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance for all the views that could be located by the provider.
            </summary>
            <param name="supportedViewExtensions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances for the located views.</returns>
            <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
        </member>
        <member name="M:Nancy.ViewEngines.IViewLocationProvider.GetLocatedViews(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Returns an <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance for all the views matching the viewName that could be located by the provider.
            </summary>
            <param name="supportedViewExtensions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
            <param name="location">Location of the view</param>
            <param name="viewName">The name of the view to try and find</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances for the located views.</returns>
            <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
        </member>
        <member name="T:Nancy.ViewEngines.IViewLocator">
            <summary>
            Defines the functionality for locating the requested view.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IViewLocator.LocateView(System.String,Nancy.NancyContext)">
            <summary>
            Gets the location of the view defined by the <paramref name="viewName"/> parameter.
            </summary>
            <param name="viewName">Name of the view to locate.</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance for the current request.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be located; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.IViewLocator.GetAllCurrentlyDiscoveredViews">
            <summary>
            Gets all the views that are currently discovered
            Note: this is *not* the recommended way to deal with the view locator
            as it doesn't allow for runtime discovery of views with the
            <see cref="T:Nancy.ViewConfiguration"/>.
            </summary>
            <returns>A collection of <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances</returns>
        </member>
        <member name="T:Nancy.ViewEngines.IViewResolver">
            <summary>
            Defines the functionality for resolving the requested view.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IViewResolver.GetViewLocation(System.String,System.Object,Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Locates a view based on the provided information.
            </summary>
            <param name="viewName">The name of the view to locate.</param>
            <param name="model">The model that will be used with the view.</param>
            <param name="viewLocationContext">A <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> instance, containing information about the context for which the view is being located.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be found, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.ResourceViewLocationProvider">
            <summary>
            Contains the functionality for locating a view that has been embedded into an assembly resource.
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.ResourceViewLocationProvider.RootNamespaces">
            <summary>
            User-configured root namespaces for assemblies.
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.ResourceViewLocationProvider.Ignore">
            <summary>
            A list of assemblies to ignore when scanning for embedded views.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.ResourceViewLocationProvider.#ctor(Nancy.IAssemblyCatalog)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ResourceViewLocationProvider"/> class, with
            the provided <paramref name="assemblyCatalog"/>.
            </summary>
            <param name="assemblyCatalog">An <see cref="T:Nancy.IAssemblyCatalog"/> instance.</param>
        </member>
        <member name="M:Nancy.ViewEngines.ResourceViewLocationProvider.#ctor(Nancy.ViewEngines.IResourceReader,Nancy.IResourceAssemblyProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ResourceViewLocationProvider"/> class, with
            the provided <paramref name="resourceReader"/> and <paramref name="resourceAssemblyProvider"/>.
            </summary>
            <param name="resourceReader">An <see cref="T:Nancy.ViewEngines.IResourceReader"/> instance that should be used when extracting embedded views.</param>
            <param name="resourceAssemblyProvider">An <see cref="T:Nancy.IResourceAssemblyProvider"/> instance that should be used to determine which assemblies to scan for embedded views.</param>
        </member>
        <member name="M:Nancy.ViewEngines.ResourceViewLocationProvider.GetLocatedViews(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns an <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance for all the views that could be located by the provider.
            </summary>
            <param name="supportedViewExtensions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances for the located views.</returns>
            <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
        </member>
        <member name="M:Nancy.ViewEngines.ResourceViewLocationProvider.GetLocatedViews(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Returns an <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance for all the views matching the viewName that could be located by the provider.
            </summary>
            <param name="supportedViewExtensions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
            <param name="location">Location of the view</param>
            <param name="viewName">The name of the view to try and find</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances for the located views.</returns>
            <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
        </member>
        <member name="T:Nancy.ViewEngines.SuperSimpleViewEngine.ISuperSimpleViewEngineMatcher">
            <summary>
            Matches and modifies the content of a rendered SuperSimpleViewEngine view.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.ISuperSimpleViewEngineMatcher.Invoke(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Invokes the matcher on the content of the rendered view.
            </summary>
            <param name="content">The content of the rendered view.</param>
            <param name="model">The model that was passed to the view.</param>
            <param name="host">The <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost"/> host.</param>
            <returns>The modified version of the view.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost">
            <summary>
            Provides the view engine with utility functions for
            encoding, locating partial view templates etc.
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost.Context">
            <summary>
            Context object of the host application.
            </summary>
            <value>An instance of the context object from the host.</value>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost.HtmlEncode(System.String)">
            <summary>
            Html "safe" encode a string
            </summary>
            <param name="input">Input string</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost.GetTemplate(System.String,System.Object)">
            <summary>
            Get the contents of a template
            </summary>
            <param name="templateName">Name/location of the template</param>
            <param name="model">Model to use to locate the template via conventions</param>
            <returns>Contents of the template, or null if not found</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost.GetUriString(System.String,System.String[])">
            <summary>
            Gets a uri string for a named route
            </summary>
            <param name="name">Named route name</param>
            <param name="parameters">Parameters to use to expand the uri string</param>
            <returns>Expanded uri string, or null if not found</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost.ExpandPath(System.String)">
            <summary>
            Expands a path to include any base paths
            </summary>
            <param name="path">Path to expand</param>
            <returns>Expanded path</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost.AntiForgeryToken">
            <summary>
            Get the anti forgery token form element
            </summary>
            <returns>String containing the form element</returns>
        </member>
        <member name="T:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost">
            <summary>
            Nancy view engine host
            </summary>
            <seealso cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost" />
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.#ctor(Nancy.ViewEngines.IRenderContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost"/> class, with
            the provided <paramref name="renderContext"/>.
            </summary>
            <param name="renderContext">
            The render context.
            </param>
        </member>
        <member name="P:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.Context">
            <summary>
            Context object of the host application.
            </summary>
            <value>An instance of the context object from the host.</value>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.HtmlEncode(System.String)">
            <summary>
            Html "safe" encode a string
            </summary>
            <param name="input">Input string</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.GetTemplate(System.String,System.Object)">
            <summary>
            Get the contents of a template
            </summary>
            <param name="templateName">Name/location of the template</param>
            <param name="model">Model to use to locate the template via conventions</param>
            <returns>Contents of the template, or null if not found</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.GetUriString(System.String,System.String[])">
            <summary>
            Gets a uri string for a named route
            </summary>
            <param name="name">Named route name</param>
            <param name="parameters">Parameters to use to expand the uri string</param>
            <returns>Expanded uri string, or null if not found</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.ExpandPath(System.String)">
            <summary>
            Expands a path to include any base paths
            </summary>
            <param name="path">Path to expand</param>
            <returns>Expanded path</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.AntiForgeryToken">
            <summary>
            Get the anti forgery token form element
            </summary>
            <returns>String containing the form element</returns>
        </member>
        <member name="T:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine">
            <summary>
            A super-simple view engine
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.ViewBagSubstitutionsRegEx">
            <summary>
            Compiled Regex for viewbag substitutions
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.SingleSubstitutionsRegEx">
            <summary>
            Compiled Regex for single substitutions
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.ContextSubstitutionsRegEx">
            <summary>
            Compiled Regex for context subsituations
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.EachSubstitutionRegEx">
            <summary>
            Compiled Regex for each blocks
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.EachItemSubstitutionRegEx">
            <summary>
            Compiled Regex for each block current substitutions
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.ConditionalOpenSyntaxPattern">
            <summary>
            Compiled Regex for if blocks
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PartialSubstitutionRegEx">
            <summary>
            Compiled regex for partial blocks
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.SectionDeclarationRegEx">
            <summary>
            Compiled RegEx for section block declarations
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.SectionContentsRegEx">
            <summary>
            Compiled RegEx for section block contents
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.MasterPageHeaderRegEx">
            <summary>
            Compiled RegEx for master page declaration
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PathExpansionRegEx">
            <summary>
            Compiled RegEx for path expansion
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.AttributeValuePathExpansionRegEx">
            <summary>
            Compiled RegEx for path expansion in attribute values
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.AntiForgeryTokenRegEx">
            <summary>
            Compiled RegEx for the CSRF anti forgery token
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.processors">
            <summary>
            View engine transform processors
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.matchers">
            <summary>
            View engine extensions
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine"/> class.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.#ctor(System.Collections.Generic.IEnumerable{Nancy.ViewEngines.SuperSimpleViewEngine.ISuperSimpleViewEngineMatcher})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine"/> class, using
            the provided <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.ISuperSimpleViewEngineMatcher"/> extensions.
            </summary>
            <param name="matchers">The matchers to use with the engine.</param>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.Render(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Renders a template
            </summary>
            <param name="template">The template to render.</param>
            <param name="model">The model to user for rendering.</param>
            <param name="host">The view engine host</param>
            <returns>A string containing the expanded template.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetPropertyValue(System.Object,System.String)">
            <summary>
            <para>
            Gets a property value from the given model.
            </para>
            <para>
            Anonymous types, standard types and ExpandoObject are supported.
            Arbitrary dynamics (implementing IDynamicMetaObjectProvider) are not, unless
            they also implement IDictionary string, object for accessing properties.
            </para>
            </summary>
            <param name="model">The model.</param>
            <param name="propertyName">The property name to evaluate.</param>
            <returns>Tuple - Item1 being a bool for whether the evaluation was successful, Item2 being the value.</returns>
            <exception cref="T:System.ArgumentException">Model type is not supported.</exception>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.StandardTypePropertyEvaluator(System.Object,System.String)">
            <summary>
            A property extractor for standard types.
            </summary>
            <param name="model">The model.</param>
            <param name="propertyName">The property name.</param>
            <returns>Tuple - Item1 being a bool for whether the evaluation was successful, Item2 being the value.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.DynamicDictionaryPropertyEvaluator(System.Object,System.String)">
            <summary>
            A property extractor designed for ExpandoObject, but also for any
            type that implements IDictionary string object for accessing its
            properties.
            </summary>
            <param name="model">The model.</param>
            <param name="propertyName">The property name.</param>
            <returns>Tuple - Item1 being a bool for whether the evaluation was successful, Item2 being the value.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetCaptureGroupValues(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Gets an IEnumerable of capture group values
            </summary>
            <param name="m">The match to use.</param>
            <param name="groupName">Group name containing the capture group.</param>
            <returns>IEnumerable of capture group values as strings.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetPropertyValueFromParameterCollection(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a property value from a collection of nested parameter names
            </summary>
            <param name="model">The model containing properties.</param>
            <param name="parameters">A collection of nested parameters (e.g. User, Name</param>
            <returns>Tuple - Item1 being a bool for whether the evaluation was successful, Item2 being the value.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetPredicateResult(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Gets the predicate result for an If or IfNot block
            </summary>
            <param name="item">The item to evaluate</param>
            <param name="properties">Property list to evaluate</param>
            <param name="nullCheck">Whether to check for null, rather than straight boolean</param>
            <returns>Bool representing the predicate result</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetPredicateResultFromSubstitutionObject(System.Object,System.Boolean)">
            <summary>
            Returns the predicate result if the substitionObject is a valid bool
            </summary>
            <param name="substitutionObject">The substitution object.</param>
            <param name="nullCheck"></param>
            <returns>Bool value of the substitutionObject, or false if unable to cast.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetHasPredicateResultFromSubstitutionObject(System.Object)">
            <summary>
            Returns the predicate result if the substitionObject is a valid ICollection
            </summary>
            <param name="substitutionObject">The substitution object.</param>
            <returns>Bool value of the whether the ICollection has items, or false if unable to cast.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformViewBagSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Performs single @ViewBag.PropertyName substitutions.
            </summary>
            <param name="template">The template.</param>
            <param name="model">This parameter is not used, the model is based on the "host.Context.ViewBag".</param>
            <param name="host">View engine host</param>
            <returns>Template with @ViewBag.PropertyName blocks expanded.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformSingleSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Performs single @Model.PropertyName substitutions.
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with @Model.PropertyName blocks expanded.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformContextSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Performs single @Context.PropertyName substitutions.
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with @Context.PropertyName blocks expanded.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformEachSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Performs @Each.PropertyName substitutions
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with @Each.PropertyName blocks expanded.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.ReplaceCurrentMatch(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Expand a @Current match inside an @Each iterator
            </summary>
            <param name="contents">Contents of the @Each block</param>
            <param name="item">Current item from the @Each enumerable</param>
            <param name="host">View engine host</param>
            <returns>String result of the expansion of the @Each.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformConditionalSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Performs @If.PropertyName and @IfNot.PropertyName substitutions
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with @If.PropertyName @IfNot.PropertyName blocks removed/expanded.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformPathSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Perform path expansion substitutions
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with paths expanded</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformAntiForgeryTokenSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Perform CSRF anti forgery token expansions
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with anti forgery tokens expanded</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformPartialSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Perform @Partial partial view expansion
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with partials expanded</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformMasterPageSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Invokes the master page rendering with current sections if necessary
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with master page applied and sections substituted</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.RenderMasterPage(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Renders a master page - does a normal render then replaces any section tags with sections passed in
            </summary>
            <param name="masterTemplate">The master page template</param>
            <param name="sections">Dictionary of section contents</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with the master page applied and sections substituted</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetMasterPageName(System.String)">
            <summary>
            Gets the master page name, if one is specified
            </summary>
            <param name="template">The template</param>
            <returns>Master page name or String.Empty</returns>
        </member>
        <member name="T:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineRegistrations">
            <summary>
            Performs application registrations for the SuperSimpleViewEngine.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineRegistrations.#ctor(Nancy.ITypeCatalog)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineRegistrations"/> class.
            </summary>
            <param name="typeCatalog">Type catalog.</param>
        </member>
        <member name="P:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineRegistrations.TypeRegistrations">
            <summary>
            Gets the type registrations to register for this startup task
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineRegistrations.CollectionTypeRegistrations">
            <summary>
            Gets the collection registrations to register for this startup task
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineRegistrations.InstanceRegistrations">
            <summary>
            Gets the instance registrations to register for this startup task
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper">
            <summary>
            Nancy IViewEngine wrapper for the super simple view engine
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper.extensions">
            <summary>
            Extensions that the view engine supports
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper.viewEngine">
            <summary>
            The engine itself
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper.Extensions">
            <summary>
            Gets the extensions file extensions that are supported by the view engine.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the extensions.</value>
            <remarks>The extensions should not have a leading dot in the name.</remarks>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper.#ctor(System.Collections.Generic.IEnumerable{Nancy.ViewEngines.SuperSimpleViewEngine.ISuperSimpleViewEngineMatcher})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper"/> class, using
            the provided <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.ISuperSimpleViewEngineMatcher"/> extensions.
            </summary>
            <param name="matchers">The matchers to use with the engine.</param>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper.Initialize(Nancy.ViewEngines.ViewEngineStartupContext)">
            <summary>
            Initialise the view engine (if necessary)
            </summary>
            <param name="viewEngineStartupContext">Startup context</param>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper.RenderView(Nancy.ViewEngines.ViewLocationResult,System.Object,Nancy.ViewEngines.IRenderContext)">
            <summary>
            Renders the view.
            </summary>
            <param name="viewLocationResult">A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance, containing information on how to get the view template.</param>
            <param name="model">The model that should be passed into the view</param>
            <param name="renderContext">An <see cref="T:Nancy.ViewEngines.IRenderContext"/> instance.</param>
            <returns>A response</returns>
        </member>
        <member name="T:Nancy.ViewEngines.ViewEngineApplicationStartup">
            <summary>
            Calls the initialize method on all <see cref="T:Nancy.ViewEngines.IViewEngine"/> implementations, at application startup.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.ViewEngineApplicationStartup.#ctor(System.Collections.Generic.IEnumerable{Nancy.ViewEngines.IViewEngine},Nancy.ViewEngines.IViewCache,Nancy.ViewEngines.IViewLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewEngineApplicationStartup"/> class, with the
            provided <paramref name="viewEngines"/>, <paramref name="viewCache"/> and <paramref name="viewLocator"/>.
            </summary>
            <param name="viewEngines">The available view engines.</param>
            <param name="viewCache">The view cache.</param>
            <param name="viewLocator">The view locator.</param>
        </member>
        <member name="M:Nancy.ViewEngines.ViewEngineApplicationStartup.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Perform any initialisation tasks
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.ViewEngines.ViewEngineStartupContext">
            <summary>
            Context passed to each view engine on startup
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.ViewEngineStartupContext.#ctor(Nancy.ViewEngines.IViewCache,Nancy.ViewEngines.IViewLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewEngineStartupContext"/> class, with
            the provided <paramref name="viewCache"/> and <paramref name="viewLocator"/>.
            </summary>
            <param name="viewCache">The view cache.</param>
            <param name="viewLocator">The view locator.</param>
        </member>
        <member name="P:Nancy.ViewEngines.ViewEngineStartupContext.ViewCache">
            <summary>
            Gets the Nancy view cache - can be used to precompile views at startup
            if necessary.
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.ViewEngineStartupContext.ViewLocator">
            <summary>
            Gets the Nancy view locator
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.ViewLocationContext">
            <summary>
            The context for which a view is being located.
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationContext.ModulePath">
            <summary>
            The module path of the <see cref="T:Nancy.INancyModule"/> that is locating a view.
            </summary>
            <value>A <see cref="T:System.String"/> containing the module path.</value>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationContext.ModuleName">
            <summary>
            The name of the <see cref="T:Nancy.INancyModule"/> that is locating a view.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the module.</value>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationContext.Context">
            <summary>
            The request/response context
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.ViewLocationResult">
            <summary>
            Contains the result of an attempt to locate a view.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> class.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.#ctor(System.String,System.String,System.String,System.Func{System.IO.TextReader})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> class, with
            the provided <paramref name="location"/>, <paramref name="name"/>, 
            <paramref name="extension"/> and <paramref name="contents"/>.
            </summary>
            <param name="location">The location of where the view was found.</param>
            <param name="name">The name of the view.</param>
            <param name="extension">The file extension of the located view.</param>
            <param name="contents">A <see cref="T:System.IO.TextReader"/> that can be used to read the contents of the located view.</param>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationResult.Contents">
            <summary>
            Gets a function that produces a reader for retrieving the contents of the view.
            </summary>
            <value>A <see cref="T:System.Func`1"/> instance that can be used to produce a reader for retrieving the contents of the view.</value>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationResult.Extension">
            <summary>
            Gets the extension of the view that was located.
            </summary>
            <value>A <see cref="T:System.String"/> containing the extension of the view that was located.</value>
            <remarks>The extension should not contain a leading dot.</remarks>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationResult.Location">
            <summary>
            Gets the location of where the view was found.
            </summary>
            <value>A <see cref="T:System.String"/> containing the location of the view.</value>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationResult.Name">
            <summary>
            Gets the full name of the view that was found
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the view.</value>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.IsStale">
            <summary>
            Gets a value indicating whether the current item is stale
            </summary>
            <returns>True if stale, false otherwise</returns>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.Equals(Nancy.ViewEngines.ViewLocationResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns><see langword="true"/> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <see langword="false"/>.</returns>
            <param name="other">An <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> to compare with this instance.</param>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.</returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:Nancy.ViewEngines.ViewLocationResult"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.op_Equality(Nancy.ViewEngines.ViewLocationResult,Nancy.ViewEngines.ViewLocationResult)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.op_Inequality(Nancy.ViewEngines.ViewLocationResult,Nancy.ViewEngines.ViewLocationResult)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Nancy.ViewEngines.ViewNotFoundException">
            <summary>
            Exception that is thrown when a view could not be located.
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.ViewNotFoundException.ViewName">
            <summary>
            Gets the name of the view.
            </summary>
            <value>
            The name of the view.
            </value>
        </member>
        <member name="P:Nancy.ViewEngines.ViewNotFoundException.AvailableViewEngineExtensions">
            <summary>
            Gets the available view engine extensions.
            </summary>
            <value>
            The available view engine extensions.
            </value>
        </member>
        <member name="P:Nancy.ViewEngines.ViewNotFoundException.InspectedLocations">
            <summary>
            Gets the inspected locations.
            </summary>
            <value>
            The inspected locations.
            </value>
        </member>
        <member name="M:Nancy.ViewEngines.ViewNotFoundException.#ctor(System.String,System.String[],System.String[],Nancy.IRootPathProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewNotFoundException"/>, with
            the provided <paramref name="viewName"/>, <paramref name="availableViewEngineExtensions"/>,
            <paramref name="inspectedLocations"/> and <paramref name="rootPathProvider"/>.
            </summary>
            <param name="viewName">The name of the view that was being located.</param>
            <param name="availableViewEngineExtensions">List of available view extensions that can be rendered by the available view engines.</param>
            <param name="inspectedLocations">The locations that were inspected for the view.</param>
            <param name="rootPathProvider">An <see cref="T:Nancy.IRootPathProvider"/> instance.</param>
        </member>
        <member name="M:Nancy.ViewEngines.ViewNotFoundException.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewNotFoundException"/> class, with
            the provided <paramref name="viewName"/> and <paramref name="availableViewEngineExtensions"/>.
            </summary>
            <param name="viewName">The name of the view that was being located.</param>
            <param name="availableViewEngineExtensions">List of available view extensions that can be rendered by the available view engines.</param>
        </member>
        <member name="M:Nancy.ViewEngines.ViewNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewNotFoundException"/> class, with
            the provided <paramref name="msg"/>.
            </summary>
            <param name="msg">A message describing the problem</param>
        </member>
        <member name="P:Nancy.ViewEngines.ViewNotFoundException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="T:Nancy.ViewEngines.Razor.ViewRenderException">
            <summary>
            An exception that indicates the view could not be rendered
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.Razor.ViewRenderException.#ctor(System.String)">
            <summary>
            Create an instance of <see cref="T:Nancy.ViewEngines.Razor.ViewRenderException"/>
            </summary>
            <param name="msg">A description of the rendering problem</param>
        </member>
        <member name="M:Nancy.ViewEngines.Razor.ViewRenderException.#ctor(System.String,System.Exception)">
            <summary>
            Create an instance of <see cref="T:Nancy.ViewEngines.Razor.ViewRenderException"/>
            </summary>
            <param name="msg">A description of the rendering problem</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Nancy.ViewRenderer">
            <summary>
            Helper class for rendering a view from a route handler.
            </summary>
        </member>
        <member name="M:Nancy.ViewRenderer.#ctor(Nancy.INancyModule)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewRenderer"/> class.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> instance that is rendering the view.</param>
        </member>
        <member name="P:Nancy.ViewRenderer.Item(System.Object)">
            <summary>
            Renders the view with its name resolved from the model type, and model defined by the <paramref name="model"/> parameter.
            </summary>
            <param name="model">The model that should be passed into the view.</param>
            <returns>A delegate that can be invoked with the <see cref="T:System.IO.Stream"/> that the view should be rendered to.</returns>
            <remarks>The view name is model.GetType().Name with any Model suffix removed.</remarks>
        </member>
        <member name="P:Nancy.ViewRenderer.Item(System.String)">
            <summary>
            Renders the view with the name defined by the <paramref name="viewName"/> parameter.
            </summary>
            <param name="viewName">The name of the view to render.</param>
            <returns>A delegate that can be invoked with the <see cref="T:System.IO.Stream"/> that the view should be rendered to.</returns>
            <remarks>The extension in the view name is optional. If it is omitted, then Nancy will try to resolve which of the available engines that should be used to render the view.</remarks>
        </member>
        <member name="P:Nancy.ViewRenderer.Item(System.String,System.Object)">
            <summary>
            Renders the view with the name and model defined by the <paramref name="viewName"/> and <paramref name="model"/> parameters.
            </summary>
            <param name="viewName">The name of the view to render.</param>
            <param name="model">The model that should be passed into the view.</param>
            <returns>A delegate that can be invoked with the <see cref="T:System.IO.Stream"/> that the view should be rendered to.</returns>
            <remarks>The extension in the view name is optional. If it is omitted, then Nancy will try to resolve which of the available engines that should be used to render the view.</remarks>
        </member>
        <member name="T:Nancy.Xml.DefaultXmlConfigurationProvider">
            <summary>
            Provides the default configuration for <see cref="T:Nancy.Xml.XmlConfiguration"/>.
            </summary>
        </member>
        <member name="M:Nancy.Xml.DefaultXmlConfigurationProvider.GetDefaultConfiguration">
            <summary>
            Gets the default configuration instance to register in the <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
            <returns>The configuration instance</returns>
            <remarks>Will return <see cref="F:Nancy.Xml.XmlConfiguration.Default"/>.</remarks>
        </member>
        <member name="T:Nancy.Xml.XmlConfiguration">
            <summary>
            Configuration for XML serialization.
            </summary>
        </member>
        <member name="F:Nancy.Xml.XmlConfiguration.Default">
            <summary>
            A default instance of the <see cref="T:Nancy.Xml.XmlConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Xml.XmlConfiguration.#ctor(System.Boolean,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Xml.XmlConfiguration"/> class.
            </summary>
            <param name="encodingEnabled"><see langword="true" /> if encoding should be enabled, otherwise <see langword="false" />.</param>
            <param name="defaultEncoding">The <see cref="T:System.Text.Encoding"/> that should be used.</param>
        </member>
        <member name="P:Nancy.Xml.XmlConfiguration.EncodingEnabled">
            <summary>
            Gets whether character encoding should be enabled, or not, for XML responses.
            </summary>
            <value><see langword="true" /> if encoding is enabled, otherwise <see langword="false" />.</value>
            <remarks>The default value is <see langword="false" />.</remarks>
        </member>
        <member name="P:Nancy.Xml.XmlConfiguration.DefaultEncoding">
            <summary>
            Gets the default encoding for XML responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding"/> used by default.</value>
            <remarks>The default value is <see langword="Encoding.UTF8" />.</remarks>
        </member>
        <member name="T:Nancy.Xml.XmlConfigurationExtensions">
            <summary>
            Contains <see cref="T:Nancy.Xml.XmlConfiguration"/> configuration extensions for <see cref="T:Nancy.Configuration.INancyEnvironment"/>.
            </summary>
        </member>
        <member name="M:Nancy.Xml.XmlConfigurationExtensions.Xml(Nancy.Configuration.INancyEnvironment,System.Boolean,System.Text.Encoding)">
            <summary>
            Configures <see cref="T:Nancy.Xml.XmlConfiguration"/>.
            </summary>
            <param name="environment"><see cref="T:Nancy.Configuration.INancyEnvironment"/> that should be configured.</param>
            <param name="enableEncoding"><see langword="true"/> if encoding should be enabled, otherwise <see langword="false"/>.</param>
            <param name="defaultEncoding">The default <see cref="T:System.Text.Encoding"/>.</param>
        </member>
    </members>
</doc>
